
MonitoringBlockV2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000010d6  0000116a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00800100  00800100  0000116a  2**0
                  ALLOC
  3 .stab         0000216c  00000000  00000000  0000116c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000006a8  00000000  00000000  000032d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00003980  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001267  00000000  00000000  00003ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003c1  00000000  00000000  00004d27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000095f  00000000  00000000  000050e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000238  00000000  00000000  00005a48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c7  00000000  00000000  00005c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b88  00000000  00000000  00006047  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      30:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__vector_12>
      34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      68:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__vector_26>
      6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 ed       	ldi	r30, 0xD6	; 214
      a0:	f0 e1       	ldi	r31, 0x10	; 16
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 30       	cpi	r26, 0x00	; 0
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
      b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
      b4:	11 e0       	ldi	r17, 0x01	; 1
      b6:	a0 e0       	ldi	r26, 0x00	; 0
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
      bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
      be:	a9 31       	cpi	r26, 0x19	; 25
      c0:	b1 07       	cpc	r27, r17
      c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
      c4:	0e 94 23 06 	call	0xc46	; 0xc46 <main>
      c8:	0c 94 69 08 	jmp	0x10d2	; 0x10d2 <_exit>

000000cc <__bad_interrupt>:
      cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <adcPrepare>:
#include <avr/io.h>

void adcPrepare()
{
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS0);
      d0:	85 e8       	ldi	r24, 0x85	; 133
      d2:	86 b9       	out	0x06, r24	; 6
	// ADEN: Set to turn on ADC , by default it is turned off
	//ADPS2: ADPS2 and ADPS0 set to make division factor 32
}
      d4:	08 95       	ret

000000d6 <adcPrepare2>:

void adcPrepare2()
{
	ADMUX = 0x00;                                  //Select channel 0
      d6:	17 b8       	out	0x07, r1	; 7
	ADMUX|= (1<<REFS0)|(1<<REFS1);            // select voltage refrence for ADC
      d8:	87 b1       	in	r24, 0x07	; 7
      da:	80 6c       	ori	r24, 0xC0	; 192
      dc:	87 b9       	out	0x07, r24	; 7

	ADCSRA= (1<<ADEN);
      de:	80 e8       	ldi	r24, 0x80	; 128
      e0:	86 b9       	out	0x06, r24	; 6
	ADCSRA= (1<<ADSC);
      e2:	80 e4       	ldi	r24, 0x40	; 64
      e4:	86 b9       	out	0x06, r24	; 6
	ADCSRA= (1<<ADPS0)|(1<<ADPS1);             //Enable ADC & start 1st
      e6:	83 e0       	ldi	r24, 0x03	; 3
      e8:	86 b9       	out	0x06, r24	; 6
	ADCSRA= (1<<ADFR);
      ea:	80 e2       	ldi	r24, 0x20	; 32
      ec:	86 b9       	out	0x06, r24	; 6
//dummy
//conversion
//Set ADC module prescalar
//to 8 critical for
//accurate ADC results
	while ((ADCSRA & ADIF));                      //Check if conversation is //ready
      ee:	32 99       	sbic	0x06, 2	; 6
      f0:	fe cf       	rjmp	.-4      	; 0xee <adcPrepare2+0x18>

	ADCSRA |= ADIF;
      f2:	32 9a       	sbi	0x06, 2	; 6
}
      f4:	08 95       	ret

000000f6 <getAdcVoltage>:

int getAdcVoltage(uint8_t adcSignal)
{
	// Veikimas : paduot reikia is kurio adc kanalo reik perskaityt, apibrezta konstantose
	ADMUX = adcSignal;
      f6:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC); // Start conversion
      f8:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC)); // wait for conversion to complete
      fa:	36 99       	sbic	0x06, 6	; 6
      fc:	fe cf       	rjmp	.-4      	; 0xfa <getAdcVoltage+0x4>

	return ADC*0.0045*100;
      fe:	64 b1       	in	r22, 0x04	; 4
     100:	75 b1       	in	r23, 0x05	; 5
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	0e 94 51 07 	call	0xea2	; 0xea2 <__floatunsisf>
     10a:	2c eb       	ldi	r18, 0xBC	; 188
     10c:	34 e7       	ldi	r19, 0x74	; 116
     10e:	43 e9       	ldi	r20, 0x93	; 147
     110:	5b e3       	ldi	r21, 0x3B	; 59
     112:	0e 94 df 07 	call	0xfbe	; 0xfbe <__mulsf3>
     116:	20 e0       	ldi	r18, 0x00	; 0
     118:	30 e0       	ldi	r19, 0x00	; 0
     11a:	48 ec       	ldi	r20, 0xC8	; 200
     11c:	52 e4       	ldi	r21, 0x42	; 66
     11e:	0e 94 df 07 	call	0xfbe	; 0xfbe <__mulsf3>
     122:	0e 94 20 07 	call	0xe40	; 0xe40 <__fixsfsi>
}
     126:	86 2f       	mov	r24, r22
     128:	97 2f       	mov	r25, r23
     12a:	08 95       	ret

0000012c <getADC>:

int getADC(uint8_t adcSignal)
{
	ADMUX = adcSignal;
     12c:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC); // Start conversion
     12e:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC)); // wait for conversion to complete
     130:	36 99       	sbic	0x06, 6	; 6
     132:	fe cf       	rjmp	.-4      	; 0x130 <getADC+0x4>
	return ADC;
     134:	84 b1       	in	r24, 0x04	; 4
     136:	95 b1       	in	r25, 0x05	; 5
}
     138:	08 95       	ret

0000013a <ReadADC>:
{
	unsigned int binary_weighted_voltage;
	unsigned binary_weighted_voltage_low;
	unsigned int binary_weighted_voltage_high;                  //weighted binary //voltage
	
	ADMUX = channel;               //Select channel
     13a:	87 b9       	out	0x07, r24	; 7
	ADCSRA= (1<<ADEN)|(1<<ADSC)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADFR);      //Start conversion
     13c:	83 ee       	ldi	r24, 0xE3	; 227
     13e:	86 b9       	out	0x06, r24	; 6
	//Set ADC module prescalar
	//to 8 critical for
	while(1)
	{                             //accurate ADC results
		while ((ADCSRA & ADIF));                 //Check if converstion is //ready
     140:	32 99       	sbic	0x06, 2	; 6
     142:	fe cf       	rjmp	.-4      	; 0x140 <ReadADC+0x6>
		ADCSRA |= ADIF;                            //Clear Conv rdy flag - set
     144:	32 9a       	sbi	0x06, 2	; 6
		//the bit
		binary_weighted_voltage_low = ADCL;      //Read 8 low bits first
     146:	84 b1       	in	r24, 0x04	; 4
		
		//(important)
		//Read 2 high bits,
		//multiply by 256
		binary_weighted_voltage_high = ((unsigned int)(ADCH << 8));
     148:	95 b1       	in	r25, 0x05	; 5
     14a:	39 2f       	mov	r19, r25
     14c:	20 e0       	ldi	r18, 0x00	; 0
	while(1)
	{                             //accurate ADC results
		while ((ADCSRA & ADIF));                 //Check if converstion is //ready
		ADCSRA |= ADIF;                            //Clear Conv rdy flag - set
		//the bit
		binary_weighted_voltage_low = ADCL;      //Read 8 low bits first
     14e:	90 e0       	ldi	r25, 0x00	; 0
		
		//(important)
		//Read 2 high bits,
		//multiply by 256
		binary_weighted_voltage_high = ((unsigned int)(ADCH << 8));
		binary_weighted_voltage = binary_weighted_voltage_low | binary_weighted_voltage_high;
     150:	82 2b       	or	r24, r18
     152:	93 2b       	or	r25, r19
		return binary_weighted_voltage;                 //ADCH:ADCL
	}}
     154:	08 95       	ret

00000156 <showSegmentSmall>:
#define BLINK_COUNT 40

void showSegmentSmall(short numb)
{
	
		switch(numb)
     156:	84 30       	cpi	r24, 0x04	; 4
     158:	91 05       	cpc	r25, r1
     15a:	81 f1       	breq	.+96     	; 0x1bc <showSegmentSmall+0x66>
     15c:	85 30       	cpi	r24, 0x05	; 5
     15e:	91 05       	cpc	r25, r1
     160:	84 f4       	brge	.+32     	; 0x182 <showSegmentSmall+0x2c>
     162:	81 30       	cpi	r24, 0x01	; 1
     164:	91 05       	cpc	r25, r1
     166:	09 f1       	breq	.+66     	; 0x1aa <showSegmentSmall+0x54>
     168:	82 30       	cpi	r24, 0x02	; 2
     16a:	91 05       	cpc	r25, r1
     16c:	1c f4       	brge	.+6      	; 0x174 <showSegmentSmall+0x1e>
     16e:	00 97       	sbiw	r24, 0x00	; 0
     170:	b9 f1       	breq	.+110    	; 0x1e0 <showSegmentSmall+0x8a>
     172:	08 95       	ret
     174:	82 30       	cpi	r24, 0x02	; 2
     176:	91 05       	cpc	r25, r1
     178:	d9 f0       	breq	.+54     	; 0x1b0 <showSegmentSmall+0x5a>
     17a:	83 30       	cpi	r24, 0x03	; 3
     17c:	91 05       	cpc	r25, r1
     17e:	91 f5       	brne	.+100    	; 0x1e4 <showSegmentSmall+0x8e>
     180:	1a c0       	rjmp	.+52     	; 0x1b6 <showSegmentSmall+0x60>
     182:	87 30       	cpi	r24, 0x07	; 7
     184:	91 05       	cpc	r25, r1
     186:	19 f1       	breq	.+70     	; 0x1ce <showSegmentSmall+0x78>
     188:	88 30       	cpi	r24, 0x08	; 8
     18a:	91 05       	cpc	r25, r1
     18c:	3c f4       	brge	.+14     	; 0x19c <showSegmentSmall+0x46>
     18e:	85 30       	cpi	r24, 0x05	; 5
     190:	91 05       	cpc	r25, r1
     192:	b9 f0       	breq	.+46     	; 0x1c2 <showSegmentSmall+0x6c>
     194:	86 30       	cpi	r24, 0x06	; 6
     196:	91 05       	cpc	r25, r1
     198:	29 f5       	brne	.+74     	; 0x1e4 <showSegmentSmall+0x8e>
     19a:	16 c0       	rjmp	.+44     	; 0x1c8 <showSegmentSmall+0x72>
     19c:	88 30       	cpi	r24, 0x08	; 8
     19e:	91 05       	cpc	r25, r1
     1a0:	c9 f0       	breq	.+50     	; 0x1d4 <showSegmentSmall+0x7e>
     1a2:	89 30       	cpi	r24, 0x09	; 9
     1a4:	91 05       	cpc	r25, r1
     1a6:	f1 f4       	brne	.+60     	; 0x1e4 <showSegmentSmall+0x8e>
     1a8:	18 c0       	rjmp	.+48     	; 0x1da <showSegmentSmall+0x84>
		{
		case 1:
			PORTD = SD_1;
     1aa:	8f ea       	ldi	r24, 0xAF	; 175
     1ac:	82 bb       	out	0x12, r24	; 18
			break;
     1ae:	08 95       	ret
		case 2:
			PORTD = SD_2;
     1b0:	85 e4       	ldi	r24, 0x45	; 69
     1b2:	82 bb       	out	0x12, r24	; 18
			break;
     1b4:	08 95       	ret
		case 3:
			PORTD = SD_3;
     1b6:	87 e0       	ldi	r24, 0x07	; 7
     1b8:	82 bb       	out	0x12, r24	; 18
			break;
     1ba:	08 95       	ret
		case 4:
			PORTD = SD_4;
     1bc:	86 ea       	ldi	r24, 0xA6	; 166
     1be:	82 bb       	out	0x12, r24	; 18
			break;
     1c0:	08 95       	ret
		case 5:
			PORTD = SD_5;
     1c2:	86 e1       	ldi	r24, 0x16	; 22
     1c4:	82 bb       	out	0x12, r24	; 18
			break;		
     1c6:	08 95       	ret
		case 6:
			PORTD = SD_6;
     1c8:	84 e1       	ldi	r24, 0x14	; 20
     1ca:	82 bb       	out	0x12, r24	; 18
			break;
     1cc:	08 95       	ret
		case 7:
			PORTD = SD_7;
     1ce:	8f e2       	ldi	r24, 0x2F	; 47
     1d0:	82 bb       	out	0x12, r24	; 18
			break;
     1d2:	08 95       	ret
		case 8:
			PORTD = SD_8;
     1d4:	84 e0       	ldi	r24, 0x04	; 4
     1d6:	82 bb       	out	0x12, r24	; 18
			break;
     1d8:	08 95       	ret
		case 9:
			PORTD = SD_9;
     1da:	86 e0       	ldi	r24, 0x06	; 6
     1dc:	82 bb       	out	0x12, r24	; 18
			break;
     1de:	08 95       	ret
		case 0:
			PORTD = SD_0;
     1e0:	8c e0       	ldi	r24, 0x0C	; 12
     1e2:	82 bb       	out	0x12, r24	; 18
     1e4:	08 95       	ret

000001e6 <showSegmentBig>:
	
}
void showSegmentBig(short numb)
{
	
	switch(numb)
     1e6:	84 30       	cpi	r24, 0x04	; 4
     1e8:	91 05       	cpc	r25, r1
     1ea:	81 f1       	breq	.+96     	; 0x24c <showSegmentBig+0x66>
     1ec:	85 30       	cpi	r24, 0x05	; 5
     1ee:	91 05       	cpc	r25, r1
     1f0:	84 f4       	brge	.+32     	; 0x212 <showSegmentBig+0x2c>
     1f2:	81 30       	cpi	r24, 0x01	; 1
     1f4:	91 05       	cpc	r25, r1
     1f6:	09 f1       	breq	.+66     	; 0x23a <showSegmentBig+0x54>
     1f8:	82 30       	cpi	r24, 0x02	; 2
     1fa:	91 05       	cpc	r25, r1
     1fc:	1c f4       	brge	.+6      	; 0x204 <showSegmentBig+0x1e>
     1fe:	00 97       	sbiw	r24, 0x00	; 0
     200:	b9 f1       	breq	.+110    	; 0x270 <showSegmentBig+0x8a>
     202:	08 95       	ret
     204:	82 30       	cpi	r24, 0x02	; 2
     206:	91 05       	cpc	r25, r1
     208:	d9 f0       	breq	.+54     	; 0x240 <showSegmentBig+0x5a>
     20a:	83 30       	cpi	r24, 0x03	; 3
     20c:	91 05       	cpc	r25, r1
     20e:	91 f5       	brne	.+100    	; 0x274 <showSegmentBig+0x8e>
     210:	1a c0       	rjmp	.+52     	; 0x246 <showSegmentBig+0x60>
     212:	87 30       	cpi	r24, 0x07	; 7
     214:	91 05       	cpc	r25, r1
     216:	19 f1       	breq	.+70     	; 0x25e <showSegmentBig+0x78>
     218:	88 30       	cpi	r24, 0x08	; 8
     21a:	91 05       	cpc	r25, r1
     21c:	3c f4       	brge	.+14     	; 0x22c <showSegmentBig+0x46>
     21e:	85 30       	cpi	r24, 0x05	; 5
     220:	91 05       	cpc	r25, r1
     222:	b9 f0       	breq	.+46     	; 0x252 <showSegmentBig+0x6c>
     224:	86 30       	cpi	r24, 0x06	; 6
     226:	91 05       	cpc	r25, r1
     228:	29 f5       	brne	.+74     	; 0x274 <showSegmentBig+0x8e>
     22a:	16 c0       	rjmp	.+44     	; 0x258 <showSegmentBig+0x72>
     22c:	88 30       	cpi	r24, 0x08	; 8
     22e:	91 05       	cpc	r25, r1
     230:	c9 f0       	breq	.+50     	; 0x264 <showSegmentBig+0x7e>
     232:	89 30       	cpi	r24, 0x09	; 9
     234:	91 05       	cpc	r25, r1
     236:	f1 f4       	brne	.+60     	; 0x274 <showSegmentBig+0x8e>
     238:	18 c0       	rjmp	.+48     	; 0x26a <showSegmentBig+0x84>
	{
		case 1:
		PORTA = BD_1;
     23a:	82 e4       	ldi	r24, 0x42	; 66
     23c:	8b bb       	out	0x1b, r24	; 27
		break;
     23e:	08 95       	ret
		case 2:
		PORTA = BD_2;
     240:	8d e6       	ldi	r24, 0x6D	; 109
     242:	8b bb       	out	0x1b, r24	; 27
		break;
     244:	08 95       	ret
		case 3:
		PORTA = BD_3;
     246:	8b e6       	ldi	r24, 0x6B	; 107
     248:	8b bb       	out	0x1b, r24	; 27
		break;
     24a:	08 95       	ret
		case 4:
		PORTA = BD_4;
     24c:	83 ec       	ldi	r24, 0xC3	; 195
     24e:	8b bb       	out	0x1b, r24	; 27
		break;
     250:	08 95       	ret
		case 5:
		PORTA = BD_5;
     252:	8b ea       	ldi	r24, 0xAB	; 171
     254:	8b bb       	out	0x1b, r24	; 27
		break;
     256:	08 95       	ret
		case 6:
		PORTA = BD_6;
     258:	8f ea       	ldi	r24, 0xAF	; 175
     25a:	8b bb       	out	0x1b, r24	; 27
		break;
     25c:	08 95       	ret
		case 7:
		PORTA = BD_7;
     25e:	8a e4       	ldi	r24, 0x4A	; 74
     260:	8b bb       	out	0x1b, r24	; 27
		break;
     262:	08 95       	ret
		case 8:
		PORTA = BD_8;
     264:	8f ee       	ldi	r24, 0xEF	; 239
     266:	8b bb       	out	0x1b, r24	; 27
		break;
     268:	08 95       	ret
		case 9:
		PORTA = BD_9;
     26a:	8b ee       	ldi	r24, 0xEB	; 235
     26c:	8b bb       	out	0x1b, r24	; 27
		break;
     26e:	08 95       	ret
		case 0:
		PORTA = BD_0;
     270:	8e ee       	ldi	r24, 0xEE	; 238
     272:	8b bb       	out	0x1b, r24	; 27
     274:	08 95       	ret

00000276 <displayTopSmallRowNumber>:
	}

	
}
void displayTopSmallRowNumber( int numb )
{
     276:	0f 93       	push	r16
     278:	1f 93       	push	r17
     27a:	cf 93       	push	r28
	if(blink)
     27c:	20 91 00 01 	lds	r18, 0x0100
     280:	22 23       	and	r18, r18
     282:	f9 f0       	breq	.+62     	; 0x2c2 <displayTopSmallRowNumber+0x4c>
	{
		if(blinked>BLINK_COUNT*2)
     284:	20 91 13 01 	lds	r18, 0x0113
     288:	30 91 14 01 	lds	r19, 0x0114
     28c:	21 35       	cpi	r18, 0x51	; 81
     28e:	31 05       	cpc	r19, r1
     290:	c4 f0       	brlt	.+48     	; 0x2c2 <displayTopSmallRowNumber+0x4c>
		{
			PORTD = SD_empty;
     292:	8f ef       	ldi	r24, 0xFF	; 255
     294:	82 bb       	out	0x12, r24	; 18
			if (blinked>BLINK_COUNT)
     296:	80 91 13 01 	lds	r24, 0x0113
     29a:	90 91 14 01 	lds	r25, 0x0114
     29e:	89 32       	cpi	r24, 0x29	; 41
     2a0:	91 05       	cpc	r25, r1
     2a2:	2c f0       	brlt	.+10     	; 0x2ae <displayTopSmallRowNumber+0x38>
			{
				blinked=0;
     2a4:	10 92 14 01 	sts	0x0114, r1
     2a8:	10 92 13 01 	sts	0x0113, r1
				return;
     2ac:	6a c0       	rjmp	.+212    	; 0x382 <displayTopSmallRowNumber+0x10c>
			}
			blinked++;
     2ae:	80 91 13 01 	lds	r24, 0x0113
     2b2:	90 91 14 01 	lds	r25, 0x0114
     2b6:	01 96       	adiw	r24, 0x01	; 1
     2b8:	90 93 14 01 	sts	0x0114, r25
     2bc:	80 93 13 01 	sts	0x0113, r24
			return;
     2c0:	60 c0       	rjmp	.+192    	; 0x382 <displayTopSmallRowNumber+0x10c>
		}
		
	}		
		
	
	if(numb<0)
     2c2:	99 23       	and	r25, r25
     2c4:	7c f4       	brge	.+30     	; 0x2e4 <displayTopSmallRowNumber+0x6e>
	{
		PORTC = 0b11110111; //1x1
     2c6:	27 ef       	ldi	r18, 0xF7	; 247
     2c8:	25 bb       	out	0x15, r18	; 21
		PORTD = SD_minus;
     2ca:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2cc:	e1 eb       	ldi	r30, 0xB1	; 177
     2ce:	fc e0       	ldi	r31, 0x0C	; 12
     2d0:	31 97       	sbiw	r30, 0x01	; 1
     2d2:	f1 f7       	brne	.-4      	; 0x2d0 <displayTopSmallRowNumber+0x5a>
     2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <displayTopSmallRowNumber+0x60>
     2d6:	00 00       	nop
		_delay_ms(SEGMENT_DELAY);
		PORTD=SD_empty;
     2d8:	2f ef       	ldi	r18, 0xFF	; 255
     2da:	22 bb       	out	0x12, r18	; 18
		numb=numb*-1;
     2dc:	90 95       	com	r25
     2de:	81 95       	neg	r24
     2e0:	9f 4f       	sbci	r25, 0xFF	; 255
     2e2:	16 c0       	rjmp	.+44     	; 0x310 <displayTopSmallRowNumber+0x9a>
	}
	else
	{
		PORTC = 0b11110111; //1x1
     2e4:	27 ef       	ldi	r18, 0xF7	; 247
     2e6:	25 bb       	out	0x15, r18	; 21
		showSegmentSmall(numb/1000);
     2e8:	68 ee       	ldi	r22, 0xE8	; 232
     2ea:	73 e0       	ldi	r23, 0x03	; 3
     2ec:	0e 94 42 08 	call	0x1084	; 0x1084 <__divmodhi4>
     2f0:	08 2f       	mov	r16, r24
     2f2:	c9 2f       	mov	r28, r25
     2f4:	cb 01       	movw	r24, r22
     2f6:	0e 94 ab 00 	call	0x156	; 0x156 <showSegmentSmall>
     2fa:	81 eb       	ldi	r24, 0xB1	; 177
     2fc:	9c e0       	ldi	r25, 0x0C	; 12
     2fe:	01 97       	sbiw	r24, 0x01	; 1
     300:	f1 f7       	brne	.-4      	; 0x2fe <displayTopSmallRowNumber+0x88>
     302:	00 c0       	rjmp	.+0      	; 0x304 <displayTopSmallRowNumber+0x8e>
     304:	00 00       	nop
		_delay_ms(SEGMENT_DELAY);
		PORTD=SD_empty;
     306:	8f ef       	ldi	r24, 0xFF	; 255
     308:	82 bb       	out	0x12, r24	; 18
		PORTC = 0xFF;
     30a:	85 bb       	out	0x15, r24	; 21
		numb=numb%1000;
     30c:	80 2f       	mov	r24, r16
     30e:	9c 2f       	mov	r25, r28
	}
	
	
	showSegmentSmall(numb/100);
     310:	64 e6       	ldi	r22, 0x64	; 100
     312:	70 e0       	ldi	r23, 0x00	; 0
     314:	0e 94 42 08 	call	0x1084	; 0x1084 <__divmodhi4>
     318:	8c 01       	movw	r16, r24
     31a:	cb 01       	movw	r24, r22
     31c:	0e 94 ab 00 	call	0x156	; 0x156 <showSegmentSmall>
	PORTC = 0b01111111;   //1x2
     320:	8f e7       	ldi	r24, 0x7F	; 127
     322:	85 bb       	out	0x15, r24	; 21
     324:	e1 eb       	ldi	r30, 0xB1	; 177
     326:	fc e0       	ldi	r31, 0x0C	; 12
     328:	31 97       	sbiw	r30, 0x01	; 1
     32a:	f1 f7       	brne	.-4      	; 0x328 <displayTopSmallRowNumber+0xb2>
     32c:	00 c0       	rjmp	.+0      	; 0x32e <displayTopSmallRowNumber+0xb8>
     32e:	00 00       	nop
	numb=numb%100;
	_delay_ms(SEGMENT_DELAY);
	PORTD=SD_empty;
     330:	cf ef       	ldi	r28, 0xFF	; 255
     332:	c2 bb       	out	0x12, r28	; 18
	
	showSegmentSmall(numb/10);
     334:	c8 01       	movw	r24, r16
     336:	6a e0       	ldi	r22, 0x0A	; 10
     338:	70 e0       	ldi	r23, 0x00	; 0
     33a:	0e 94 42 08 	call	0x1084	; 0x1084 <__divmodhi4>
     33e:	8c 01       	movw	r16, r24
     340:	cb 01       	movw	r24, r22
     342:	0e 94 ab 00 	call	0x156	; 0x156 <showSegmentSmall>
	PORTC = 0b11111011;  //1x3
     346:	8b ef       	ldi	r24, 0xFB	; 251
     348:	85 bb       	out	0x15, r24	; 21
     34a:	81 eb       	ldi	r24, 0xB1	; 177
     34c:	9c e0       	ldi	r25, 0x0C	; 12
     34e:	01 97       	sbiw	r24, 0x01	; 1
     350:	f1 f7       	brne	.-4      	; 0x34e <displayTopSmallRowNumber+0xd8>
     352:	00 c0       	rjmp	.+0      	; 0x354 <displayTopSmallRowNumber+0xde>
     354:	00 00       	nop
	numb=numb%10;
	_delay_ms(SEGMENT_DELAY);
	PORTD=SD_empty;
     356:	c2 bb       	out	0x12, r28	; 18
	showSegmentSmall(numb/1);
     358:	c8 01       	movw	r24, r16
     35a:	0e 94 ab 00 	call	0x156	; 0x156 <showSegmentSmall>
	
	PORTC = 0b10111111; //1x4
     35e:	8f eb       	ldi	r24, 0xBF	; 191
     360:	85 bb       	out	0x15, r24	; 21
     362:	e1 eb       	ldi	r30, 0xB1	; 177
     364:	fc e0       	ldi	r31, 0x0C	; 12
     366:	31 97       	sbiw	r30, 0x01	; 1
     368:	f1 f7       	brne	.-4      	; 0x366 <displayTopSmallRowNumber+0xf0>
     36a:	00 c0       	rjmp	.+0      	; 0x36c <displayTopSmallRowNumber+0xf6>
     36c:	00 00       	nop
	_delay_ms(SEGMENT_DELAY);
	PORTD=SD_empty;
     36e:	c2 bb       	out	0x12, r28	; 18
	blinked++;
     370:	80 91 13 01 	lds	r24, 0x0113
     374:	90 91 14 01 	lds	r25, 0x0114
     378:	01 96       	adiw	r24, 0x01	; 1
     37a:	90 93 14 01 	sts	0x0114, r25
     37e:	80 93 13 01 	sts	0x0113, r24
 }
     382:	cf 91       	pop	r28
     384:	1f 91       	pop	r17
     386:	0f 91       	pop	r16
     388:	08 95       	ret

0000038a <displayBottomSmallRowNumber>:
void displayBottomSmallRowNumber(int numb)
{
     38a:	0f 93       	push	r16
     38c:	1f 93       	push	r17
     38e:	cf 93       	push	r28
	if(blink)
     390:	20 91 00 01 	lds	r18, 0x0100
     394:	22 23       	and	r18, r18
     396:	f9 f0       	breq	.+62     	; 0x3d6 <displayBottomSmallRowNumber+0x4c>
	{
		if(blinked>BLINK_COUNT*2)
     398:	20 91 13 01 	lds	r18, 0x0113
     39c:	30 91 14 01 	lds	r19, 0x0114
     3a0:	21 35       	cpi	r18, 0x51	; 81
     3a2:	31 05       	cpc	r19, r1
     3a4:	c4 f0       	brlt	.+48     	; 0x3d6 <displayBottomSmallRowNumber+0x4c>
		{
			PORTD = SD_empty;
     3a6:	8f ef       	ldi	r24, 0xFF	; 255
     3a8:	82 bb       	out	0x12, r24	; 18
			if (blinked>BLINK_COUNT)
     3aa:	80 91 13 01 	lds	r24, 0x0113
     3ae:	90 91 14 01 	lds	r25, 0x0114
     3b2:	89 32       	cpi	r24, 0x29	; 41
     3b4:	91 05       	cpc	r25, r1
     3b6:	2c f0       	brlt	.+10     	; 0x3c2 <displayBottomSmallRowNumber+0x38>
			{
				blinked=0;
     3b8:	10 92 14 01 	sts	0x0114, r1
     3bc:	10 92 13 01 	sts	0x0113, r1
				return;
     3c0:	6b c0       	rjmp	.+214    	; 0x498 <displayBottomSmallRowNumber+0x10e>
			}
			blinked++;
     3c2:	80 91 13 01 	lds	r24, 0x0113
     3c6:	90 91 14 01 	lds	r25, 0x0114
     3ca:	01 96       	adiw	r24, 0x01	; 1
     3cc:	90 93 14 01 	sts	0x0114, r25
     3d0:	80 93 13 01 	sts	0x0113, r24
			return;
     3d4:	61 c0       	rjmp	.+194    	; 0x498 <displayBottomSmallRowNumber+0x10e>
		}
		
	}
	
	
	if(numb<0)
     3d6:	99 23       	and	r25, r25
     3d8:	84 f4       	brge	.+32     	; 0x3fa <displayBottomSmallRowNumber+0x70>
	{
		PORTC = 0b11111101; //1x1
     3da:	2d ef       	ldi	r18, 0xFD	; 253
     3dc:	25 bb       	out	0x15, r18	; 21
		PORTD = SD_minus;
     3de:	27 ef       	ldi	r18, 0xF7	; 247
     3e0:	22 bb       	out	0x12, r18	; 18
     3e2:	e1 eb       	ldi	r30, 0xB1	; 177
     3e4:	fc e0       	ldi	r31, 0x0C	; 12
     3e6:	31 97       	sbiw	r30, 0x01	; 1
     3e8:	f1 f7       	brne	.-4      	; 0x3e6 <displayBottomSmallRowNumber+0x5c>
     3ea:	00 c0       	rjmp	.+0      	; 0x3ec <displayBottomSmallRowNumber+0x62>
     3ec:	00 00       	nop
		_delay_ms(SEGMENT_DELAY);
		PORTD=SD_empty;
     3ee:	2f ef       	ldi	r18, 0xFF	; 255
     3f0:	22 bb       	out	0x12, r18	; 18
		numb=numb*-1;
     3f2:	90 95       	com	r25
     3f4:	81 95       	neg	r24
     3f6:	9f 4f       	sbci	r25, 0xFF	; 255
     3f8:	15 c0       	rjmp	.+42     	; 0x424 <displayBottomSmallRowNumber+0x9a>
	}
	else
	{
		PORTC = 0b11111101; //2x1
     3fa:	2d ef       	ldi	r18, 0xFD	; 253
     3fc:	25 bb       	out	0x15, r18	; 21
		showSegmentSmall(numb/1000);
     3fe:	68 ee       	ldi	r22, 0xE8	; 232
     400:	73 e0       	ldi	r23, 0x03	; 3
     402:	0e 94 42 08 	call	0x1084	; 0x1084 <__divmodhi4>
     406:	08 2f       	mov	r16, r24
     408:	c9 2f       	mov	r28, r25
     40a:	cb 01       	movw	r24, r22
     40c:	0e 94 ab 00 	call	0x156	; 0x156 <showSegmentSmall>
     410:	81 eb       	ldi	r24, 0xB1	; 177
     412:	9c e0       	ldi	r25, 0x0C	; 12
     414:	01 97       	sbiw	r24, 0x01	; 1
     416:	f1 f7       	brne	.-4      	; 0x414 <displayBottomSmallRowNumber+0x8a>
     418:	00 c0       	rjmp	.+0      	; 0x41a <displayBottomSmallRowNumber+0x90>
     41a:	00 00       	nop
		_delay_ms(SEGMENT_DELAY);
		PORTD=SD_empty;
     41c:	8f ef       	ldi	r24, 0xFF	; 255
     41e:	82 bb       	out	0x12, r24	; 18
		numb=numb%1000;
     420:	80 2f       	mov	r24, r16
     422:	9c 2f       	mov	r25, r28
	}
	
	
	showSegmentSmall(numb/100);
     424:	64 e6       	ldi	r22, 0x64	; 100
     426:	70 e0       	ldi	r23, 0x00	; 0
     428:	0e 94 42 08 	call	0x1084	; 0x1084 <__divmodhi4>
     42c:	8c 01       	movw	r16, r24
     42e:	cb 01       	movw	r24, r22
     430:	0e 94 ab 00 	call	0x156	; 0x156 <showSegmentSmall>
	PORTC = 0b11011111;   //2x2
     434:	8f ed       	ldi	r24, 0xDF	; 223
     436:	85 bb       	out	0x15, r24	; 21
     438:	e1 eb       	ldi	r30, 0xB1	; 177
     43a:	fc e0       	ldi	r31, 0x0C	; 12
     43c:	31 97       	sbiw	r30, 0x01	; 1
     43e:	f1 f7       	brne	.-4      	; 0x43c <displayBottomSmallRowNumber+0xb2>
     440:	00 c0       	rjmp	.+0      	; 0x442 <displayBottomSmallRowNumber+0xb8>
     442:	00 00       	nop
	numb=numb%100;
	_delay_ms(SEGMENT_DELAY);
	PORTD=SD_empty;
     444:	cf ef       	ldi	r28, 0xFF	; 255
     446:	c2 bb       	out	0x12, r28	; 18
	
	showSegmentSmall(numb/10);
     448:	c8 01       	movw	r24, r16
     44a:	6a e0       	ldi	r22, 0x0A	; 10
     44c:	70 e0       	ldi	r23, 0x00	; 0
     44e:	0e 94 42 08 	call	0x1084	; 0x1084 <__divmodhi4>
     452:	8c 01       	movw	r16, r24
     454:	cb 01       	movw	r24, r22
     456:	0e 94 ab 00 	call	0x156	; 0x156 <showSegmentSmall>
	PORTC = 0b11111110;  //2x3
     45a:	8e ef       	ldi	r24, 0xFE	; 254
     45c:	85 bb       	out	0x15, r24	; 21
     45e:	81 eb       	ldi	r24, 0xB1	; 177
     460:	9c e0       	ldi	r25, 0x0C	; 12
     462:	01 97       	sbiw	r24, 0x01	; 1
     464:	f1 f7       	brne	.-4      	; 0x462 <displayBottomSmallRowNumber+0xd8>
     466:	00 c0       	rjmp	.+0      	; 0x468 <displayBottomSmallRowNumber+0xde>
     468:	00 00       	nop
	numb=numb%10;
	_delay_ms(SEGMENT_DELAY);
	PORTD=SD_empty;
     46a:	c2 bb       	out	0x12, r28	; 18
	
	showSegmentSmall(numb/1);
     46c:	c8 01       	movw	r24, r16
     46e:	0e 94 ab 00 	call	0x156	; 0x156 <showSegmentSmall>
	PORTC = 0b11101111; //2x4
     472:	8f ee       	ldi	r24, 0xEF	; 239
     474:	85 bb       	out	0x15, r24	; 21
     476:	e1 eb       	ldi	r30, 0xB1	; 177
     478:	fc e0       	ldi	r31, 0x0C	; 12
     47a:	31 97       	sbiw	r30, 0x01	; 1
     47c:	f1 f7       	brne	.-4      	; 0x47a <displayBottomSmallRowNumber+0xf0>
     47e:	00 c0       	rjmp	.+0      	; 0x480 <displayBottomSmallRowNumber+0xf6>
     480:	00 00       	nop
	_delay_ms(SEGMENT_DELAY);
	PORTD=SD_empty;
     482:	c2 bb       	out	0x12, r28	; 18
	PORTC = 0xFF;
     484:	c5 bb       	out	0x15, r28	; 21
	blinked++;
     486:	80 91 13 01 	lds	r24, 0x0113
     48a:	90 91 14 01 	lds	r25, 0x0114
     48e:	01 96       	adiw	r24, 0x01	; 1
     490:	90 93 14 01 	sts	0x0114, r25
     494:	80 93 13 01 	sts	0x0113, r24
}
     498:	cf 91       	pop	r28
     49a:	1f 91       	pop	r17
     49c:	0f 91       	pop	r16
     49e:	08 95       	ret

000004a0 <displayBigMidlleRowNumber>:
void displayBigMidlleRowNumber(int numb)
{
     4a0:	cf 93       	push	r28
     4a2:	df 93       	push	r29
	if(blink)
     4a4:	20 91 00 01 	lds	r18, 0x0100
     4a8:	22 23       	and	r18, r18
     4aa:	f9 f0       	breq	.+62     	; 0x4ea <displayBigMidlleRowNumber+0x4a>
	{
		if(blinked>BLINK_COUNT*2)
     4ac:	20 91 13 01 	lds	r18, 0x0113
     4b0:	30 91 14 01 	lds	r19, 0x0114
     4b4:	21 35       	cpi	r18, 0x51	; 81
     4b6:	31 05       	cpc	r19, r1
     4b8:	c4 f0       	brlt	.+48     	; 0x4ea <displayBigMidlleRowNumber+0x4a>
		{
			PORTD = SD_empty;
     4ba:	8f ef       	ldi	r24, 0xFF	; 255
     4bc:	82 bb       	out	0x12, r24	; 18
			if (blinked>BLINK_COUNT)
     4be:	80 91 13 01 	lds	r24, 0x0113
     4c2:	90 91 14 01 	lds	r25, 0x0114
     4c6:	89 32       	cpi	r24, 0x29	; 41
     4c8:	91 05       	cpc	r25, r1
     4ca:	2c f0       	brlt	.+10     	; 0x4d6 <displayBigMidlleRowNumber+0x36>
			{
				blinked=0;
     4cc:	10 92 14 01 	sts	0x0114, r1
     4d0:	10 92 13 01 	sts	0x0113, r1
				return;
     4d4:	43 c0       	rjmp	.+134    	; 0x55c <displayBigMidlleRowNumber+0xbc>
			}
			blinked++;
     4d6:	80 91 13 01 	lds	r24, 0x0113
     4da:	90 91 14 01 	lds	r25, 0x0114
     4de:	01 96       	adiw	r24, 0x01	; 1
     4e0:	90 93 14 01 	sts	0x0114, r25
     4e4:	80 93 13 01 	sts	0x0113, r24
			return;
     4e8:	39 c0       	rjmp	.+114    	; 0x55c <displayBigMidlleRowNumber+0xbc>
		}
	}
	
	if(numb<0)
     4ea:	99 23       	and	r25, r25
     4ec:	7c f4       	brge	.+30     	; 0x50c <displayBigMidlleRowNumber+0x6c>
	{
		PORTB = 0b10000000; //1x1
     4ee:	20 e8       	ldi	r18, 0x80	; 128
     4f0:	28 bb       	out	0x18, r18	; 24
		PORTA = BD_minus;
     4f2:	21 e0       	ldi	r18, 0x01	; 1
     4f4:	2b bb       	out	0x1b, r18	; 27
     4f6:	e1 eb       	ldi	r30, 0xB1	; 177
     4f8:	fc e0       	ldi	r31, 0x0C	; 12
     4fa:	31 97       	sbiw	r30, 0x01	; 1
     4fc:	f1 f7       	brne	.-4      	; 0x4fa <displayBigMidlleRowNumber+0x5a>
     4fe:	00 c0       	rjmp	.+0      	; 0x500 <displayBigMidlleRowNumber+0x60>
     500:	00 00       	nop
		_delay_ms(SEGMENT_DELAY);
		PORTA=BD_empty;
     502:	1b ba       	out	0x1b, r1	; 27
		numb=numb*-1;
     504:	90 95       	com	r25
     506:	81 95       	neg	r24
     508:	9f 4f       	sbci	r25, 0xFF	; 255
     50a:	14 c0       	rjmp	.+40     	; 0x534 <displayBigMidlleRowNumber+0x94>
	}
	else
	{
		PORTB = 0b10000000; //1x1
     50c:	20 e8       	ldi	r18, 0x80	; 128
     50e:	28 bb       	out	0x18, r18	; 24
		showSegmentBig(numb/10);
     510:	6a e0       	ldi	r22, 0x0A	; 10
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	0e 94 42 08 	call	0x1084	; 0x1084 <__divmodhi4>
     518:	d8 2f       	mov	r29, r24
     51a:	c9 2f       	mov	r28, r25
     51c:	cb 01       	movw	r24, r22
     51e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <showSegmentBig>
     522:	81 eb       	ldi	r24, 0xB1	; 177
     524:	9c e0       	ldi	r25, 0x0C	; 12
     526:	01 97       	sbiw	r24, 0x01	; 1
     528:	f1 f7       	brne	.-4      	; 0x526 <displayBigMidlleRowNumber+0x86>
     52a:	00 c0       	rjmp	.+0      	; 0x52c <displayBigMidlleRowNumber+0x8c>
     52c:	00 00       	nop
		_delay_ms(SEGMENT_DELAY);
		PORTA=BD_empty;
     52e:	1b ba       	out	0x1b, r1	; 27
		numb=numb%10;
     530:	8d 2f       	mov	r24, r29
     532:	9c 2f       	mov	r25, r28
	}
	
	PORTB = 0b00001000;   //1x2
     534:	28 e0       	ldi	r18, 0x08	; 8
     536:	28 bb       	out	0x18, r18	; 24
	showSegmentBig(numb/1);
     538:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <showSegmentBig>
     53c:	e1 eb       	ldi	r30, 0xB1	; 177
     53e:	fc e0       	ldi	r31, 0x0C	; 12
     540:	31 97       	sbiw	r30, 0x01	; 1
     542:	f1 f7       	brne	.-4      	; 0x540 <displayBigMidlleRowNumber+0xa0>
     544:	00 c0       	rjmp	.+0      	; 0x546 <displayBigMidlleRowNumber+0xa6>
     546:	00 00       	nop
	_delay_ms(SEGMENT_DELAY);
	PORTA=BD_empty;
     548:	1b ba       	out	0x1b, r1	; 27
	//showSegmentBig(numb/1);
	//
	//PORTB = 0b10111111; //1x4
	//_delay_ms(SEGMENT_DELAY);
	//PORTA=SD_empty;
	blinked++;
     54a:	80 91 13 01 	lds	r24, 0x0113
     54e:	90 91 14 01 	lds	r25, 0x0114
     552:	01 96       	adiw	r24, 0x01	; 1
     554:	90 93 14 01 	sts	0x0114, r25
     558:	80 93 13 01 	sts	0x0113, r24
}
     55c:	df 91       	pop	r29
     55e:	cf 91       	pop	r28
     560:	08 95       	ret

00000562 <displayBigTopRowNumber>:
void displayBigTopRowNumber(int numb)
{
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
		if(blink)
     566:	20 91 00 01 	lds	r18, 0x0100
     56a:	22 23       	and	r18, r18
     56c:	f9 f0       	breq	.+62     	; 0x5ac <displayBigTopRowNumber+0x4a>
		{
			if(blinked>BLINK_COUNT*2)
     56e:	20 91 13 01 	lds	r18, 0x0113
     572:	30 91 14 01 	lds	r19, 0x0114
     576:	21 35       	cpi	r18, 0x51	; 81
     578:	31 05       	cpc	r19, r1
     57a:	c4 f0       	brlt	.+48     	; 0x5ac <displayBigTopRowNumber+0x4a>
			{
				PORTD = SD_empty;
     57c:	8f ef       	ldi	r24, 0xFF	; 255
     57e:	82 bb       	out	0x12, r24	; 18
				if (blinked>BLINK_COUNT)
     580:	80 91 13 01 	lds	r24, 0x0113
     584:	90 91 14 01 	lds	r25, 0x0114
     588:	89 32       	cpi	r24, 0x29	; 41
     58a:	91 05       	cpc	r25, r1
     58c:	2c f0       	brlt	.+10     	; 0x598 <displayBigTopRowNumber+0x36>
				{
					blinked=0;
     58e:	10 92 14 01 	sts	0x0114, r1
     592:	10 92 13 01 	sts	0x0113, r1
					return;
     596:	59 c0       	rjmp	.+178    	; 0x64a <displayBigTopRowNumber+0xe8>
				}
				blinked++;
     598:	80 91 13 01 	lds	r24, 0x0113
     59c:	90 91 14 01 	lds	r25, 0x0114
     5a0:	01 96       	adiw	r24, 0x01	; 1
     5a2:	90 93 14 01 	sts	0x0114, r25
     5a6:	80 93 13 01 	sts	0x0113, r24
				return;
     5aa:	4f c0       	rjmp	.+158    	; 0x64a <displayBigTopRowNumber+0xe8>
			}
		}
		
		if(numb<0)
     5ac:	99 23       	and	r25, r25
     5ae:	84 f4       	brge	.+32     	; 0x5d0 <displayBigTopRowNumber+0x6e>
		{
			PORTB = 0b01000000; //1x1
     5b0:	20 e4       	ldi	r18, 0x40	; 64
     5b2:	28 bb       	out	0x18, r18	; 24
			PORTA = BD_minus;
     5b4:	21 e0       	ldi	r18, 0x01	; 1
     5b6:	2b bb       	out	0x1b, r18	; 27
			PORTA|=BD_dot;
     5b8:	dc 9a       	sbi	0x1b, 4	; 27
     5ba:	e1 eb       	ldi	r30, 0xB1	; 177
     5bc:	fc e0       	ldi	r31, 0x0C	; 12
     5be:	31 97       	sbiw	r30, 0x01	; 1
     5c0:	f1 f7       	brne	.-4      	; 0x5be <displayBigTopRowNumber+0x5c>
     5c2:	00 c0       	rjmp	.+0      	; 0x5c4 <displayBigTopRowNumber+0x62>
     5c4:	00 00       	nop
			_delay_ms(SEGMENT_DELAY);
			PORTA=BD_empty;
     5c6:	1b ba       	out	0x1b, r1	; 27
			numb=numb*-1;
     5c8:	90 95       	com	r25
     5ca:	81 95       	neg	r24
     5cc:	9f 4f       	sbci	r25, 0xFF	; 255
     5ce:	15 c0       	rjmp	.+42     	; 0x5fa <displayBigTopRowNumber+0x98>
		}
		else
		{
			PORTB = 0b01000000; //1x1
     5d0:	20 e4       	ldi	r18, 0x40	; 64
     5d2:	28 bb       	out	0x18, r18	; 24
			showSegmentBig(numb/100);
     5d4:	64 e6       	ldi	r22, 0x64	; 100
     5d6:	70 e0       	ldi	r23, 0x00	; 0
     5d8:	0e 94 42 08 	call	0x1084	; 0x1084 <__divmodhi4>
     5dc:	d8 2f       	mov	r29, r24
     5de:	c9 2f       	mov	r28, r25
     5e0:	cb 01       	movw	r24, r22
     5e2:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <showSegmentBig>
			PORTA|=BD_dot;
     5e6:	dc 9a       	sbi	0x1b, 4	; 27
     5e8:	81 eb       	ldi	r24, 0xB1	; 177
     5ea:	9c e0       	ldi	r25, 0x0C	; 12
     5ec:	01 97       	sbiw	r24, 0x01	; 1
     5ee:	f1 f7       	brne	.-4      	; 0x5ec <displayBigTopRowNumber+0x8a>
     5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <displayBigTopRowNumber+0x90>
     5f2:	00 00       	nop
			_delay_ms(SEGMENT_DELAY);
			PORTA=BD_empty;
     5f4:	1b ba       	out	0x1b, r1	; 27
			numb=numb%100;
     5f6:	8d 2f       	mov	r24, r29
     5f8:	9c 2f       	mov	r25, r28
		}
		
		PORTB = 0b00000100;   //1x2
     5fa:	24 e0       	ldi	r18, 0x04	; 4
     5fc:	28 bb       	out	0x18, r18	; 24
		showSegmentBig(numb/10);
     5fe:	6a e0       	ldi	r22, 0x0A	; 10
     600:	70 e0       	ldi	r23, 0x00	; 0
     602:	0e 94 42 08 	call	0x1084	; 0x1084 <__divmodhi4>
     606:	ec 01       	movw	r28, r24
     608:	cb 01       	movw	r24, r22
     60a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <showSegmentBig>
     60e:	e1 eb       	ldi	r30, 0xB1	; 177
     610:	fc e0       	ldi	r31, 0x0C	; 12
     612:	31 97       	sbiw	r30, 0x01	; 1
     614:	f1 f7       	brne	.-4      	; 0x612 <displayBigTopRowNumber+0xb0>
     616:	00 c0       	rjmp	.+0      	; 0x618 <displayBigTopRowNumber+0xb6>
     618:	00 00       	nop
		_delay_ms(SEGMENT_DELAY);
		PORTA=BD_empty;
     61a:	1b ba       	out	0x1b, r1	; 27
		numb=numb%10;
		
		showSegmentBig(numb/1);
     61c:	ce 01       	movw	r24, r28
     61e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <showSegmentBig>
		PORTB = 0b00100000;  //1x3
     622:	80 e2       	ldi	r24, 0x20	; 32
     624:	88 bb       	out	0x18, r24	; 24
     626:	81 eb       	ldi	r24, 0xB1	; 177
     628:	9c e0       	ldi	r25, 0x0C	; 12
     62a:	01 97       	sbiw	r24, 0x01	; 1
     62c:	f1 f7       	brne	.-4      	; 0x62a <displayBigTopRowNumber+0xc8>
     62e:	00 c0       	rjmp	.+0      	; 0x630 <displayBigTopRowNumber+0xce>
     630:	00 00       	nop
		_delay_ms(SEGMENT_DELAY);
		PORTA=SD_empty;
     632:	8f ef       	ldi	r24, 0xFF	; 255
     634:	8b bb       	out	0x1b, r24	; 27
		PORTB=0x00;
     636:	18 ba       	out	0x18, r1	; 24
		blinked++;
     638:	80 91 13 01 	lds	r24, 0x0113
     63c:	90 91 14 01 	lds	r25, 0x0114
     640:	01 96       	adiw	r24, 0x01	; 1
     642:	90 93 14 01 	sts	0x0114, r25
     646:	80 93 13 01 	sts	0x0113, r24
}
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	08 95       	ret

00000650 <displayBigBottomRowNumber>:
void displayBigBottomRowNumber(int numb)
{
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
	if(blink)
     654:	20 91 00 01 	lds	r18, 0x0100
     658:	22 23       	and	r18, r18
     65a:	f9 f0       	breq	.+62     	; 0x69a <displayBigBottomRowNumber+0x4a>
	{
		if(blinked>BLINK_COUNT*2)
     65c:	20 91 13 01 	lds	r18, 0x0113
     660:	30 91 14 01 	lds	r19, 0x0114
     664:	21 35       	cpi	r18, 0x51	; 81
     666:	31 05       	cpc	r19, r1
     668:	c4 f0       	brlt	.+48     	; 0x69a <displayBigBottomRowNumber+0x4a>
		{
			PORTD = SD_empty;
     66a:	8f ef       	ldi	r24, 0xFF	; 255
     66c:	82 bb       	out	0x12, r24	; 18
			if (blinked>BLINK_COUNT)
     66e:	80 91 13 01 	lds	r24, 0x0113
     672:	90 91 14 01 	lds	r25, 0x0114
     676:	89 32       	cpi	r24, 0x29	; 41
     678:	91 05       	cpc	r25, r1
     67a:	2c f0       	brlt	.+10     	; 0x686 <displayBigBottomRowNumber+0x36>
			{
				blinked=0;
     67c:	10 92 14 01 	sts	0x0114, r1
     680:	10 92 13 01 	sts	0x0113, r1
				return;
     684:	57 c0       	rjmp	.+174    	; 0x734 <displayBigBottomRowNumber+0xe4>
			}
			blinked++;
     686:	80 91 13 01 	lds	r24, 0x0113
     68a:	90 91 14 01 	lds	r25, 0x0114
     68e:	01 96       	adiw	r24, 0x01	; 1
     690:	90 93 14 01 	sts	0x0114, r25
     694:	80 93 13 01 	sts	0x0113, r24
			return;
     698:	4d c0       	rjmp	.+154    	; 0x734 <displayBigBottomRowNumber+0xe4>
		}
	}
	
	if(numb<0)
     69a:	99 23       	and	r25, r25
     69c:	7c f4       	brge	.+30     	; 0x6bc <displayBigBottomRowNumber+0x6c>
	{
		PORTB = 0b00000010; //1x1
     69e:	22 e0       	ldi	r18, 0x02	; 2
     6a0:	28 bb       	out	0x18, r18	; 24
		PORTA = BD_minus;
     6a2:	21 e0       	ldi	r18, 0x01	; 1
     6a4:	2b bb       	out	0x1b, r18	; 27
     6a6:	e1 eb       	ldi	r30, 0xB1	; 177
     6a8:	fc e0       	ldi	r31, 0x0C	; 12
     6aa:	31 97       	sbiw	r30, 0x01	; 1
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <displayBigBottomRowNumber+0x5a>
     6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <displayBigBottomRowNumber+0x60>
     6b0:	00 00       	nop
		_delay_ms(SEGMENT_DELAY);
		PORTA=BD_empty;
     6b2:	1b ba       	out	0x1b, r1	; 27
		numb=numb*-1;
     6b4:	90 95       	com	r25
     6b6:	81 95       	neg	r24
     6b8:	9f 4f       	sbci	r25, 0xFF	; 255
     6ba:	14 c0       	rjmp	.+40     	; 0x6e4 <displayBigBottomRowNumber+0x94>
	}
	else
	{
		PORTB = 0b00000010; //1x1
     6bc:	22 e0       	ldi	r18, 0x02	; 2
     6be:	28 bb       	out	0x18, r18	; 24
		showSegmentBig(numb/100);
     6c0:	64 e6       	ldi	r22, 0x64	; 100
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	0e 94 42 08 	call	0x1084	; 0x1084 <__divmodhi4>
     6c8:	d8 2f       	mov	r29, r24
     6ca:	c9 2f       	mov	r28, r25
     6cc:	cb 01       	movw	r24, r22
     6ce:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <showSegmentBig>
     6d2:	81 eb       	ldi	r24, 0xB1	; 177
     6d4:	9c e0       	ldi	r25, 0x0C	; 12
     6d6:	01 97       	sbiw	r24, 0x01	; 1
     6d8:	f1 f7       	brne	.-4      	; 0x6d6 <displayBigBottomRowNumber+0x86>
     6da:	00 c0       	rjmp	.+0      	; 0x6dc <displayBigBottomRowNumber+0x8c>
     6dc:	00 00       	nop
		_delay_ms(SEGMENT_DELAY);
		PORTA=BD_empty;
     6de:	1b ba       	out	0x1b, r1	; 27
		numb=numb%100;
     6e0:	8d 2f       	mov	r24, r29
     6e2:	9c 2f       	mov	r25, r28
	}
	
	PORTB = 0b00010000;   //1x2
     6e4:	20 e1       	ldi	r18, 0x10	; 16
     6e6:	28 bb       	out	0x18, r18	; 24
	showSegmentBig(numb/10);
     6e8:	6a e0       	ldi	r22, 0x0A	; 10
     6ea:	70 e0       	ldi	r23, 0x00	; 0
     6ec:	0e 94 42 08 	call	0x1084	; 0x1084 <__divmodhi4>
     6f0:	ec 01       	movw	r28, r24
     6f2:	cb 01       	movw	r24, r22
     6f4:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <showSegmentBig>
     6f8:	e1 eb       	ldi	r30, 0xB1	; 177
     6fa:	fc e0       	ldi	r31, 0x0C	; 12
     6fc:	31 97       	sbiw	r30, 0x01	; 1
     6fe:	f1 f7       	brne	.-4      	; 0x6fc <displayBigBottomRowNumber+0xac>
     700:	00 c0       	rjmp	.+0      	; 0x702 <displayBigBottomRowNumber+0xb2>
     702:	00 00       	nop
	_delay_ms(SEGMENT_DELAY);
	PORTA=BD_empty;
     704:	1b ba       	out	0x1b, r1	; 27
	numb=numb%10;
	
	showSegmentBig(numb/1);
     706:	ce 01       	movw	r24, r28
     708:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <showSegmentBig>
	PORTB = 0b00000001;  //1x3
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	88 bb       	out	0x18, r24	; 24
     710:	81 eb       	ldi	r24, 0xB1	; 177
     712:	9c e0       	ldi	r25, 0x0C	; 12
     714:	01 97       	sbiw	r24, 0x01	; 1
     716:	f1 f7       	brne	.-4      	; 0x714 <displayBigBottomRowNumber+0xc4>
     718:	00 c0       	rjmp	.+0      	; 0x71a <displayBigBottomRowNumber+0xca>
     71a:	00 00       	nop
	_delay_ms(SEGMENT_DELAY);
	PORTA=SD_empty;
     71c:	8f ef       	ldi	r24, 0xFF	; 255
     71e:	8b bb       	out	0x1b, r24	; 27
	PORTB=0x00;
     720:	18 ba       	out	0x18, r1	; 24
	blinked++;
     722:	80 91 13 01 	lds	r24, 0x0113
     726:	90 91 14 01 	lds	r25, 0x0114
     72a:	01 96       	adiw	r24, 0x01	; 1
     72c:	90 93 14 01 	sts	0x0114, r25
     730:	80 93 13 01 	sts	0x0113, r24
}
     734:	df 91       	pop	r29
     736:	cf 91       	pop	r28
     738:	08 95       	ret

0000073a <displayAllNumbers>:
void displayAllNumbers()
{
     73a:	0f 93       	push	r16
     73c:	1f 93       	push	r17
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
	SmallTopNumberCopy = SmallTopNumber;
     742:	80 91 0b 01 	lds	r24, 0x010B
     746:	90 91 0c 01 	lds	r25, 0x010C
     74a:	90 93 10 01 	sts	0x0110, r25
     74e:	80 93 0f 01 	sts	0x010F, r24
	SmallBottomNumberCopy = SmallBottomNumber;
     752:	20 91 09 01 	lds	r18, 0x0109
     756:	30 91 0a 01 	lds	r19, 0x010A
     75a:	30 93 0e 01 	sts	0x010E, r19
     75e:	20 93 0d 01 	sts	0x010D, r18
	BigMiddleNumberCopy = BigMiddleNumber;
     762:	20 91 07 01 	lds	r18, 0x0107
     766:	30 91 08 01 	lds	r19, 0x0108
     76a:	30 93 12 01 	sts	0x0112, r19
     76e:	20 93 11 01 	sts	0x0111, r18
	BigTopNumberCopy = BigTopNumber;
     772:	20 91 05 01 	lds	r18, 0x0105
     776:	30 91 06 01 	lds	r19, 0x0106
     77a:	30 93 18 01 	sts	0x0118, r19
     77e:	20 93 17 01 	sts	0x0117, r18
	BigBottomNumberCopy = BigBottomNumber;
     782:	20 91 03 01 	lds	r18, 0x0103
     786:	30 91 04 01 	lds	r19, 0x0104
     78a:	30 93 16 01 	sts	0x0116, r19
     78e:	20 93 15 01 	sts	0x0115, r18
	
//-------------1St Pair----------------
	if(SmallTopNumberCopy<0)
     792:	99 23       	and	r25, r25
     794:	7c f4       	brge	.+30     	; 0x7b4 <displayAllNumbers+0x7a>
	{
		PORTC = 0b11110111; //1x1
     796:	87 ef       	ldi	r24, 0xF7	; 247
     798:	85 bb       	out	0x15, r24	; 21
		PORTD = SD_minus;
     79a:	82 bb       	out	0x12, r24	; 18
		SmallTopNumberCopy=SmallTopNumberCopy*-1;
     79c:	80 91 0f 01 	lds	r24, 0x010F
     7a0:	90 91 10 01 	lds	r25, 0x0110
     7a4:	90 95       	com	r25
     7a6:	81 95       	neg	r24
     7a8:	9f 4f       	sbci	r25, 0xFF	; 255
     7aa:	90 93 10 01 	sts	0x0110, r25
     7ae:	80 93 0f 01 	sts	0x010F, r24
     7b2:	19 c0       	rjmp	.+50     	; 0x7e6 <displayAllNumbers+0xac>
	}
	else
	{
		PORTC = 0b11110111; //1x1
     7b4:	87 ef       	ldi	r24, 0xF7	; 247
     7b6:	85 bb       	out	0x15, r24	; 21
		showSegmentSmall(SmallTopNumberCopy/1000);
     7b8:	80 91 0f 01 	lds	r24, 0x010F
     7bc:	90 91 10 01 	lds	r25, 0x0110
     7c0:	c8 ee       	ldi	r28, 0xE8	; 232
     7c2:	d3 e0       	ldi	r29, 0x03	; 3
     7c4:	be 01       	movw	r22, r28
     7c6:	0e 94 42 08 	call	0x1084	; 0x1084 <__divmodhi4>
     7ca:	cb 01       	movw	r24, r22
     7cc:	0e 94 ab 00 	call	0x156	; 0x156 <showSegmentSmall>
		SmallTopNumberCopy=SmallTopNumberCopy%1000;
     7d0:	80 91 0f 01 	lds	r24, 0x010F
     7d4:	90 91 10 01 	lds	r25, 0x0110
     7d8:	be 01       	movw	r22, r28
     7da:	0e 94 42 08 	call	0x1084	; 0x1084 <__divmodhi4>
     7de:	90 93 10 01 	sts	0x0110, r25
     7e2:	80 93 0f 01 	sts	0x010F, r24
	}
	
	if(BigMiddleNumberCopy<0)
     7e6:	80 91 11 01 	lds	r24, 0x0111
     7ea:	90 91 12 01 	lds	r25, 0x0112
     7ee:	99 23       	and	r25, r25
     7f0:	84 f4       	brge	.+32     	; 0x812 <displayAllNumbers+0xd8>
	{
		PORTB = 0b10000000; //1x1
     7f2:	80 e8       	ldi	r24, 0x80	; 128
     7f4:	88 bb       	out	0x18, r24	; 24
		PORTA = BD_minus;
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	8b bb       	out	0x1b, r24	; 27
		BigMiddleNumberCopy=BigMiddleNumberCopy*-1;
     7fa:	80 91 11 01 	lds	r24, 0x0111
     7fe:	90 91 12 01 	lds	r25, 0x0112
     802:	90 95       	com	r25
     804:	81 95       	neg	r24
     806:	9f 4f       	sbci	r25, 0xFF	; 255
     808:	90 93 12 01 	sts	0x0112, r25
     80c:	80 93 11 01 	sts	0x0111, r24
     810:	19 c0       	rjmp	.+50     	; 0x844 <displayAllNumbers+0x10a>
	}
	else
	{
		PORTB = 0b10000000; //1x1
     812:	80 e8       	ldi	r24, 0x80	; 128
     814:	88 bb       	out	0x18, r24	; 24
		showSegmentBig(BigMiddleNumberCopy/10);
     816:	80 91 11 01 	lds	r24, 0x0111
     81a:	90 91 12 01 	lds	r25, 0x0112
     81e:	ca e0       	ldi	r28, 0x0A	; 10
     820:	d0 e0       	ldi	r29, 0x00	; 0
     822:	be 01       	movw	r22, r28
     824:	0e 94 42 08 	call	0x1084	; 0x1084 <__divmodhi4>
     828:	cb 01       	movw	r24, r22
     82a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <showSegmentBig>
		BigMiddleNumberCopy=BigMiddleNumberCopy%10;
     82e:	80 91 11 01 	lds	r24, 0x0111
     832:	90 91 12 01 	lds	r25, 0x0112
     836:	be 01       	movw	r22, r28
     838:	0e 94 42 08 	call	0x1084	; 0x1084 <__divmodhi4>
     83c:	90 93 12 01 	sts	0x0112, r25
     840:	80 93 11 01 	sts	0x0111, r24
     844:	81 eb       	ldi	r24, 0xB1	; 177
     846:	9c e0       	ldi	r25, 0x0C	; 12
     848:	01 97       	sbiw	r24, 0x01	; 1
     84a:	f1 f7       	brne	.-4      	; 0x848 <displayAllNumbers+0x10e>
     84c:	00 c0       	rjmp	.+0      	; 0x84e <displayAllNumbers+0x114>
     84e:	00 00       	nop
	}
	_delay_ms(SEGMENT_DELAY);
	PORTA=BD_empty;
     850:	1b ba       	out	0x1b, r1	; 27
	PORTD=SD_empty;
     852:	0f ef       	ldi	r16, 0xFF	; 255
     854:	02 bb       	out	0x12, r16	; 18
//----------Second pair----------------------------
	
	PORTB = 0b00001000;   //1x2
     856:	88 e0       	ldi	r24, 0x08	; 8
     858:	88 bb       	out	0x18, r24	; 24
	showSegmentBig(BigMiddleNumberCopy/1);
     85a:	80 91 11 01 	lds	r24, 0x0111
     85e:	90 91 12 01 	lds	r25, 0x0112
     862:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <showSegmentBig>

	showSegmentSmall(SmallTopNumberCopy/100);
     866:	80 91 0f 01 	lds	r24, 0x010F
     86a:	90 91 10 01 	lds	r25, 0x0110
     86e:	c4 e6       	ldi	r28, 0x64	; 100
     870:	d0 e0       	ldi	r29, 0x00	; 0
     872:	be 01       	movw	r22, r28
     874:	0e 94 42 08 	call	0x1084	; 0x1084 <__divmodhi4>
     878:	cb 01       	movw	r24, r22
     87a:	0e 94 ab 00 	call	0x156	; 0x156 <showSegmentSmall>
	PORTC = 0b01111111;   //1x2
     87e:	8f e7       	ldi	r24, 0x7F	; 127
     880:	85 bb       	out	0x15, r24	; 21
	
	SmallTopNumberCopy=SmallTopNumberCopy%100;
     882:	80 91 0f 01 	lds	r24, 0x010F
     886:	90 91 10 01 	lds	r25, 0x0110
     88a:	be 01       	movw	r22, r28
     88c:	0e 94 42 08 	call	0x1084	; 0x1084 <__divmodhi4>
     890:	90 93 10 01 	sts	0x0110, r25
     894:	80 93 0f 01 	sts	0x010F, r24
     898:	e1 eb       	ldi	r30, 0xB1	; 177
     89a:	fc e0       	ldi	r31, 0x0C	; 12
     89c:	31 97       	sbiw	r30, 0x01	; 1
     89e:	f1 f7       	brne	.-4      	; 0x89c <displayAllNumbers+0x162>
     8a0:	00 c0       	rjmp	.+0      	; 0x8a2 <displayAllNumbers+0x168>
     8a2:	00 00       	nop
	_delay_ms(SEGMENT_DELAY);
	PORTD=SD_empty;
     8a4:	02 bb       	out	0x12, r16	; 18
	PORTA=BD_empty;
     8a6:	1b ba       	out	0x1b, r1	; 27
//---------------Third pair-------------------------------	
	showSegmentSmall(SmallTopNumberCopy/10);
     8a8:	ca e0       	ldi	r28, 0x0A	; 10
     8aa:	d0 e0       	ldi	r29, 0x00	; 0
     8ac:	be 01       	movw	r22, r28
     8ae:	0e 94 42 08 	call	0x1084	; 0x1084 <__divmodhi4>
     8b2:	cb 01       	movw	r24, r22
     8b4:	0e 94 ab 00 	call	0x156	; 0x156 <showSegmentSmall>
	PORTC = 0b11111011;  //1x3
     8b8:	8b ef       	ldi	r24, 0xFB	; 251
     8ba:	85 bb       	out	0x15, r24	; 21
	SmallTopNumberCopy=SmallTopNumberCopy%10;
     8bc:	80 91 0f 01 	lds	r24, 0x010F
     8c0:	90 91 10 01 	lds	r25, 0x0110
     8c4:	be 01       	movw	r22, r28
     8c6:	0e 94 42 08 	call	0x1084	; 0x1084 <__divmodhi4>
     8ca:	90 93 10 01 	sts	0x0110, r25
     8ce:	80 93 0f 01 	sts	0x010F, r24
	
	if(BigTopNumberCopy<0)
     8d2:	80 91 17 01 	lds	r24, 0x0117
     8d6:	90 91 18 01 	lds	r25, 0x0118
     8da:	99 23       	and	r25, r25
     8dc:	8c f4       	brge	.+34     	; 0x900 <displayAllNumbers+0x1c6>
	{
		PORTB = 0b01000000; //1x1
     8de:	80 e4       	ldi	r24, 0x40	; 64
     8e0:	88 bb       	out	0x18, r24	; 24
		PORTA = BD_minus;
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	8b bb       	out	0x1b, r24	; 27
		PORTA|=BD_dot;
     8e6:	dc 9a       	sbi	0x1b, 4	; 27
		BigTopNumberCopy=BigTopNumberCopy*-1;
     8e8:	80 91 17 01 	lds	r24, 0x0117
     8ec:	90 91 18 01 	lds	r25, 0x0118
     8f0:	90 95       	com	r25
     8f2:	81 95       	neg	r24
     8f4:	9f 4f       	sbci	r25, 0xFF	; 255
     8f6:	90 93 18 01 	sts	0x0118, r25
     8fa:	80 93 17 01 	sts	0x0117, r24
     8fe:	1a c0       	rjmp	.+52     	; 0x934 <displayAllNumbers+0x1fa>
	}
	else
	{
		PORTB = 0b01000000; //1x1
     900:	80 e4       	ldi	r24, 0x40	; 64
     902:	88 bb       	out	0x18, r24	; 24
		showSegmentBig(BigTopNumberCopy/100);
     904:	80 91 17 01 	lds	r24, 0x0117
     908:	90 91 18 01 	lds	r25, 0x0118
     90c:	c4 e6       	ldi	r28, 0x64	; 100
     90e:	d0 e0       	ldi	r29, 0x00	; 0
     910:	be 01       	movw	r22, r28
     912:	0e 94 42 08 	call	0x1084	; 0x1084 <__divmodhi4>
     916:	cb 01       	movw	r24, r22
     918:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <showSegmentBig>
		PORTA|=BD_dot;
     91c:	dc 9a       	sbi	0x1b, 4	; 27
		BigTopNumberCopy=BigTopNumberCopy%100;
     91e:	80 91 17 01 	lds	r24, 0x0117
     922:	90 91 18 01 	lds	r25, 0x0118
     926:	be 01       	movw	r22, r28
     928:	0e 94 42 08 	call	0x1084	; 0x1084 <__divmodhi4>
     92c:	90 93 18 01 	sts	0x0118, r25
     930:	80 93 17 01 	sts	0x0117, r24
     934:	81 eb       	ldi	r24, 0xB1	; 177
     936:	9c e0       	ldi	r25, 0x0C	; 12
     938:	01 97       	sbiw	r24, 0x01	; 1
     93a:	f1 f7       	brne	.-4      	; 0x938 <displayAllNumbers+0x1fe>
     93c:	00 c0       	rjmp	.+0      	; 0x93e <displayAllNumbers+0x204>
     93e:	00 00       	nop
	}
	_delay_ms(SEGMENT_DELAY);
	PORTD=SD_empty;
     940:	0f ef       	ldi	r16, 0xFF	; 255
     942:	02 bb       	out	0x12, r16	; 18
	PORTA=BD_empty;
     944:	1b ba       	out	0x1b, r1	; 27
//-----------------Fourth pair----------------------------------	
	
	
	
	showSegmentSmall(SmallTopNumberCopy/1);
     946:	80 91 0f 01 	lds	r24, 0x010F
     94a:	90 91 10 01 	lds	r25, 0x0110
     94e:	0e 94 ab 00 	call	0x156	; 0x156 <showSegmentSmall>
	PORTC = 0b10111111; //1x4
     952:	8f eb       	ldi	r24, 0xBF	; 191
     954:	85 bb       	out	0x15, r24	; 21
	
	PORTB = 0b00000100;   //1x2
     956:	84 e0       	ldi	r24, 0x04	; 4
     958:	88 bb       	out	0x18, r24	; 24
	showSegmentBig(BigTopNumberCopy/10);
     95a:	80 91 17 01 	lds	r24, 0x0117
     95e:	90 91 18 01 	lds	r25, 0x0118
     962:	ca e0       	ldi	r28, 0x0A	; 10
     964:	d0 e0       	ldi	r29, 0x00	; 0
     966:	be 01       	movw	r22, r28
     968:	0e 94 42 08 	call	0x1084	; 0x1084 <__divmodhi4>
     96c:	cb 01       	movw	r24, r22
     96e:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <showSegmentBig>
	

	BigTopNumberCopy=BigTopNumberCopy%10;
     972:	80 91 17 01 	lds	r24, 0x0117
     976:	90 91 18 01 	lds	r25, 0x0118
     97a:	be 01       	movw	r22, r28
     97c:	0e 94 42 08 	call	0x1084	; 0x1084 <__divmodhi4>
     980:	90 93 18 01 	sts	0x0118, r25
     984:	80 93 17 01 	sts	0x0117, r24
     988:	e1 eb       	ldi	r30, 0xB1	; 177
     98a:	fc e0       	ldi	r31, 0x0C	; 12
     98c:	31 97       	sbiw	r30, 0x01	; 1
     98e:	f1 f7       	brne	.-4      	; 0x98c <displayAllNumbers+0x252>
     990:	00 c0       	rjmp	.+0      	; 0x992 <displayAllNumbers+0x258>
     992:	00 00       	nop
	_delay_ms(SEGMENT_DELAY);
	PORTD=SD_empty;
     994:	02 bb       	out	0x12, r16	; 18
	PORTA=BD_empty;
     996:	1b ba       	out	0x1b, r1	; 27

//----------------Fifth pair------------------------------
	showSegmentBig(BigTopNumberCopy/1);
     998:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <showSegmentBig>
	PORTB = 0b00100000;  //1x3
     99c:	80 e2       	ldi	r24, 0x20	; 32
     99e:	88 bb       	out	0x18, r24	; 24

	if(SmallBottomNumberCopy<0)
     9a0:	80 91 0d 01 	lds	r24, 0x010D
     9a4:	90 91 0e 01 	lds	r25, 0x010E
     9a8:	99 23       	and	r25, r25
     9aa:	84 f4       	brge	.+32     	; 0x9cc <displayAllNumbers+0x292>
	{
		PORTC = 0b11111101; //1x1
     9ac:	8d ef       	ldi	r24, 0xFD	; 253
     9ae:	85 bb       	out	0x15, r24	; 21
		PORTD = SD_minus;
     9b0:	87 ef       	ldi	r24, 0xF7	; 247
     9b2:	82 bb       	out	0x12, r24	; 18
		SmallBottomNumberCopy=SmallBottomNumberCopy*-1;
     9b4:	80 91 0d 01 	lds	r24, 0x010D
     9b8:	90 91 0e 01 	lds	r25, 0x010E
     9bc:	90 95       	com	r25
     9be:	81 95       	neg	r24
     9c0:	9f 4f       	sbci	r25, 0xFF	; 255
     9c2:	90 93 0e 01 	sts	0x010E, r25
     9c6:	80 93 0d 01 	sts	0x010D, r24
     9ca:	19 c0       	rjmp	.+50     	; 0x9fe <displayAllNumbers+0x2c4>
	}
	else
	{
		PORTC = 0b11111101; //2x1
     9cc:	8d ef       	ldi	r24, 0xFD	; 253
     9ce:	85 bb       	out	0x15, r24	; 21
		showSegmentSmall(SmallBottomNumberCopy/1000);
     9d0:	80 91 0d 01 	lds	r24, 0x010D
     9d4:	90 91 0e 01 	lds	r25, 0x010E
     9d8:	c8 ee       	ldi	r28, 0xE8	; 232
     9da:	d3 e0       	ldi	r29, 0x03	; 3
     9dc:	be 01       	movw	r22, r28
     9de:	0e 94 42 08 	call	0x1084	; 0x1084 <__divmodhi4>
     9e2:	cb 01       	movw	r24, r22
     9e4:	0e 94 ab 00 	call	0x156	; 0x156 <showSegmentSmall>
		SmallBottomNumberCopy=SmallBottomNumberCopy%1000;
     9e8:	80 91 0d 01 	lds	r24, 0x010D
     9ec:	90 91 0e 01 	lds	r25, 0x010E
     9f0:	be 01       	movw	r22, r28
     9f2:	0e 94 42 08 	call	0x1084	; 0x1084 <__divmodhi4>
     9f6:	90 93 0e 01 	sts	0x010E, r25
     9fa:	80 93 0d 01 	sts	0x010D, r24
     9fe:	81 eb       	ldi	r24, 0xB1	; 177
     a00:	9c e0       	ldi	r25, 0x0C	; 12
     a02:	01 97       	sbiw	r24, 0x01	; 1
     a04:	f1 f7       	brne	.-4      	; 0xa02 <displayAllNumbers+0x2c8>
     a06:	00 c0       	rjmp	.+0      	; 0xa08 <displayAllNumbers+0x2ce>
     a08:	00 00       	nop
	}

	_delay_ms(SEGMENT_DELAY);
	PORTA=BD_empty;
     a0a:	1b ba       	out	0x1b, r1	; 27
	PORTD=SD_empty;
     a0c:	8f ef       	ldi	r24, 0xFF	; 255
     a0e:	82 bb       	out	0x12, r24	; 18

//---------------------Sixth pair-----------------------------------
	showSegmentSmall(SmallBottomNumberCopy/100);
     a10:	80 91 0d 01 	lds	r24, 0x010D
     a14:	90 91 0e 01 	lds	r25, 0x010E
     a18:	c4 e6       	ldi	r28, 0x64	; 100
     a1a:	d0 e0       	ldi	r29, 0x00	; 0
     a1c:	be 01       	movw	r22, r28
     a1e:	0e 94 42 08 	call	0x1084	; 0x1084 <__divmodhi4>
     a22:	cb 01       	movw	r24, r22
     a24:	0e 94 ab 00 	call	0x156	; 0x156 <showSegmentSmall>
	PORTC = 0b11011111;   //2x2
     a28:	8f ed       	ldi	r24, 0xDF	; 223
     a2a:	85 bb       	out	0x15, r24	; 21
	SmallBottomNumberCopy=SmallBottomNumberCopy%100;
     a2c:	80 91 0d 01 	lds	r24, 0x010D
     a30:	90 91 0e 01 	lds	r25, 0x010E
     a34:	be 01       	movw	r22, r28
     a36:	0e 94 42 08 	call	0x1084	; 0x1084 <__divmodhi4>
     a3a:	90 93 0e 01 	sts	0x010E, r25
     a3e:	80 93 0d 01 	sts	0x010D, r24

	if(BigBottomNumberCopy<0)
     a42:	80 91 15 01 	lds	r24, 0x0115
     a46:	90 91 16 01 	lds	r25, 0x0116
     a4a:	99 23       	and	r25, r25
     a4c:	84 f4       	brge	.+32     	; 0xa6e <displayAllNumbers+0x334>
	{
		PORTB = 0b00000010; //1x1
     a4e:	82 e0       	ldi	r24, 0x02	; 2
     a50:	88 bb       	out	0x18, r24	; 24
		PORTA = BD_minus;
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	8b bb       	out	0x1b, r24	; 27
		BigBottomNumberCopy=BigBottomNumberCopy*-1;
     a56:	80 91 15 01 	lds	r24, 0x0115
     a5a:	90 91 16 01 	lds	r25, 0x0116
     a5e:	90 95       	com	r25
     a60:	81 95       	neg	r24
     a62:	9f 4f       	sbci	r25, 0xFF	; 255
     a64:	90 93 16 01 	sts	0x0116, r25
     a68:	80 93 15 01 	sts	0x0115, r24
     a6c:	19 c0       	rjmp	.+50     	; 0xaa0 <displayAllNumbers+0x366>
	}
	else
	{
		PORTB = 0b00000010; //1x1
     a6e:	82 e0       	ldi	r24, 0x02	; 2
     a70:	88 bb       	out	0x18, r24	; 24
		showSegmentBig(BigBottomNumberCopy/100);
     a72:	80 91 15 01 	lds	r24, 0x0115
     a76:	90 91 16 01 	lds	r25, 0x0116
     a7a:	c4 e6       	ldi	r28, 0x64	; 100
     a7c:	d0 e0       	ldi	r29, 0x00	; 0
     a7e:	be 01       	movw	r22, r28
     a80:	0e 94 42 08 	call	0x1084	; 0x1084 <__divmodhi4>
     a84:	cb 01       	movw	r24, r22
     a86:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <showSegmentBig>
		BigBottomNumberCopy=BigBottomNumberCopy%100;
     a8a:	80 91 15 01 	lds	r24, 0x0115
     a8e:	90 91 16 01 	lds	r25, 0x0116
     a92:	be 01       	movw	r22, r28
     a94:	0e 94 42 08 	call	0x1084	; 0x1084 <__divmodhi4>
     a98:	90 93 16 01 	sts	0x0116, r25
     a9c:	80 93 15 01 	sts	0x0115, r24
     aa0:	e1 eb       	ldi	r30, 0xB1	; 177
     aa2:	fc e0       	ldi	r31, 0x0C	; 12
     aa4:	31 97       	sbiw	r30, 0x01	; 1
     aa6:	f1 f7       	brne	.-4      	; 0xaa4 <displayAllNumbers+0x36a>
     aa8:	00 c0       	rjmp	.+0      	; 0xaaa <displayAllNumbers+0x370>
     aaa:	00 00       	nop
	}

	_delay_ms(SEGMENT_DELAY);
	PORTD=SD_empty;
     aac:	cf ef       	ldi	r28, 0xFF	; 255
     aae:	c2 bb       	out	0x12, r28	; 18
	PORTA=BD_empty;
     ab0:	1b ba       	out	0x1b, r1	; 27
//----------------Seventh pair--------------------------------------
	showSegmentSmall(SmallBottomNumberCopy/10);
     ab2:	80 91 0d 01 	lds	r24, 0x010D
     ab6:	90 91 0e 01 	lds	r25, 0x010E
     aba:	0a e0       	ldi	r16, 0x0A	; 10
     abc:	10 e0       	ldi	r17, 0x00	; 0
     abe:	b8 01       	movw	r22, r16
     ac0:	0e 94 42 08 	call	0x1084	; 0x1084 <__divmodhi4>
     ac4:	cb 01       	movw	r24, r22
     ac6:	0e 94 ab 00 	call	0x156	; 0x156 <showSegmentSmall>
	PORTC = 0b11111110;  //2x3
     aca:	8e ef       	ldi	r24, 0xFE	; 254
     acc:	85 bb       	out	0x15, r24	; 21
	SmallBottomNumberCopy=SmallBottomNumberCopy%10;
     ace:	80 91 0d 01 	lds	r24, 0x010D
     ad2:	90 91 0e 01 	lds	r25, 0x010E
     ad6:	b8 01       	movw	r22, r16
     ad8:	0e 94 42 08 	call	0x1084	; 0x1084 <__divmodhi4>
     adc:	90 93 0e 01 	sts	0x010E, r25
     ae0:	80 93 0d 01 	sts	0x010D, r24
	
	PORTB = 0b00010000;   //1x2
     ae4:	80 e1       	ldi	r24, 0x10	; 16
     ae6:	88 bb       	out	0x18, r24	; 24
	showSegmentBig(BigBottomNumberCopy/10);
     ae8:	80 91 15 01 	lds	r24, 0x0115
     aec:	90 91 16 01 	lds	r25, 0x0116
     af0:	b8 01       	movw	r22, r16
     af2:	0e 94 42 08 	call	0x1084	; 0x1084 <__divmodhi4>
     af6:	cb 01       	movw	r24, r22
     af8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <showSegmentBig>
	BigBottomNumberCopy=BigBottomNumberCopy%10;
     afc:	80 91 15 01 	lds	r24, 0x0115
     b00:	90 91 16 01 	lds	r25, 0x0116
     b04:	b8 01       	movw	r22, r16
     b06:	0e 94 42 08 	call	0x1084	; 0x1084 <__divmodhi4>
     b0a:	90 93 16 01 	sts	0x0116, r25
     b0e:	80 93 15 01 	sts	0x0115, r24
     b12:	81 eb       	ldi	r24, 0xB1	; 177
     b14:	9c e0       	ldi	r25, 0x0C	; 12
     b16:	01 97       	sbiw	r24, 0x01	; 1
     b18:	f1 f7       	brne	.-4      	; 0xb16 <displayAllNumbers+0x3dc>
     b1a:	00 c0       	rjmp	.+0      	; 0xb1c <displayAllNumbers+0x3e2>
     b1c:	00 00       	nop
	
	_delay_ms(SEGMENT_DELAY);
	PORTD=SD_empty;
     b1e:	c2 bb       	out	0x12, r28	; 18
	PORTA=BD_empty;
     b20:	1b ba       	out	0x1b, r1	; 27
//---------------------Eight pair-----------------------------------
	showSegmentSmall(SmallBottomNumberCopy/1);
     b22:	80 91 0d 01 	lds	r24, 0x010D
     b26:	90 91 0e 01 	lds	r25, 0x010E
     b2a:	0e 94 ab 00 	call	0x156	; 0x156 <showSegmentSmall>
	PORTC = 0b11101111; //2x4
     b2e:	8f ee       	ldi	r24, 0xEF	; 239
     b30:	85 bb       	out	0x15, r24	; 21
	
	showSegmentBig(BigBottomNumberCopy/1);
     b32:	80 91 15 01 	lds	r24, 0x0115
     b36:	90 91 16 01 	lds	r25, 0x0116
     b3a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <showSegmentBig>
	PORTB = 0b00000001;  //1x3
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	88 bb       	out	0x18, r24	; 24
     b42:	e1 eb       	ldi	r30, 0xB1	; 177
     b44:	fc e0       	ldi	r31, 0x0C	; 12
     b46:	31 97       	sbiw	r30, 0x01	; 1
     b48:	f1 f7       	brne	.-4      	; 0xb46 <displayAllNumbers+0x40c>
     b4a:	00 c0       	rjmp	.+0      	; 0xb4c <displayAllNumbers+0x412>
     b4c:	00 00       	nop

	_delay_ms(SEGMENT_DELAY);
	PORTD=SD_empty;
     b4e:	c2 bb       	out	0x12, r28	; 18
	PORTC = 0xFF;
     b50:	c5 bb       	out	0x15, r28	; 21
	PORTA=SD_empty;
     b52:	cb bb       	out	0x1b, r28	; 27
	PORTB=0x00;
     b54:	18 ba       	out	0x18, r1	; 24
	
//-----------------------------------------------------------------
}
     b56:	df 91       	pop	r29
     b58:	cf 91       	pop	r28
     b5a:	1f 91       	pop	r17
     b5c:	0f 91       	pop	r16
     b5e:	08 95       	ret

00000b60 <setupTimer>:


volatile int time=0;
void setupTimer()
{
	cli();
     b60:	f8 94       	cli
	TCCR1A = 0;
     b62:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0;
     b64:	1e bc       	out	0x2e, r1	; 46
	
	TCCR3A = 0;
     b66:	10 92 8b 00 	sts	0x008B, r1
	TCCR3B = 0;
     b6a:	ea e8       	ldi	r30, 0x8A	; 138
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	10 82       	st	Z, r1
	
	OCR1A = 7800;
     b70:	88 e7       	ldi	r24, 0x78	; 120
     b72:	9e e1       	ldi	r25, 0x1E	; 30
     b74:	9b bd       	out	0x2b, r25	; 43
     b76:	8a bd       	out	0x2a, r24	; 42

	OCR3A = 100; 
     b78:	84 e6       	ldi	r24, 0x64	; 100
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	90 93 87 00 	sts	0x0087, r25
     b80:	80 93 86 00 	sts	0x0086, r24

	TCCR1B |=(1<<WGM12);
     b84:	8e b5       	in	r24, 0x2e	; 46
     b86:	88 60       	ori	r24, 0x08	; 8
     b88:	8e bd       	out	0x2e, r24	; 46
	TCCR3B |=(1<<WGM32); 
     b8a:	80 81       	ld	r24, Z
     b8c:	88 60       	ori	r24, 0x08	; 8
     b8e:	80 83       	st	Z, r24

	TCCR1B |= (1 << CS10);
     b90:	8e b5       	in	r24, 0x2e	; 46
     b92:	81 60       	ori	r24, 0x01	; 1
     b94:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS12);
     b96:	8e b5       	in	r24, 0x2e	; 46
     b98:	84 60       	ori	r24, 0x04	; 4
     b9a:	8e bd       	out	0x2e, r24	; 46

	TCCR3B |= (1 << CS30);
     b9c:	80 81       	ld	r24, Z
     b9e:	81 60       	ori	r24, 0x01	; 1
     ba0:	80 83       	st	Z, r24
	TCCR3B |= (1 << CS32);
     ba2:	80 81       	ld	r24, Z
     ba4:	84 60       	ori	r24, 0x04	; 4
     ba6:	80 83       	st	Z, r24
	
	TIMSK |= (1 << OCIE1A);
     ba8:	87 b7       	in	r24, 0x37	; 55
     baa:	80 61       	ori	r24, 0x10	; 16
     bac:	87 bf       	out	0x37, r24	; 55
	ETIMSK |= (1 << OCIE3A); 
     bae:	ed e7       	ldi	r30, 0x7D	; 125
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	80 61       	ori	r24, 0x10	; 16
     bb6:	80 83       	st	Z, r24
	
	sei();
     bb8:	78 94       	sei
	
	
}
     bba:	08 95       	ret

00000bbc <__vector_26>:

ISR(TIMER3_COMPA_vect)
{
     bbc:	1f 92       	push	r1
     bbe:	0f 92       	push	r0
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	0f 92       	push	r0
     bc4:	0b b6       	in	r0, 0x3b	; 59
     bc6:	0f 92       	push	r0
     bc8:	11 24       	eor	r1, r1
     bca:	2f 93       	push	r18
     bcc:	3f 93       	push	r19
     bce:	4f 93       	push	r20
     bd0:	5f 93       	push	r21
     bd2:	6f 93       	push	r22
     bd4:	7f 93       	push	r23
     bd6:	8f 93       	push	r24
     bd8:	9f 93       	push	r25
     bda:	af 93       	push	r26
     bdc:	bf 93       	push	r27
     bde:	ef 93       	push	r30
     be0:	ff 93       	push	r31
	//SmallTopNumber = (int)getAdcVoltage(ADC_PRESSURE_SENSOR);
	//SmallBottomNumber= time;
	//BigBottomNumber = (int)GetPressure()%1000;
	BigTopNumber = GetPressure();
     be2:	0e 94 31 06 	call	0xc62	; 0xc62 <GetPressure>
     be6:	90 93 06 01 	sts	0x0106, r25
     bea:	80 93 05 01 	sts	0x0105, r24
	//displayTopSmallRowNumber(GetPressure());
	//displayBigTopRowNumber(GetPressure());
	displayAllNumbers();
     bee:	0e 94 9d 03 	call	0x73a	; 0x73a <displayAllNumbers>
} 
     bf2:	ff 91       	pop	r31
     bf4:	ef 91       	pop	r30
     bf6:	bf 91       	pop	r27
     bf8:	af 91       	pop	r26
     bfa:	9f 91       	pop	r25
     bfc:	8f 91       	pop	r24
     bfe:	7f 91       	pop	r23
     c00:	6f 91       	pop	r22
     c02:	5f 91       	pop	r21
     c04:	4f 91       	pop	r20
     c06:	3f 91       	pop	r19
     c08:	2f 91       	pop	r18
     c0a:	0f 90       	pop	r0
     c0c:	0b be       	out	0x3b, r0	; 59
     c0e:	0f 90       	pop	r0
     c10:	0f be       	out	0x3f, r0	; 63
     c12:	0f 90       	pop	r0
     c14:	1f 90       	pop	r1
     c16:	18 95       	reti

00000c18 <__vector_12>:

ISR(TIMER1_COMPA_vect)
{
     c18:	1f 92       	push	r1
     c1a:	0f 92       	push	r0
     c1c:	0f b6       	in	r0, 0x3f	; 63
     c1e:	0f 92       	push	r0
     c20:	11 24       	eor	r1, r1
     c22:	8f 93       	push	r24
     c24:	9f 93       	push	r25
time++;
     c26:	80 91 01 01 	lds	r24, 0x0101
     c2a:	90 91 02 01 	lds	r25, 0x0102
     c2e:	01 96       	adiw	r24, 0x01	; 1
     c30:	90 93 02 01 	sts	0x0102, r25
     c34:	80 93 01 01 	sts	0x0101, r24
}
     c38:	9f 91       	pop	r25
     c3a:	8f 91       	pop	r24
     c3c:	0f 90       	pop	r0
     c3e:	0f be       	out	0x3f, r0	; 63
     c40:	0f 90       	pop	r0
     c42:	1f 90       	pop	r1
     c44:	18 95       	reti

00000c46 <main>:

int main(void)
{


	adcPrepare();
     c46:	0e 94 68 00 	call	0xd0	; 0xd0 <adcPrepare>
	setupTimer();
     c4a:	0e 94 b0 05 	call	0xb60	; 0xb60 <setupTimer>
	DDRD = 0xFF;  //set d ports as outputs
     c4e:	8f ef       	ldi	r24, 0xFF	; 255
     c50:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xFF;  //set c ports as outputs
     c52:	84 bb       	out	0x14, r24	; 20
	
	DDRB = 0xFF;
     c54:	87 bb       	out	0x17, r24	; 23
	DDRA = 0xFF;
     c56:	8a bb       	out	0x1a, r24	; 26
	
	PORTB = 0x00;
     c58:	18 ba       	out	0x18, r1	; 24
	PORTA = 0x00;
     c5a:	1b ba       	out	0x1b, r1	; 27
	//
	PORTD = 0xFF;
     c5c:	82 bb       	out	0x12, r24	; 18
	PORTC = 0xFF;
     c5e:	85 bb       	out	0x15, r24	; 21
     c60:	ff cf       	rjmp	.-2      	; 0xc60 <main+0x1a>

00000c62 <GetPressure>:
#include "Headers/Adc.h"
#include "Headers/GlobalValues.h"
int GetPressure()
{
	// Slegio daviklis butinai turi but uzmaitintas 5v lygiai
	return (int)(((getADC(ADC_PRESSURE_SENSOR)*0.0045)/0.008) -22.2)/1;
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	0e 94 96 00 	call	0x12c	; 0x12c <getADC>
     c68:	9c 01       	movw	r18, r24
     c6a:	b9 01       	movw	r22, r18
     c6c:	88 27       	eor	r24, r24
     c6e:	77 fd       	sbrc	r23, 7
     c70:	80 95       	com	r24
     c72:	98 2f       	mov	r25, r24
     c74:	0e 94 53 07 	call	0xea6	; 0xea6 <__floatsisf>
     c78:	2c eb       	ldi	r18, 0xBC	; 188
     c7a:	34 e7       	ldi	r19, 0x74	; 116
     c7c:	43 e9       	ldi	r20, 0x93	; 147
     c7e:	5b e3       	ldi	r21, 0x3B	; 59
     c80:	0e 94 df 07 	call	0xfbe	; 0xfbe <__mulsf3>
     c84:	2f e6       	ldi	r18, 0x6F	; 111
     c86:	32 e1       	ldi	r19, 0x12	; 18
     c88:	43 e0       	ldi	r20, 0x03	; 3
     c8a:	5c e3       	ldi	r21, 0x3C	; 60
     c8c:	0e 94 b8 06 	call	0xd70	; 0xd70 <__divsf3>
     c90:	2a e9       	ldi	r18, 0x9A	; 154
     c92:	39 e9       	ldi	r19, 0x99	; 153
     c94:	41 eb       	ldi	r20, 0xB1	; 177
     c96:	51 e4       	ldi	r21, 0x41	; 65
     c98:	0e 94 53 06 	call	0xca6	; 0xca6 <__subsf3>
     c9c:	0e 94 20 07 	call	0xe40	; 0xe40 <__fixsfsi>
}
     ca0:	86 2f       	mov	r24, r22
     ca2:	97 2f       	mov	r25, r23
     ca4:	08 95       	ret

00000ca6 <__subsf3>:
     ca6:	50 58       	subi	r21, 0x80	; 128

00000ca8 <__addsf3>:
     ca8:	bb 27       	eor	r27, r27
     caa:	aa 27       	eor	r26, r26
     cac:	0e d0       	rcall	.+28     	; 0xcca <__addsf3x>
     cae:	4d c1       	rjmp	.+666    	; 0xf4a <__fp_round>
     cb0:	3e d1       	rcall	.+636    	; 0xf2e <__fp_pscA>
     cb2:	30 f0       	brcs	.+12     	; 0xcc0 <__addsf3+0x18>
     cb4:	43 d1       	rcall	.+646    	; 0xf3c <__fp_pscB>
     cb6:	20 f0       	brcs	.+8      	; 0xcc0 <__addsf3+0x18>
     cb8:	31 f4       	brne	.+12     	; 0xcc6 <__addsf3+0x1e>
     cba:	9f 3f       	cpi	r25, 0xFF	; 255
     cbc:	11 f4       	brne	.+4      	; 0xcc2 <__addsf3+0x1a>
     cbe:	1e f4       	brtc	.+6      	; 0xcc6 <__addsf3+0x1e>
     cc0:	33 c1       	rjmp	.+614    	; 0xf28 <__fp_nan>
     cc2:	0e f4       	brtc	.+2      	; 0xcc6 <__addsf3+0x1e>
     cc4:	e0 95       	com	r30
     cc6:	e7 fb       	bst	r30, 7
     cc8:	29 c1       	rjmp	.+594    	; 0xf1c <__fp_inf>

00000cca <__addsf3x>:
     cca:	e9 2f       	mov	r30, r25
     ccc:	4f d1       	rcall	.+670    	; 0xf6c <__fp_split3>
     cce:	80 f3       	brcs	.-32     	; 0xcb0 <__addsf3+0x8>
     cd0:	ba 17       	cp	r27, r26
     cd2:	62 07       	cpc	r22, r18
     cd4:	73 07       	cpc	r23, r19
     cd6:	84 07       	cpc	r24, r20
     cd8:	95 07       	cpc	r25, r21
     cda:	18 f0       	brcs	.+6      	; 0xce2 <__addsf3x+0x18>
     cdc:	71 f4       	brne	.+28     	; 0xcfa <__addsf3x+0x30>
     cde:	9e f5       	brtc	.+102    	; 0xd46 <__addsf3x+0x7c>
     ce0:	67 c1       	rjmp	.+718    	; 0xfb0 <__fp_zero>
     ce2:	0e f4       	brtc	.+2      	; 0xce6 <__addsf3x+0x1c>
     ce4:	e0 95       	com	r30
     ce6:	0b 2e       	mov	r0, r27
     ce8:	ba 2f       	mov	r27, r26
     cea:	a0 2d       	mov	r26, r0
     cec:	0b 01       	movw	r0, r22
     cee:	b9 01       	movw	r22, r18
     cf0:	90 01       	movw	r18, r0
     cf2:	0c 01       	movw	r0, r24
     cf4:	ca 01       	movw	r24, r20
     cf6:	a0 01       	movw	r20, r0
     cf8:	11 24       	eor	r1, r1
     cfa:	ff 27       	eor	r31, r31
     cfc:	59 1b       	sub	r21, r25
     cfe:	99 f0       	breq	.+38     	; 0xd26 <__addsf3x+0x5c>
     d00:	59 3f       	cpi	r21, 0xF9	; 249
     d02:	50 f4       	brcc	.+20     	; 0xd18 <__addsf3x+0x4e>
     d04:	50 3e       	cpi	r21, 0xE0	; 224
     d06:	68 f1       	brcs	.+90     	; 0xd62 <__addsf3x+0x98>
     d08:	1a 16       	cp	r1, r26
     d0a:	f0 40       	sbci	r31, 0x00	; 0
     d0c:	a2 2f       	mov	r26, r18
     d0e:	23 2f       	mov	r18, r19
     d10:	34 2f       	mov	r19, r20
     d12:	44 27       	eor	r20, r20
     d14:	58 5f       	subi	r21, 0xF8	; 248
     d16:	f3 cf       	rjmp	.-26     	; 0xcfe <__addsf3x+0x34>
     d18:	46 95       	lsr	r20
     d1a:	37 95       	ror	r19
     d1c:	27 95       	ror	r18
     d1e:	a7 95       	ror	r26
     d20:	f0 40       	sbci	r31, 0x00	; 0
     d22:	53 95       	inc	r21
     d24:	c9 f7       	brne	.-14     	; 0xd18 <__addsf3x+0x4e>
     d26:	7e f4       	brtc	.+30     	; 0xd46 <__addsf3x+0x7c>
     d28:	1f 16       	cp	r1, r31
     d2a:	ba 0b       	sbc	r27, r26
     d2c:	62 0b       	sbc	r22, r18
     d2e:	73 0b       	sbc	r23, r19
     d30:	84 0b       	sbc	r24, r20
     d32:	ba f0       	brmi	.+46     	; 0xd62 <__addsf3x+0x98>
     d34:	91 50       	subi	r25, 0x01	; 1
     d36:	a1 f0       	breq	.+40     	; 0xd60 <__addsf3x+0x96>
     d38:	ff 0f       	add	r31, r31
     d3a:	bb 1f       	adc	r27, r27
     d3c:	66 1f       	adc	r22, r22
     d3e:	77 1f       	adc	r23, r23
     d40:	88 1f       	adc	r24, r24
     d42:	c2 f7       	brpl	.-16     	; 0xd34 <__addsf3x+0x6a>
     d44:	0e c0       	rjmp	.+28     	; 0xd62 <__addsf3x+0x98>
     d46:	ba 0f       	add	r27, r26
     d48:	62 1f       	adc	r22, r18
     d4a:	73 1f       	adc	r23, r19
     d4c:	84 1f       	adc	r24, r20
     d4e:	48 f4       	brcc	.+18     	; 0xd62 <__addsf3x+0x98>
     d50:	87 95       	ror	r24
     d52:	77 95       	ror	r23
     d54:	67 95       	ror	r22
     d56:	b7 95       	ror	r27
     d58:	f7 95       	ror	r31
     d5a:	9e 3f       	cpi	r25, 0xFE	; 254
     d5c:	08 f0       	brcs	.+2      	; 0xd60 <__addsf3x+0x96>
     d5e:	b3 cf       	rjmp	.-154    	; 0xcc6 <__addsf3+0x1e>
     d60:	93 95       	inc	r25
     d62:	88 0f       	add	r24, r24
     d64:	08 f0       	brcs	.+2      	; 0xd68 <__addsf3x+0x9e>
     d66:	99 27       	eor	r25, r25
     d68:	ee 0f       	add	r30, r30
     d6a:	97 95       	ror	r25
     d6c:	87 95       	ror	r24
     d6e:	08 95       	ret

00000d70 <__divsf3>:
     d70:	0c d0       	rcall	.+24     	; 0xd8a <__divsf3x>
     d72:	eb c0       	rjmp	.+470    	; 0xf4a <__fp_round>
     d74:	e3 d0       	rcall	.+454    	; 0xf3c <__fp_pscB>
     d76:	40 f0       	brcs	.+16     	; 0xd88 <__divsf3+0x18>
     d78:	da d0       	rcall	.+436    	; 0xf2e <__fp_pscA>
     d7a:	30 f0       	brcs	.+12     	; 0xd88 <__divsf3+0x18>
     d7c:	21 f4       	brne	.+8      	; 0xd86 <__divsf3+0x16>
     d7e:	5f 3f       	cpi	r21, 0xFF	; 255
     d80:	19 f0       	breq	.+6      	; 0xd88 <__divsf3+0x18>
     d82:	cc c0       	rjmp	.+408    	; 0xf1c <__fp_inf>
     d84:	51 11       	cpse	r21, r1
     d86:	15 c1       	rjmp	.+554    	; 0xfb2 <__fp_szero>
     d88:	cf c0       	rjmp	.+414    	; 0xf28 <__fp_nan>

00000d8a <__divsf3x>:
     d8a:	f0 d0       	rcall	.+480    	; 0xf6c <__fp_split3>
     d8c:	98 f3       	brcs	.-26     	; 0xd74 <__divsf3+0x4>

00000d8e <__divsf3_pse>:
     d8e:	99 23       	and	r25, r25
     d90:	c9 f3       	breq	.-14     	; 0xd84 <__divsf3+0x14>
     d92:	55 23       	and	r21, r21
     d94:	b1 f3       	breq	.-20     	; 0xd82 <__divsf3+0x12>
     d96:	95 1b       	sub	r25, r21
     d98:	55 0b       	sbc	r21, r21
     d9a:	bb 27       	eor	r27, r27
     d9c:	aa 27       	eor	r26, r26
     d9e:	62 17       	cp	r22, r18
     da0:	73 07       	cpc	r23, r19
     da2:	84 07       	cpc	r24, r20
     da4:	38 f0       	brcs	.+14     	; 0xdb4 <__divsf3_pse+0x26>
     da6:	9f 5f       	subi	r25, 0xFF	; 255
     da8:	5f 4f       	sbci	r21, 0xFF	; 255
     daa:	22 0f       	add	r18, r18
     dac:	33 1f       	adc	r19, r19
     dae:	44 1f       	adc	r20, r20
     db0:	aa 1f       	adc	r26, r26
     db2:	a9 f3       	breq	.-22     	; 0xd9e <__divsf3_pse+0x10>
     db4:	33 d0       	rcall	.+102    	; 0xe1c <__divsf3_pse+0x8e>
     db6:	0e 2e       	mov	r0, r30
     db8:	3a f0       	brmi	.+14     	; 0xdc8 <__divsf3_pse+0x3a>
     dba:	e0 e8       	ldi	r30, 0x80	; 128
     dbc:	30 d0       	rcall	.+96     	; 0xe1e <__divsf3_pse+0x90>
     dbe:	91 50       	subi	r25, 0x01	; 1
     dc0:	50 40       	sbci	r21, 0x00	; 0
     dc2:	e6 95       	lsr	r30
     dc4:	00 1c       	adc	r0, r0
     dc6:	ca f7       	brpl	.-14     	; 0xdba <__divsf3_pse+0x2c>
     dc8:	29 d0       	rcall	.+82     	; 0xe1c <__divsf3_pse+0x8e>
     dca:	fe 2f       	mov	r31, r30
     dcc:	27 d0       	rcall	.+78     	; 0xe1c <__divsf3_pse+0x8e>
     dce:	66 0f       	add	r22, r22
     dd0:	77 1f       	adc	r23, r23
     dd2:	88 1f       	adc	r24, r24
     dd4:	bb 1f       	adc	r27, r27
     dd6:	26 17       	cp	r18, r22
     dd8:	37 07       	cpc	r19, r23
     dda:	48 07       	cpc	r20, r24
     ddc:	ab 07       	cpc	r26, r27
     dde:	b0 e8       	ldi	r27, 0x80	; 128
     de0:	09 f0       	breq	.+2      	; 0xde4 <__divsf3_pse+0x56>
     de2:	bb 0b       	sbc	r27, r27
     de4:	80 2d       	mov	r24, r0
     de6:	bf 01       	movw	r22, r30
     de8:	ff 27       	eor	r31, r31
     dea:	93 58       	subi	r25, 0x83	; 131
     dec:	5f 4f       	sbci	r21, 0xFF	; 255
     dee:	2a f0       	brmi	.+10     	; 0xdfa <__divsf3_pse+0x6c>
     df0:	9e 3f       	cpi	r25, 0xFE	; 254
     df2:	51 05       	cpc	r21, r1
     df4:	68 f0       	brcs	.+26     	; 0xe10 <__divsf3_pse+0x82>
     df6:	92 c0       	rjmp	.+292    	; 0xf1c <__fp_inf>
     df8:	dc c0       	rjmp	.+440    	; 0xfb2 <__fp_szero>
     dfa:	5f 3f       	cpi	r21, 0xFF	; 255
     dfc:	ec f3       	brlt	.-6      	; 0xdf8 <__divsf3_pse+0x6a>
     dfe:	98 3e       	cpi	r25, 0xE8	; 232
     e00:	dc f3       	brlt	.-10     	; 0xdf8 <__divsf3_pse+0x6a>
     e02:	86 95       	lsr	r24
     e04:	77 95       	ror	r23
     e06:	67 95       	ror	r22
     e08:	b7 95       	ror	r27
     e0a:	f7 95       	ror	r31
     e0c:	9f 5f       	subi	r25, 0xFF	; 255
     e0e:	c9 f7       	brne	.-14     	; 0xe02 <__divsf3_pse+0x74>
     e10:	88 0f       	add	r24, r24
     e12:	91 1d       	adc	r25, r1
     e14:	96 95       	lsr	r25
     e16:	87 95       	ror	r24
     e18:	97 f9       	bld	r25, 7
     e1a:	08 95       	ret
     e1c:	e1 e0       	ldi	r30, 0x01	; 1
     e1e:	66 0f       	add	r22, r22
     e20:	77 1f       	adc	r23, r23
     e22:	88 1f       	adc	r24, r24
     e24:	bb 1f       	adc	r27, r27
     e26:	62 17       	cp	r22, r18
     e28:	73 07       	cpc	r23, r19
     e2a:	84 07       	cpc	r24, r20
     e2c:	ba 07       	cpc	r27, r26
     e2e:	20 f0       	brcs	.+8      	; 0xe38 <__divsf3_pse+0xaa>
     e30:	62 1b       	sub	r22, r18
     e32:	73 0b       	sbc	r23, r19
     e34:	84 0b       	sbc	r24, r20
     e36:	ba 0b       	sbc	r27, r26
     e38:	ee 1f       	adc	r30, r30
     e3a:	88 f7       	brcc	.-30     	; 0xe1e <__divsf3_pse+0x90>
     e3c:	e0 95       	com	r30
     e3e:	08 95       	ret

00000e40 <__fixsfsi>:
     e40:	04 d0       	rcall	.+8      	; 0xe4a <__fixunssfsi>
     e42:	68 94       	set
     e44:	b1 11       	cpse	r27, r1
     e46:	b5 c0       	rjmp	.+362    	; 0xfb2 <__fp_szero>
     e48:	08 95       	ret

00000e4a <__fixunssfsi>:
     e4a:	98 d0       	rcall	.+304    	; 0xf7c <__fp_splitA>
     e4c:	88 f0       	brcs	.+34     	; 0xe70 <__fixunssfsi+0x26>
     e4e:	9f 57       	subi	r25, 0x7F	; 127
     e50:	90 f0       	brcs	.+36     	; 0xe76 <__fixunssfsi+0x2c>
     e52:	b9 2f       	mov	r27, r25
     e54:	99 27       	eor	r25, r25
     e56:	b7 51       	subi	r27, 0x17	; 23
     e58:	a0 f0       	brcs	.+40     	; 0xe82 <__fixunssfsi+0x38>
     e5a:	d1 f0       	breq	.+52     	; 0xe90 <__fixunssfsi+0x46>
     e5c:	66 0f       	add	r22, r22
     e5e:	77 1f       	adc	r23, r23
     e60:	88 1f       	adc	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	1a f0       	brmi	.+6      	; 0xe6c <__fixunssfsi+0x22>
     e66:	ba 95       	dec	r27
     e68:	c9 f7       	brne	.-14     	; 0xe5c <__fixunssfsi+0x12>
     e6a:	12 c0       	rjmp	.+36     	; 0xe90 <__fixunssfsi+0x46>
     e6c:	b1 30       	cpi	r27, 0x01	; 1
     e6e:	81 f0       	breq	.+32     	; 0xe90 <__fixunssfsi+0x46>
     e70:	9f d0       	rcall	.+318    	; 0xfb0 <__fp_zero>
     e72:	b1 e0       	ldi	r27, 0x01	; 1
     e74:	08 95       	ret
     e76:	9c c0       	rjmp	.+312    	; 0xfb0 <__fp_zero>
     e78:	67 2f       	mov	r22, r23
     e7a:	78 2f       	mov	r23, r24
     e7c:	88 27       	eor	r24, r24
     e7e:	b8 5f       	subi	r27, 0xF8	; 248
     e80:	39 f0       	breq	.+14     	; 0xe90 <__fixunssfsi+0x46>
     e82:	b9 3f       	cpi	r27, 0xF9	; 249
     e84:	cc f3       	brlt	.-14     	; 0xe78 <__fixunssfsi+0x2e>
     e86:	86 95       	lsr	r24
     e88:	77 95       	ror	r23
     e8a:	67 95       	ror	r22
     e8c:	b3 95       	inc	r27
     e8e:	d9 f7       	brne	.-10     	; 0xe86 <__fixunssfsi+0x3c>
     e90:	3e f4       	brtc	.+14     	; 0xea0 <__fixunssfsi+0x56>
     e92:	90 95       	com	r25
     e94:	80 95       	com	r24
     e96:	70 95       	com	r23
     e98:	61 95       	neg	r22
     e9a:	7f 4f       	sbci	r23, 0xFF	; 255
     e9c:	8f 4f       	sbci	r24, 0xFF	; 255
     e9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ea0:	08 95       	ret

00000ea2 <__floatunsisf>:
     ea2:	e8 94       	clt
     ea4:	09 c0       	rjmp	.+18     	; 0xeb8 <__floatsisf+0x12>

00000ea6 <__floatsisf>:
     ea6:	97 fb       	bst	r25, 7
     ea8:	3e f4       	brtc	.+14     	; 0xeb8 <__floatsisf+0x12>
     eaa:	90 95       	com	r25
     eac:	80 95       	com	r24
     eae:	70 95       	com	r23
     eb0:	61 95       	neg	r22
     eb2:	7f 4f       	sbci	r23, 0xFF	; 255
     eb4:	8f 4f       	sbci	r24, 0xFF	; 255
     eb6:	9f 4f       	sbci	r25, 0xFF	; 255
     eb8:	99 23       	and	r25, r25
     eba:	a9 f0       	breq	.+42     	; 0xee6 <__floatsisf+0x40>
     ebc:	f9 2f       	mov	r31, r25
     ebe:	96 e9       	ldi	r25, 0x96	; 150
     ec0:	bb 27       	eor	r27, r27
     ec2:	93 95       	inc	r25
     ec4:	f6 95       	lsr	r31
     ec6:	87 95       	ror	r24
     ec8:	77 95       	ror	r23
     eca:	67 95       	ror	r22
     ecc:	b7 95       	ror	r27
     ece:	f1 11       	cpse	r31, r1
     ed0:	f8 cf       	rjmp	.-16     	; 0xec2 <__floatsisf+0x1c>
     ed2:	fa f4       	brpl	.+62     	; 0xf12 <__floatsisf+0x6c>
     ed4:	bb 0f       	add	r27, r27
     ed6:	11 f4       	brne	.+4      	; 0xedc <__floatsisf+0x36>
     ed8:	60 ff       	sbrs	r22, 0
     eda:	1b c0       	rjmp	.+54     	; 0xf12 <__floatsisf+0x6c>
     edc:	6f 5f       	subi	r22, 0xFF	; 255
     ede:	7f 4f       	sbci	r23, 0xFF	; 255
     ee0:	8f 4f       	sbci	r24, 0xFF	; 255
     ee2:	9f 4f       	sbci	r25, 0xFF	; 255
     ee4:	16 c0       	rjmp	.+44     	; 0xf12 <__floatsisf+0x6c>
     ee6:	88 23       	and	r24, r24
     ee8:	11 f0       	breq	.+4      	; 0xeee <__floatsisf+0x48>
     eea:	96 e9       	ldi	r25, 0x96	; 150
     eec:	11 c0       	rjmp	.+34     	; 0xf10 <__floatsisf+0x6a>
     eee:	77 23       	and	r23, r23
     ef0:	21 f0       	breq	.+8      	; 0xefa <__floatsisf+0x54>
     ef2:	9e e8       	ldi	r25, 0x8E	; 142
     ef4:	87 2f       	mov	r24, r23
     ef6:	76 2f       	mov	r23, r22
     ef8:	05 c0       	rjmp	.+10     	; 0xf04 <__floatsisf+0x5e>
     efa:	66 23       	and	r22, r22
     efc:	71 f0       	breq	.+28     	; 0xf1a <__floatsisf+0x74>
     efe:	96 e8       	ldi	r25, 0x86	; 134
     f00:	86 2f       	mov	r24, r22
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	60 e0       	ldi	r22, 0x00	; 0
     f06:	2a f0       	brmi	.+10     	; 0xf12 <__floatsisf+0x6c>
     f08:	9a 95       	dec	r25
     f0a:	66 0f       	add	r22, r22
     f0c:	77 1f       	adc	r23, r23
     f0e:	88 1f       	adc	r24, r24
     f10:	da f7       	brpl	.-10     	; 0xf08 <__floatsisf+0x62>
     f12:	88 0f       	add	r24, r24
     f14:	96 95       	lsr	r25
     f16:	87 95       	ror	r24
     f18:	97 f9       	bld	r25, 7
     f1a:	08 95       	ret

00000f1c <__fp_inf>:
     f1c:	97 f9       	bld	r25, 7
     f1e:	9f 67       	ori	r25, 0x7F	; 127
     f20:	80 e8       	ldi	r24, 0x80	; 128
     f22:	70 e0       	ldi	r23, 0x00	; 0
     f24:	60 e0       	ldi	r22, 0x00	; 0
     f26:	08 95       	ret

00000f28 <__fp_nan>:
     f28:	9f ef       	ldi	r25, 0xFF	; 255
     f2a:	80 ec       	ldi	r24, 0xC0	; 192
     f2c:	08 95       	ret

00000f2e <__fp_pscA>:
     f2e:	00 24       	eor	r0, r0
     f30:	0a 94       	dec	r0
     f32:	16 16       	cp	r1, r22
     f34:	17 06       	cpc	r1, r23
     f36:	18 06       	cpc	r1, r24
     f38:	09 06       	cpc	r0, r25
     f3a:	08 95       	ret

00000f3c <__fp_pscB>:
     f3c:	00 24       	eor	r0, r0
     f3e:	0a 94       	dec	r0
     f40:	12 16       	cp	r1, r18
     f42:	13 06       	cpc	r1, r19
     f44:	14 06       	cpc	r1, r20
     f46:	05 06       	cpc	r0, r21
     f48:	08 95       	ret

00000f4a <__fp_round>:
     f4a:	09 2e       	mov	r0, r25
     f4c:	03 94       	inc	r0
     f4e:	00 0c       	add	r0, r0
     f50:	11 f4       	brne	.+4      	; 0xf56 <__fp_round+0xc>
     f52:	88 23       	and	r24, r24
     f54:	52 f0       	brmi	.+20     	; 0xf6a <__fp_round+0x20>
     f56:	bb 0f       	add	r27, r27
     f58:	40 f4       	brcc	.+16     	; 0xf6a <__fp_round+0x20>
     f5a:	bf 2b       	or	r27, r31
     f5c:	11 f4       	brne	.+4      	; 0xf62 <__fp_round+0x18>
     f5e:	60 ff       	sbrs	r22, 0
     f60:	04 c0       	rjmp	.+8      	; 0xf6a <__fp_round+0x20>
     f62:	6f 5f       	subi	r22, 0xFF	; 255
     f64:	7f 4f       	sbci	r23, 0xFF	; 255
     f66:	8f 4f       	sbci	r24, 0xFF	; 255
     f68:	9f 4f       	sbci	r25, 0xFF	; 255
     f6a:	08 95       	ret

00000f6c <__fp_split3>:
     f6c:	57 fd       	sbrc	r21, 7
     f6e:	90 58       	subi	r25, 0x80	; 128
     f70:	44 0f       	add	r20, r20
     f72:	55 1f       	adc	r21, r21
     f74:	59 f0       	breq	.+22     	; 0xf8c <__fp_splitA+0x10>
     f76:	5f 3f       	cpi	r21, 0xFF	; 255
     f78:	71 f0       	breq	.+28     	; 0xf96 <__fp_splitA+0x1a>
     f7a:	47 95       	ror	r20

00000f7c <__fp_splitA>:
     f7c:	88 0f       	add	r24, r24
     f7e:	97 fb       	bst	r25, 7
     f80:	99 1f       	adc	r25, r25
     f82:	61 f0       	breq	.+24     	; 0xf9c <__fp_splitA+0x20>
     f84:	9f 3f       	cpi	r25, 0xFF	; 255
     f86:	79 f0       	breq	.+30     	; 0xfa6 <__fp_splitA+0x2a>
     f88:	87 95       	ror	r24
     f8a:	08 95       	ret
     f8c:	12 16       	cp	r1, r18
     f8e:	13 06       	cpc	r1, r19
     f90:	14 06       	cpc	r1, r20
     f92:	55 1f       	adc	r21, r21
     f94:	f2 cf       	rjmp	.-28     	; 0xf7a <__fp_split3+0xe>
     f96:	46 95       	lsr	r20
     f98:	f1 df       	rcall	.-30     	; 0xf7c <__fp_splitA>
     f9a:	08 c0       	rjmp	.+16     	; 0xfac <__fp_splitA+0x30>
     f9c:	16 16       	cp	r1, r22
     f9e:	17 06       	cpc	r1, r23
     fa0:	18 06       	cpc	r1, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	f1 cf       	rjmp	.-30     	; 0xf88 <__fp_splitA+0xc>
     fa6:	86 95       	lsr	r24
     fa8:	71 05       	cpc	r23, r1
     faa:	61 05       	cpc	r22, r1
     fac:	08 94       	sec
     fae:	08 95       	ret

00000fb0 <__fp_zero>:
     fb0:	e8 94       	clt

00000fb2 <__fp_szero>:
     fb2:	bb 27       	eor	r27, r27
     fb4:	66 27       	eor	r22, r22
     fb6:	77 27       	eor	r23, r23
     fb8:	cb 01       	movw	r24, r22
     fba:	97 f9       	bld	r25, 7
     fbc:	08 95       	ret

00000fbe <__mulsf3>:
     fbe:	0b d0       	rcall	.+22     	; 0xfd6 <__mulsf3x>
     fc0:	c4 cf       	rjmp	.-120    	; 0xf4a <__fp_round>
     fc2:	b5 df       	rcall	.-150    	; 0xf2e <__fp_pscA>
     fc4:	28 f0       	brcs	.+10     	; 0xfd0 <__mulsf3+0x12>
     fc6:	ba df       	rcall	.-140    	; 0xf3c <__fp_pscB>
     fc8:	18 f0       	brcs	.+6      	; 0xfd0 <__mulsf3+0x12>
     fca:	95 23       	and	r25, r21
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <__mulsf3+0x12>
     fce:	a6 cf       	rjmp	.-180    	; 0xf1c <__fp_inf>
     fd0:	ab cf       	rjmp	.-170    	; 0xf28 <__fp_nan>
     fd2:	11 24       	eor	r1, r1
     fd4:	ee cf       	rjmp	.-36     	; 0xfb2 <__fp_szero>

00000fd6 <__mulsf3x>:
     fd6:	ca df       	rcall	.-108    	; 0xf6c <__fp_split3>
     fd8:	a0 f3       	brcs	.-24     	; 0xfc2 <__mulsf3+0x4>

00000fda <__mulsf3_pse>:
     fda:	95 9f       	mul	r25, r21
     fdc:	d1 f3       	breq	.-12     	; 0xfd2 <__mulsf3+0x14>
     fde:	95 0f       	add	r25, r21
     fe0:	50 e0       	ldi	r21, 0x00	; 0
     fe2:	55 1f       	adc	r21, r21
     fe4:	62 9f       	mul	r22, r18
     fe6:	f0 01       	movw	r30, r0
     fe8:	72 9f       	mul	r23, r18
     fea:	bb 27       	eor	r27, r27
     fec:	f0 0d       	add	r31, r0
     fee:	b1 1d       	adc	r27, r1
     ff0:	63 9f       	mul	r22, r19
     ff2:	aa 27       	eor	r26, r26
     ff4:	f0 0d       	add	r31, r0
     ff6:	b1 1d       	adc	r27, r1
     ff8:	aa 1f       	adc	r26, r26
     ffa:	64 9f       	mul	r22, r20
     ffc:	66 27       	eor	r22, r22
     ffe:	b0 0d       	add	r27, r0
    1000:	a1 1d       	adc	r26, r1
    1002:	66 1f       	adc	r22, r22
    1004:	82 9f       	mul	r24, r18
    1006:	22 27       	eor	r18, r18
    1008:	b0 0d       	add	r27, r0
    100a:	a1 1d       	adc	r26, r1
    100c:	62 1f       	adc	r22, r18
    100e:	73 9f       	mul	r23, r19
    1010:	b0 0d       	add	r27, r0
    1012:	a1 1d       	adc	r26, r1
    1014:	62 1f       	adc	r22, r18
    1016:	83 9f       	mul	r24, r19
    1018:	a0 0d       	add	r26, r0
    101a:	61 1d       	adc	r22, r1
    101c:	22 1f       	adc	r18, r18
    101e:	74 9f       	mul	r23, r20
    1020:	33 27       	eor	r19, r19
    1022:	a0 0d       	add	r26, r0
    1024:	61 1d       	adc	r22, r1
    1026:	23 1f       	adc	r18, r19
    1028:	84 9f       	mul	r24, r20
    102a:	60 0d       	add	r22, r0
    102c:	21 1d       	adc	r18, r1
    102e:	82 2f       	mov	r24, r18
    1030:	76 2f       	mov	r23, r22
    1032:	6a 2f       	mov	r22, r26
    1034:	11 24       	eor	r1, r1
    1036:	9f 57       	subi	r25, 0x7F	; 127
    1038:	50 40       	sbci	r21, 0x00	; 0
    103a:	8a f0       	brmi	.+34     	; 0x105e <__mulsf3_pse+0x84>
    103c:	e1 f0       	breq	.+56     	; 0x1076 <__mulsf3_pse+0x9c>
    103e:	88 23       	and	r24, r24
    1040:	4a f0       	brmi	.+18     	; 0x1054 <__mulsf3_pse+0x7a>
    1042:	ee 0f       	add	r30, r30
    1044:	ff 1f       	adc	r31, r31
    1046:	bb 1f       	adc	r27, r27
    1048:	66 1f       	adc	r22, r22
    104a:	77 1f       	adc	r23, r23
    104c:	88 1f       	adc	r24, r24
    104e:	91 50       	subi	r25, 0x01	; 1
    1050:	50 40       	sbci	r21, 0x00	; 0
    1052:	a9 f7       	brne	.-22     	; 0x103e <__mulsf3_pse+0x64>
    1054:	9e 3f       	cpi	r25, 0xFE	; 254
    1056:	51 05       	cpc	r21, r1
    1058:	70 f0       	brcs	.+28     	; 0x1076 <__mulsf3_pse+0x9c>
    105a:	60 cf       	rjmp	.-320    	; 0xf1c <__fp_inf>
    105c:	aa cf       	rjmp	.-172    	; 0xfb2 <__fp_szero>
    105e:	5f 3f       	cpi	r21, 0xFF	; 255
    1060:	ec f3       	brlt	.-6      	; 0x105c <__mulsf3_pse+0x82>
    1062:	98 3e       	cpi	r25, 0xE8	; 232
    1064:	dc f3       	brlt	.-10     	; 0x105c <__mulsf3_pse+0x82>
    1066:	86 95       	lsr	r24
    1068:	77 95       	ror	r23
    106a:	67 95       	ror	r22
    106c:	b7 95       	ror	r27
    106e:	f7 95       	ror	r31
    1070:	e7 95       	ror	r30
    1072:	9f 5f       	subi	r25, 0xFF	; 255
    1074:	c1 f7       	brne	.-16     	; 0x1066 <__mulsf3_pse+0x8c>
    1076:	fe 2b       	or	r31, r30
    1078:	88 0f       	add	r24, r24
    107a:	91 1d       	adc	r25, r1
    107c:	96 95       	lsr	r25
    107e:	87 95       	ror	r24
    1080:	97 f9       	bld	r25, 7
    1082:	08 95       	ret

00001084 <__divmodhi4>:
    1084:	97 fb       	bst	r25, 7
    1086:	09 2e       	mov	r0, r25
    1088:	07 26       	eor	r0, r23
    108a:	0a d0       	rcall	.+20     	; 0x10a0 <__divmodhi4_neg1>
    108c:	77 fd       	sbrc	r23, 7
    108e:	04 d0       	rcall	.+8      	; 0x1098 <__divmodhi4_neg2>
    1090:	0c d0       	rcall	.+24     	; 0x10aa <__udivmodhi4>
    1092:	06 d0       	rcall	.+12     	; 0x10a0 <__divmodhi4_neg1>
    1094:	00 20       	and	r0, r0
    1096:	1a f4       	brpl	.+6      	; 0x109e <__divmodhi4_exit>

00001098 <__divmodhi4_neg2>:
    1098:	70 95       	com	r23
    109a:	61 95       	neg	r22
    109c:	7f 4f       	sbci	r23, 0xFF	; 255

0000109e <__divmodhi4_exit>:
    109e:	08 95       	ret

000010a0 <__divmodhi4_neg1>:
    10a0:	f6 f7       	brtc	.-4      	; 0x109e <__divmodhi4_exit>
    10a2:	90 95       	com	r25
    10a4:	81 95       	neg	r24
    10a6:	9f 4f       	sbci	r25, 0xFF	; 255
    10a8:	08 95       	ret

000010aa <__udivmodhi4>:
    10aa:	aa 1b       	sub	r26, r26
    10ac:	bb 1b       	sub	r27, r27
    10ae:	51 e1       	ldi	r21, 0x11	; 17
    10b0:	07 c0       	rjmp	.+14     	; 0x10c0 <__udivmodhi4_ep>

000010b2 <__udivmodhi4_loop>:
    10b2:	aa 1f       	adc	r26, r26
    10b4:	bb 1f       	adc	r27, r27
    10b6:	a6 17       	cp	r26, r22
    10b8:	b7 07       	cpc	r27, r23
    10ba:	10 f0       	brcs	.+4      	; 0x10c0 <__udivmodhi4_ep>
    10bc:	a6 1b       	sub	r26, r22
    10be:	b7 0b       	sbc	r27, r23

000010c0 <__udivmodhi4_ep>:
    10c0:	88 1f       	adc	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	5a 95       	dec	r21
    10c6:	a9 f7       	brne	.-22     	; 0x10b2 <__udivmodhi4_loop>
    10c8:	80 95       	com	r24
    10ca:	90 95       	com	r25
    10cc:	bc 01       	movw	r22, r24
    10ce:	cd 01       	movw	r24, r26
    10d0:	08 95       	ret

000010d2 <_exit>:
    10d2:	f8 94       	cli

000010d4 <__stop_program>:
    10d4:	ff cf       	rjmp	.-2      	; 0x10d4 <__stop_program>
