
AEL_VNT_Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000730  00800100  0000048a  000004fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000048a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000016e0  00000000  00000000  00000c30  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000522  00000000  00000000  00002310  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000100  00000000  00000000  00002838  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007b6  00000000  00000000  00002938  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002a5  00000000  00000000  000030ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004d9  00000000  00000000  00003393  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  0000386c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d0  00000000  00000000  00003928  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001d0  00000000  00000000  00003af8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	18 e0       	ldi	r17, 0x08	; 8
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e8       	ldi	r30, 0x8A	; 138
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 33       	cpi	r26, 0x30	; 48
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
  b4:	18 e0       	ldi	r17, 0x08	; 8
  b6:	a0 e3       	ldi	r26, 0x30	; 48
  b8:	b8 e0       	ldi	r27, 0x08	; 8
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a0 33       	cpi	r26, 0x30	; 48
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 bb 00 	call	0x176	; 0x176 <main>
  c8:	0c 94 43 02 	jmp	0x486	; 0x486 <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <adcPrepare>:
#include <avr/io.h>
#include <stdbool.h>

void adcPrepare()
{
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS0);
  d0:	85 e8       	ldi	r24, 0x85	; 133
  d2:	86 b9       	out	0x06, r24	; 6
	// ADEN: Set to turn on ADC , by default it is turned off
	//ADPS2: ADPS2 and ADPS0 set to make division factor 32
}
  d4:	08 95       	ret

000000d6 <adcPrepare2>:

void adcPrepare2()
{
	ADMUX = 0x00;                                  //Select channel 0
  d6:	17 b8       	out	0x07, r1	; 7
	ADMUX|= (1<<REFS0)|(1<<REFS1);            // select voltage refrence for ADC
  d8:	87 b1       	in	r24, 0x07	; 7
  da:	80 6c       	ori	r24, 0xC0	; 192
  dc:	87 b9       	out	0x07, r24	; 7

	ADCSRA= (1<<ADEN);
  de:	80 e8       	ldi	r24, 0x80	; 128
  e0:	86 b9       	out	0x06, r24	; 6
	ADCSRA= (1<<ADSC);
  e2:	80 e4       	ldi	r24, 0x40	; 64
  e4:	86 b9       	out	0x06, r24	; 6
	ADCSRA= (1<<ADPS0)|(1<<ADPS1);             //Enable ADC & start 1st
  e6:	83 e0       	ldi	r24, 0x03	; 3
  e8:	86 b9       	out	0x06, r24	; 6
	ADCSRA= (1<<ADFR);
  ea:	80 e2       	ldi	r24, 0x20	; 32
  ec:	86 b9       	out	0x06, r24	; 6
	//dummy
	//conversion
	//Set ADC module prescalar
	//to 8 critical for
	//accurate ADC results
	while ((ADCSRA & ADIF));                      //Check if conversation is //ready
  ee:	32 99       	sbic	0x06, 2	; 6
  f0:	fe cf       	rjmp	.-4      	; 0xee <adcPrepare2+0x18>

	ADCSRA |= ADIF;
  f2:	32 9a       	sbi	0x06, 2	; 6
}
  f4:	08 95       	ret

000000f6 <getAdcVoltage>:

int getAdcVoltage(uint8_t adcSignal)
{
	// Veikimas : paduot reikia is kurio adc kanalo reik perskaityt, apibrezta konstantose
	ADMUX = adcSignal;
  f6:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC); // Start conversion
  f8:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC)); // wait for conversion to complete
  fa:	36 99       	sbic	0x06, 6	; 6
  fc:	fe cf       	rjmp	.-4      	; 0xfa <getAdcVoltage+0x4>

	return ADC*0.0045*100;
  fe:	64 b1       	in	r22, 0x04	; 4
 100:	75 b1       	in	r23, 0x05	; 5
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 2b 01 	call	0x256	; 0x256 <__floatunsisf>
 10a:	2c eb       	ldi	r18, 0xBC	; 188
 10c:	34 e7       	ldi	r19, 0x74	; 116
 10e:	43 e9       	ldi	r20, 0x93	; 147
 110:	5b e3       	ldi	r21, 0x3B	; 59
 112:	0e 94 91 01 	call	0x322	; 0x322 <__mulsf3>
 116:	20 e0       	ldi	r18, 0x00	; 0
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	48 ec       	ldi	r20, 0xC8	; 200
 11c:	52 e4       	ldi	r21, 0x42	; 66
 11e:	0e 94 91 01 	call	0x322	; 0x322 <__mulsf3>
 122:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <__fixsfsi>
	
	
	
	
	
}
 126:	86 2f       	mov	r24, r22
 128:	97 2f       	mov	r25, r23
 12a:	08 95       	ret

0000012c <getADC>:

int getADC(uint8_t adcSignal)
{   int temp=0 ;
 12c:	24 e1       	ldi	r18, 0x14	; 20
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	40 e0       	ldi	r20, 0x00	; 0
 132:	50 e0       	ldi	r21, 0x00	; 0
	bool b= true;
	int x;
	for(int i =0; i<20; i++)
	{
		ADMUX = adcSignal;
 134:	87 b9       	out	0x07, r24	; 7
		ADCSRA |= (1<<ADSC); // Start conversion
 136:	36 9a       	sbi	0x06, 6	; 6
		while (ADCSRA & (1<<ADSC)); // wait for conversion to complete
 138:	36 99       	sbic	0x06, 6	; 6
 13a:	fe cf       	rjmp	.-4      	; 0x138 <getADC+0xc>
		temp = temp +ADC;
 13c:	64 b1       	in	r22, 0x04	; 4
 13e:	75 b1       	in	r23, 0x05	; 5
 140:	46 0f       	add	r20, r22
 142:	57 1f       	adc	r21, r23
 144:	21 50       	subi	r18, 0x01	; 1
 146:	30 40       	sbci	r19, 0x00	; 0

int getADC(uint8_t adcSignal)
{   int temp=0 ;
	bool b= true;
	int x;
	for(int i =0; i<20; i++)
 148:	a9 f7       	brne	.-22     	; 0x134 <getADC+0x8>
		ADMUX = adcSignal;
		ADCSRA |= (1<<ADSC); // Start conversion
		while (ADCSRA & (1<<ADSC)); // wait for conversion to complete
		temp = temp +ADC;
	}
	return temp/20;
 14a:	ca 01       	movw	r24, r20
 14c:	64 e1       	ldi	r22, 0x14	; 20
 14e:	70 e0       	ldi	r23, 0x00	; 0
 150:	0e 94 1c 02 	call	0x438	; 0x438 <__divmodhi4>
 154:	86 2f       	mov	r24, r22
 156:	97 2f       	mov	r25, r23
			//}
		//}
		//
	//}
	//return temp[4];
}
 158:	08 95       	ret

0000015a <ReadADC>:
{
	unsigned int binary_weighted_voltage;
	unsigned binary_weighted_voltage_low;
	unsigned int binary_weighted_voltage_high;                  //weighted binary //voltage
	
	ADMUX = channel;               //Select channel
 15a:	87 b9       	out	0x07, r24	; 7
	ADCSRA= (1<<ADEN)|(1<<ADSC)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADFR);      //Start conversion
 15c:	83 ee       	ldi	r24, 0xE3	; 227
 15e:	86 b9       	out	0x06, r24	; 6
	//Set ADC module prescalar
	//to 8 critical for
	while(1)
	{                             //accurate ADC results
		while ((ADCSRA & ADIF));                 //Check if converstion is //ready
 160:	32 99       	sbic	0x06, 2	; 6
 162:	fe cf       	rjmp	.-4      	; 0x160 <ReadADC+0x6>
		ADCSRA |= ADIF;                            //Clear Conv rdy flag - set
 164:	32 9a       	sbi	0x06, 2	; 6
		//the bit
		binary_weighted_voltage_low = ADCL;      //Read 8 low bits first
 166:	84 b1       	in	r24, 0x04	; 4
		
		//(important)
		//Read 2 high bits,
		//multiply by 256
		binary_weighted_voltage_high = ((unsigned int)(ADCH << 8));
 168:	95 b1       	in	r25, 0x05	; 5
 16a:	39 2f       	mov	r19, r25
 16c:	20 e0       	ldi	r18, 0x00	; 0
	while(1)
	{                             //accurate ADC results
		while ((ADCSRA & ADIF));                 //Check if converstion is //ready
		ADCSRA |= ADIF;                            //Clear Conv rdy flag - set
		//the bit
		binary_weighted_voltage_low = ADCL;      //Read 8 low bits first
 16e:	90 e0       	ldi	r25, 0x00	; 0
		
		//(important)
		//Read 2 high bits,
		//multiply by 256
		binary_weighted_voltage_high = ((unsigned int)(ADCH << 8));
		binary_weighted_voltage = binary_weighted_voltage_low | binary_weighted_voltage_high;
 170:	82 2b       	or	r24, r18
 172:	93 2b       	or	r25, r19
		return binary_weighted_voltage;                 //ADCH:ADCL
	}}
 174:	08 95       	ret

00000176 <main>:
#include <avr/io.h>
#include "HeaderFiles/TestMap.h"
#include "HeaderFiles/MapPeriferals.h"

int main(void)
{
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	00 d0       	rcall	.+0      	; 0x17c <main+0x6>
 17c:	cd b7       	in	r28, 0x3d	; 61
 17e:	de b7       	in	r29, 0x3e	; 62
    while(1)
    {
        //TODO:: Please write your application code 
		volatile int b =0;
 180:	1a 82       	std	Y+2, r1	; 0x02
 182:	19 82       	std	Y+1, r1	; 0x01
		b =GetPressureFromMap(10, 2000);
 184:	8a e0       	ldi	r24, 0x0A	; 10
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	60 ed       	ldi	r22, 0xD0	; 208
 18a:	77 e0       	ldi	r23, 0x07	; 7
 18c:	0e 94 cb 00 	call	0x196	; 0x196 <GetPressureFromMap>
 190:	9a 83       	std	Y+2, r25	; 0x02
 192:	89 83       	std	Y+1, r24	; 0x01
 194:	f5 cf       	rjmp	.-22     	; 0x180 <main+0xa>

00000196 <GetPressureFromMap>:
#include "HeaderFiles/TestMap.h"

int GetPressureFromMap(int pedalPos, int rpm)
{
 196:	fc 01       	movw	r30, r24
 198:	9b 01       	movw	r18, r22
	if (rpm % 100 > 49) 
 19a:	cb 01       	movw	r24, r22
 19c:	64 e6       	ldi	r22, 0x64	; 100
 19e:	70 e0       	ldi	r23, 0x00	; 0
 1a0:	0e 94 1c 02 	call	0x438	; 0x438 <__divmodhi4>
 1a4:	82 33       	cpi	r24, 0x32	; 50
 1a6:	91 05       	cpc	r25, r1
 1a8:	14 f0       	brlt	.+4      	; 0x1ae <GetPressureFromMap+0x18>
		rpm = rpm+100;
 1aa:	2c 59       	subi	r18, 0x9C	; 156
 1ac:	3f 4f       	sbci	r19, 0xFF	; 255
	
	rpm = (rpm/100)-9;
 1ae:	c9 01       	movw	r24, r18
 1b0:	64 e6       	ldi	r22, 0x64	; 100
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	0e 94 1c 02 	call	0x438	; 0x438 <__divmodhi4>
 1b8:	9b 01       	movw	r18, r22
 1ba:	29 50       	subi	r18, 0x09	; 9
 1bc:	30 40       	sbci	r19, 0x00	; 0
	pedalPos = (pedalPos/5);
 1be:	cf 01       	movw	r24, r30
 1c0:	65 e0       	ldi	r22, 0x05	; 5
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	0e 94 1c 02 	call	0x438	; 0x438 <__divmodhi4>

return TestMapA[rpm][pedalPos];
 1c8:	c9 01       	movw	r24, r18
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	fc 01       	movw	r30, r24
 1d4:	ee 0f       	add	r30, r30
 1d6:	ff 1f       	adc	r31, r31
 1d8:	ee 0f       	add	r30, r30
 1da:	ff 1f       	adc	r31, r31
 1dc:	8e 0f       	add	r24, r30
 1de:	9f 1f       	adc	r25, r31
 1e0:	68 0f       	add	r22, r24
 1e2:	79 1f       	adc	r23, r25
 1e4:	fb 01       	movw	r30, r22
 1e6:	ee 0f       	add	r30, r30
 1e8:	ff 1f       	adc	r31, r31
 1ea:	e0 50       	subi	r30, 0x00	; 0
 1ec:	ff 4f       	sbci	r31, 0xFF	; 255
 1ee:	80 81       	ld	r24, Z
 1f0:	91 81       	ldd	r25, Z+1	; 0x01
 1f2:	08 95       	ret

000001f4 <__fixsfsi>:
 1f4:	04 d0       	rcall	.+8      	; 0x1fe <__fixunssfsi>
 1f6:	68 94       	set
 1f8:	b1 11       	cpse	r27, r1
 1fa:	8d c0       	rjmp	.+282    	; 0x316 <__fp_szero>
 1fc:	08 95       	ret

000001fe <__fixunssfsi>:
 1fe:	70 d0       	rcall	.+224    	; 0x2e0 <__fp_splitA>
 200:	88 f0       	brcs	.+34     	; 0x224 <__fixunssfsi+0x26>
 202:	9f 57       	subi	r25, 0x7F	; 127
 204:	90 f0       	brcs	.+36     	; 0x22a <__fixunssfsi+0x2c>
 206:	b9 2f       	mov	r27, r25
 208:	99 27       	eor	r25, r25
 20a:	b7 51       	subi	r27, 0x17	; 23
 20c:	a0 f0       	brcs	.+40     	; 0x236 <__fixunssfsi+0x38>
 20e:	d1 f0       	breq	.+52     	; 0x244 <__fixunssfsi+0x46>
 210:	66 0f       	add	r22, r22
 212:	77 1f       	adc	r23, r23
 214:	88 1f       	adc	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	1a f0       	brmi	.+6      	; 0x220 <__fixunssfsi+0x22>
 21a:	ba 95       	dec	r27
 21c:	c9 f7       	brne	.-14     	; 0x210 <__fixunssfsi+0x12>
 21e:	12 c0       	rjmp	.+36     	; 0x244 <__fixunssfsi+0x46>
 220:	b1 30       	cpi	r27, 0x01	; 1
 222:	81 f0       	breq	.+32     	; 0x244 <__fixunssfsi+0x46>
 224:	77 d0       	rcall	.+238    	; 0x314 <__fp_zero>
 226:	b1 e0       	ldi	r27, 0x01	; 1
 228:	08 95       	ret
 22a:	74 c0       	rjmp	.+232    	; 0x314 <__fp_zero>
 22c:	67 2f       	mov	r22, r23
 22e:	78 2f       	mov	r23, r24
 230:	88 27       	eor	r24, r24
 232:	b8 5f       	subi	r27, 0xF8	; 248
 234:	39 f0       	breq	.+14     	; 0x244 <__fixunssfsi+0x46>
 236:	b9 3f       	cpi	r27, 0xF9	; 249
 238:	cc f3       	brlt	.-14     	; 0x22c <__fixunssfsi+0x2e>
 23a:	86 95       	lsr	r24
 23c:	77 95       	ror	r23
 23e:	67 95       	ror	r22
 240:	b3 95       	inc	r27
 242:	d9 f7       	brne	.-10     	; 0x23a <__fixunssfsi+0x3c>
 244:	3e f4       	brtc	.+14     	; 0x254 <__fixunssfsi+0x56>
 246:	90 95       	com	r25
 248:	80 95       	com	r24
 24a:	70 95       	com	r23
 24c:	61 95       	neg	r22
 24e:	7f 4f       	sbci	r23, 0xFF	; 255
 250:	8f 4f       	sbci	r24, 0xFF	; 255
 252:	9f 4f       	sbci	r25, 0xFF	; 255
 254:	08 95       	ret

00000256 <__floatunsisf>:
 256:	e8 94       	clt
 258:	09 c0       	rjmp	.+18     	; 0x26c <__floatsisf+0x12>

0000025a <__floatsisf>:
 25a:	97 fb       	bst	r25, 7
 25c:	3e f4       	brtc	.+14     	; 0x26c <__floatsisf+0x12>
 25e:	90 95       	com	r25
 260:	80 95       	com	r24
 262:	70 95       	com	r23
 264:	61 95       	neg	r22
 266:	7f 4f       	sbci	r23, 0xFF	; 255
 268:	8f 4f       	sbci	r24, 0xFF	; 255
 26a:	9f 4f       	sbci	r25, 0xFF	; 255
 26c:	99 23       	and	r25, r25
 26e:	a9 f0       	breq	.+42     	; 0x29a <__floatsisf+0x40>
 270:	f9 2f       	mov	r31, r25
 272:	96 e9       	ldi	r25, 0x96	; 150
 274:	bb 27       	eor	r27, r27
 276:	93 95       	inc	r25
 278:	f6 95       	lsr	r31
 27a:	87 95       	ror	r24
 27c:	77 95       	ror	r23
 27e:	67 95       	ror	r22
 280:	b7 95       	ror	r27
 282:	f1 11       	cpse	r31, r1
 284:	f8 cf       	rjmp	.-16     	; 0x276 <__floatsisf+0x1c>
 286:	fa f4       	brpl	.+62     	; 0x2c6 <__floatsisf+0x6c>
 288:	bb 0f       	add	r27, r27
 28a:	11 f4       	brne	.+4      	; 0x290 <__floatsisf+0x36>
 28c:	60 ff       	sbrs	r22, 0
 28e:	1b c0       	rjmp	.+54     	; 0x2c6 <__floatsisf+0x6c>
 290:	6f 5f       	subi	r22, 0xFF	; 255
 292:	7f 4f       	sbci	r23, 0xFF	; 255
 294:	8f 4f       	sbci	r24, 0xFF	; 255
 296:	9f 4f       	sbci	r25, 0xFF	; 255
 298:	16 c0       	rjmp	.+44     	; 0x2c6 <__floatsisf+0x6c>
 29a:	88 23       	and	r24, r24
 29c:	11 f0       	breq	.+4      	; 0x2a2 <__floatsisf+0x48>
 29e:	96 e9       	ldi	r25, 0x96	; 150
 2a0:	11 c0       	rjmp	.+34     	; 0x2c4 <__floatsisf+0x6a>
 2a2:	77 23       	and	r23, r23
 2a4:	21 f0       	breq	.+8      	; 0x2ae <__floatsisf+0x54>
 2a6:	9e e8       	ldi	r25, 0x8E	; 142
 2a8:	87 2f       	mov	r24, r23
 2aa:	76 2f       	mov	r23, r22
 2ac:	05 c0       	rjmp	.+10     	; 0x2b8 <__floatsisf+0x5e>
 2ae:	66 23       	and	r22, r22
 2b0:	71 f0       	breq	.+28     	; 0x2ce <__floatsisf+0x74>
 2b2:	96 e8       	ldi	r25, 0x86	; 134
 2b4:	86 2f       	mov	r24, r22
 2b6:	70 e0       	ldi	r23, 0x00	; 0
 2b8:	60 e0       	ldi	r22, 0x00	; 0
 2ba:	2a f0       	brmi	.+10     	; 0x2c6 <__floatsisf+0x6c>
 2bc:	9a 95       	dec	r25
 2be:	66 0f       	add	r22, r22
 2c0:	77 1f       	adc	r23, r23
 2c2:	88 1f       	adc	r24, r24
 2c4:	da f7       	brpl	.-10     	; 0x2bc <__floatsisf+0x62>
 2c6:	88 0f       	add	r24, r24
 2c8:	96 95       	lsr	r25
 2ca:	87 95       	ror	r24
 2cc:	97 f9       	bld	r25, 7
 2ce:	08 95       	ret

000002d0 <__fp_split3>:
 2d0:	57 fd       	sbrc	r21, 7
 2d2:	90 58       	subi	r25, 0x80	; 128
 2d4:	44 0f       	add	r20, r20
 2d6:	55 1f       	adc	r21, r21
 2d8:	59 f0       	breq	.+22     	; 0x2f0 <__fp_splitA+0x10>
 2da:	5f 3f       	cpi	r21, 0xFF	; 255
 2dc:	71 f0       	breq	.+28     	; 0x2fa <__fp_splitA+0x1a>
 2de:	47 95       	ror	r20

000002e0 <__fp_splitA>:
 2e0:	88 0f       	add	r24, r24
 2e2:	97 fb       	bst	r25, 7
 2e4:	99 1f       	adc	r25, r25
 2e6:	61 f0       	breq	.+24     	; 0x300 <__fp_splitA+0x20>
 2e8:	9f 3f       	cpi	r25, 0xFF	; 255
 2ea:	79 f0       	breq	.+30     	; 0x30a <__fp_splitA+0x2a>
 2ec:	87 95       	ror	r24
 2ee:	08 95       	ret
 2f0:	12 16       	cp	r1, r18
 2f2:	13 06       	cpc	r1, r19
 2f4:	14 06       	cpc	r1, r20
 2f6:	55 1f       	adc	r21, r21
 2f8:	f2 cf       	rjmp	.-28     	; 0x2de <__fp_split3+0xe>
 2fa:	46 95       	lsr	r20
 2fc:	f1 df       	rcall	.-30     	; 0x2e0 <__fp_splitA>
 2fe:	08 c0       	rjmp	.+16     	; 0x310 <__fp_splitA+0x30>
 300:	16 16       	cp	r1, r22
 302:	17 06       	cpc	r1, r23
 304:	18 06       	cpc	r1, r24
 306:	99 1f       	adc	r25, r25
 308:	f1 cf       	rjmp	.-30     	; 0x2ec <__fp_splitA+0xc>
 30a:	86 95       	lsr	r24
 30c:	71 05       	cpc	r23, r1
 30e:	61 05       	cpc	r22, r1
 310:	08 94       	sec
 312:	08 95       	ret

00000314 <__fp_zero>:
 314:	e8 94       	clt

00000316 <__fp_szero>:
 316:	bb 27       	eor	r27, r27
 318:	66 27       	eor	r22, r22
 31a:	77 27       	eor	r23, r23
 31c:	cb 01       	movw	r24, r22
 31e:	97 f9       	bld	r25, 7
 320:	08 95       	ret

00000322 <__mulsf3>:
 322:	0b d0       	rcall	.+22     	; 0x33a <__mulsf3x>
 324:	78 c0       	rjmp	.+240    	; 0x416 <__fp_round>
 326:	69 d0       	rcall	.+210    	; 0x3fa <__fp_pscA>
 328:	28 f0       	brcs	.+10     	; 0x334 <__mulsf3+0x12>
 32a:	6e d0       	rcall	.+220    	; 0x408 <__fp_pscB>
 32c:	18 f0       	brcs	.+6      	; 0x334 <__mulsf3+0x12>
 32e:	95 23       	and	r25, r21
 330:	09 f0       	breq	.+2      	; 0x334 <__mulsf3+0x12>
 332:	5a c0       	rjmp	.+180    	; 0x3e8 <__fp_inf>
 334:	5f c0       	rjmp	.+190    	; 0x3f4 <__fp_nan>
 336:	11 24       	eor	r1, r1
 338:	ee cf       	rjmp	.-36     	; 0x316 <__fp_szero>

0000033a <__mulsf3x>:
 33a:	ca df       	rcall	.-108    	; 0x2d0 <__fp_split3>
 33c:	a0 f3       	brcs	.-24     	; 0x326 <__mulsf3+0x4>

0000033e <__mulsf3_pse>:
 33e:	95 9f       	mul	r25, r21
 340:	d1 f3       	breq	.-12     	; 0x336 <__mulsf3+0x14>
 342:	95 0f       	add	r25, r21
 344:	50 e0       	ldi	r21, 0x00	; 0
 346:	55 1f       	adc	r21, r21
 348:	62 9f       	mul	r22, r18
 34a:	f0 01       	movw	r30, r0
 34c:	72 9f       	mul	r23, r18
 34e:	bb 27       	eor	r27, r27
 350:	f0 0d       	add	r31, r0
 352:	b1 1d       	adc	r27, r1
 354:	63 9f       	mul	r22, r19
 356:	aa 27       	eor	r26, r26
 358:	f0 0d       	add	r31, r0
 35a:	b1 1d       	adc	r27, r1
 35c:	aa 1f       	adc	r26, r26
 35e:	64 9f       	mul	r22, r20
 360:	66 27       	eor	r22, r22
 362:	b0 0d       	add	r27, r0
 364:	a1 1d       	adc	r26, r1
 366:	66 1f       	adc	r22, r22
 368:	82 9f       	mul	r24, r18
 36a:	22 27       	eor	r18, r18
 36c:	b0 0d       	add	r27, r0
 36e:	a1 1d       	adc	r26, r1
 370:	62 1f       	adc	r22, r18
 372:	73 9f       	mul	r23, r19
 374:	b0 0d       	add	r27, r0
 376:	a1 1d       	adc	r26, r1
 378:	62 1f       	adc	r22, r18
 37a:	83 9f       	mul	r24, r19
 37c:	a0 0d       	add	r26, r0
 37e:	61 1d       	adc	r22, r1
 380:	22 1f       	adc	r18, r18
 382:	74 9f       	mul	r23, r20
 384:	33 27       	eor	r19, r19
 386:	a0 0d       	add	r26, r0
 388:	61 1d       	adc	r22, r1
 38a:	23 1f       	adc	r18, r19
 38c:	84 9f       	mul	r24, r20
 38e:	60 0d       	add	r22, r0
 390:	21 1d       	adc	r18, r1
 392:	82 2f       	mov	r24, r18
 394:	76 2f       	mov	r23, r22
 396:	6a 2f       	mov	r22, r26
 398:	11 24       	eor	r1, r1
 39a:	9f 57       	subi	r25, 0x7F	; 127
 39c:	50 40       	sbci	r21, 0x00	; 0
 39e:	8a f0       	brmi	.+34     	; 0x3c2 <__mulsf3_pse+0x84>
 3a0:	e1 f0       	breq	.+56     	; 0x3da <__mulsf3_pse+0x9c>
 3a2:	88 23       	and	r24, r24
 3a4:	4a f0       	brmi	.+18     	; 0x3b8 <__mulsf3_pse+0x7a>
 3a6:	ee 0f       	add	r30, r30
 3a8:	ff 1f       	adc	r31, r31
 3aa:	bb 1f       	adc	r27, r27
 3ac:	66 1f       	adc	r22, r22
 3ae:	77 1f       	adc	r23, r23
 3b0:	88 1f       	adc	r24, r24
 3b2:	91 50       	subi	r25, 0x01	; 1
 3b4:	50 40       	sbci	r21, 0x00	; 0
 3b6:	a9 f7       	brne	.-22     	; 0x3a2 <__mulsf3_pse+0x64>
 3b8:	9e 3f       	cpi	r25, 0xFE	; 254
 3ba:	51 05       	cpc	r21, r1
 3bc:	70 f0       	brcs	.+28     	; 0x3da <__mulsf3_pse+0x9c>
 3be:	14 c0       	rjmp	.+40     	; 0x3e8 <__fp_inf>
 3c0:	aa cf       	rjmp	.-172    	; 0x316 <__fp_szero>
 3c2:	5f 3f       	cpi	r21, 0xFF	; 255
 3c4:	ec f3       	brlt	.-6      	; 0x3c0 <__mulsf3_pse+0x82>
 3c6:	98 3e       	cpi	r25, 0xE8	; 232
 3c8:	dc f3       	brlt	.-10     	; 0x3c0 <__mulsf3_pse+0x82>
 3ca:	86 95       	lsr	r24
 3cc:	77 95       	ror	r23
 3ce:	67 95       	ror	r22
 3d0:	b7 95       	ror	r27
 3d2:	f7 95       	ror	r31
 3d4:	e7 95       	ror	r30
 3d6:	9f 5f       	subi	r25, 0xFF	; 255
 3d8:	c1 f7       	brne	.-16     	; 0x3ca <__mulsf3_pse+0x8c>
 3da:	fe 2b       	or	r31, r30
 3dc:	88 0f       	add	r24, r24
 3de:	91 1d       	adc	r25, r1
 3e0:	96 95       	lsr	r25
 3e2:	87 95       	ror	r24
 3e4:	97 f9       	bld	r25, 7
 3e6:	08 95       	ret

000003e8 <__fp_inf>:
 3e8:	97 f9       	bld	r25, 7
 3ea:	9f 67       	ori	r25, 0x7F	; 127
 3ec:	80 e8       	ldi	r24, 0x80	; 128
 3ee:	70 e0       	ldi	r23, 0x00	; 0
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	08 95       	ret

000003f4 <__fp_nan>:
 3f4:	9f ef       	ldi	r25, 0xFF	; 255
 3f6:	80 ec       	ldi	r24, 0xC0	; 192
 3f8:	08 95       	ret

000003fa <__fp_pscA>:
 3fa:	00 24       	eor	r0, r0
 3fc:	0a 94       	dec	r0
 3fe:	16 16       	cp	r1, r22
 400:	17 06       	cpc	r1, r23
 402:	18 06       	cpc	r1, r24
 404:	09 06       	cpc	r0, r25
 406:	08 95       	ret

00000408 <__fp_pscB>:
 408:	00 24       	eor	r0, r0
 40a:	0a 94       	dec	r0
 40c:	12 16       	cp	r1, r18
 40e:	13 06       	cpc	r1, r19
 410:	14 06       	cpc	r1, r20
 412:	05 06       	cpc	r0, r21
 414:	08 95       	ret

00000416 <__fp_round>:
 416:	09 2e       	mov	r0, r25
 418:	03 94       	inc	r0
 41a:	00 0c       	add	r0, r0
 41c:	11 f4       	brne	.+4      	; 0x422 <__fp_round+0xc>
 41e:	88 23       	and	r24, r24
 420:	52 f0       	brmi	.+20     	; 0x436 <__fp_round+0x20>
 422:	bb 0f       	add	r27, r27
 424:	40 f4       	brcc	.+16     	; 0x436 <__fp_round+0x20>
 426:	bf 2b       	or	r27, r31
 428:	11 f4       	brne	.+4      	; 0x42e <__fp_round+0x18>
 42a:	60 ff       	sbrs	r22, 0
 42c:	04 c0       	rjmp	.+8      	; 0x436 <__fp_round+0x20>
 42e:	6f 5f       	subi	r22, 0xFF	; 255
 430:	7f 4f       	sbci	r23, 0xFF	; 255
 432:	8f 4f       	sbci	r24, 0xFF	; 255
 434:	9f 4f       	sbci	r25, 0xFF	; 255
 436:	08 95       	ret

00000438 <__divmodhi4>:
 438:	97 fb       	bst	r25, 7
 43a:	09 2e       	mov	r0, r25
 43c:	07 26       	eor	r0, r23
 43e:	0a d0       	rcall	.+20     	; 0x454 <__divmodhi4_neg1>
 440:	77 fd       	sbrc	r23, 7
 442:	04 d0       	rcall	.+8      	; 0x44c <__divmodhi4_neg2>
 444:	0c d0       	rcall	.+24     	; 0x45e <__udivmodhi4>
 446:	06 d0       	rcall	.+12     	; 0x454 <__divmodhi4_neg1>
 448:	00 20       	and	r0, r0
 44a:	1a f4       	brpl	.+6      	; 0x452 <__divmodhi4_exit>

0000044c <__divmodhi4_neg2>:
 44c:	70 95       	com	r23
 44e:	61 95       	neg	r22
 450:	7f 4f       	sbci	r23, 0xFF	; 255

00000452 <__divmodhi4_exit>:
 452:	08 95       	ret

00000454 <__divmodhi4_neg1>:
 454:	f6 f7       	brtc	.-4      	; 0x452 <__divmodhi4_exit>
 456:	90 95       	com	r25
 458:	81 95       	neg	r24
 45a:	9f 4f       	sbci	r25, 0xFF	; 255
 45c:	08 95       	ret

0000045e <__udivmodhi4>:
 45e:	aa 1b       	sub	r26, r26
 460:	bb 1b       	sub	r27, r27
 462:	51 e1       	ldi	r21, 0x11	; 17
 464:	07 c0       	rjmp	.+14     	; 0x474 <__udivmodhi4_ep>

00000466 <__udivmodhi4_loop>:
 466:	aa 1f       	adc	r26, r26
 468:	bb 1f       	adc	r27, r27
 46a:	a6 17       	cp	r26, r22
 46c:	b7 07       	cpc	r27, r23
 46e:	10 f0       	brcs	.+4      	; 0x474 <__udivmodhi4_ep>
 470:	a6 1b       	sub	r26, r22
 472:	b7 0b       	sbc	r27, r23

00000474 <__udivmodhi4_ep>:
 474:	88 1f       	adc	r24, r24
 476:	99 1f       	adc	r25, r25
 478:	5a 95       	dec	r21
 47a:	a9 f7       	brne	.-22     	; 0x466 <__udivmodhi4_loop>
 47c:	80 95       	com	r24
 47e:	90 95       	com	r25
 480:	bc 01       	movw	r22, r24
 482:	cd 01       	movw	r24, r26
 484:	08 95       	ret

00000486 <_exit>:
 486:	f8 94       	cli

00000488 <__stop_program>:
 488:	ff cf       	rjmp	.-2      	; 0x488 <__stop_program>
