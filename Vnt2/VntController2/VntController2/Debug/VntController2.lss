
VntController2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ac  00800100  0000100e  000010a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000100e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  008001ac  008001ac  0000114e  2**0
                  ALLOC
  3 .stab         00002664  00000000  00000000  00001150  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000832  00000000  00000000  000037b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00003fe8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013ef  00000000  00000000  00004188  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007aa  00000000  00000000  00005577  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bf0  00000000  00000000  00005d21  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000037c  00000000  00000000  00006914  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000442  00000000  00000000  00006c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000833  00000000  00000000  000070d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00007905  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      30:	0c 94 24 01 	jmp	0x248	; 0x248 <__vector_12>
      34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      68:	0c 94 1a 01 	jmp	0x234	; 0x234 <__vector_26>
      6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee e0       	ldi	r30, 0x0E	; 14
      a0:	f0 e1       	ldi	r31, 0x10	; 16
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 3a       	cpi	r26, 0xAC	; 172
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
      b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
      b4:	11 e0       	ldi	r17, 0x01	; 1
      b6:	ac ea       	ldi	r26, 0xAC	; 172
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
      bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
      be:	a3 3c       	cpi	r26, 0xC3	; 195
      c0:	b1 07       	cpc	r27, r17
      c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
      c4:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <main>
      c8:	0c 94 05 08 	jmp	0x100a	; 0x100a <_exit>

000000cc <__bad_interrupt>:
      cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <adcPrepare>:
#include <avr/io.h>
#include <stdbool.h>

void adcPrepare()
{
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS0);
      d0:	85 e8       	ldi	r24, 0x85	; 133
      d2:	86 b9       	out	0x06, r24	; 6
	// ADEN: Set to turn on ADC , by default it is turned off
	//ADPS2: ADPS2 and ADPS0 set to make division factor 32
}
      d4:	08 95       	ret

000000d6 <adcPrepare2>:

void adcPrepare2()
{
	ADMUX = 0x00;                                  //Select channel 0
      d6:	17 b8       	out	0x07, r1	; 7
	ADMUX|= (1<<REFS0)|(1<<REFS1);            // select voltage refrence for ADC
      d8:	87 b1       	in	r24, 0x07	; 7
      da:	80 6c       	ori	r24, 0xC0	; 192
      dc:	87 b9       	out	0x07, r24	; 7

	ADCSRA= (1<<ADEN);
      de:	80 e8       	ldi	r24, 0x80	; 128
      e0:	86 b9       	out	0x06, r24	; 6
	ADCSRA= (1<<ADSC);
      e2:	80 e4       	ldi	r24, 0x40	; 64
      e4:	86 b9       	out	0x06, r24	; 6
	ADCSRA= (1<<ADPS0)|(1<<ADPS1);             //Enable ADC & start 1st
      e6:	83 e0       	ldi	r24, 0x03	; 3
      e8:	86 b9       	out	0x06, r24	; 6
	ADCSRA= (1<<ADFR);
      ea:	80 e2       	ldi	r24, 0x20	; 32
      ec:	86 b9       	out	0x06, r24	; 6
	//dummy
	//conversion
	//Set ADC module prescalar
	//to 8 critical for
	//accurate ADC results
	while ((ADCSRA & ADIF));                      //Check if conversation is //ready
      ee:	32 99       	sbic	0x06, 2	; 6
      f0:	fe cf       	rjmp	.-4      	; 0xee <adcPrepare2+0x18>

	ADCSRA |= ADIF;
      f2:	32 9a       	sbi	0x06, 2	; 6
}
      f4:	08 95       	ret

000000f6 <getAdcVoltage>:

int getAdcVoltage(uint8_t adcSignal)
{
	// Veikimas : paduot reikia is kurio adc kanalo reik perskaityt, apibrezta konstantose
	ADMUX = adcSignal;
      f6:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC); // Start conversion
      f8:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC)); // wait for conversion to complete
      fa:	36 99       	sbic	0x06, 6	; 6
      fc:	fe cf       	rjmp	.-4      	; 0xfa <getAdcVoltage+0x4>

	return ADC*0.0045*100;
      fe:	64 b1       	in	r22, 0x04	; 4
     100:	75 b1       	in	r23, 0x05	; 5
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	0e 94 98 06 	call	0xd30	; 0xd30 <__floatunsisf>
     10a:	2c eb       	ldi	r18, 0xBC	; 188
     10c:	34 e7       	ldi	r19, 0x74	; 116
     10e:	43 e9       	ldi	r20, 0x93	; 147
     110:	5b e3       	ldi	r21, 0x3B	; 59
     112:	0e 94 4a 07 	call	0xe94	; 0xe94 <__mulsf3>
     116:	20 e0       	ldi	r18, 0x00	; 0
     118:	30 e0       	ldi	r19, 0x00	; 0
     11a:	48 ec       	ldi	r20, 0xC8	; 200
     11c:	52 e4       	ldi	r21, 0x42	; 66
     11e:	0e 94 4a 07 	call	0xe94	; 0xe94 <__mulsf3>
     122:	0e 94 67 06 	call	0xcce	; 0xcce <__fixsfsi>
	
	
	
	
	
}
     126:	86 2f       	mov	r24, r22
     128:	97 2f       	mov	r25, r23
     12a:	08 95       	ret

0000012c <getADC>:

int getADC(uint8_t adcSignal)
{   int temp=0 ;
     12c:	24 e1       	ldi	r18, 0x14	; 20
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	40 e0       	ldi	r20, 0x00	; 0
     132:	50 e0       	ldi	r21, 0x00	; 0
	bool b= true;
	int x;
	for(int i =0; i<20; i++)
	{
		ADMUX = adcSignal;
     134:	87 b9       	out	0x07, r24	; 7
		ADCSRA |= (1<<ADSC); // Start conversion
     136:	36 9a       	sbi	0x06, 6	; 6
		while (ADCSRA & (1<<ADSC)); // wait for conversion to complete
     138:	36 99       	sbic	0x06, 6	; 6
     13a:	fe cf       	rjmp	.-4      	; 0x138 <getADC+0xc>
		temp = temp +ADC;
     13c:	64 b1       	in	r22, 0x04	; 4
     13e:	75 b1       	in	r23, 0x05	; 5
     140:	46 0f       	add	r20, r22
     142:	57 1f       	adc	r21, r23
     144:	21 50       	subi	r18, 0x01	; 1
     146:	30 40       	sbci	r19, 0x00	; 0

int getADC(uint8_t adcSignal)
{   int temp=0 ;
	bool b= true;
	int x;
	for(int i =0; i<20; i++)
     148:	a9 f7       	brne	.-22     	; 0x134 <getADC+0x8>
		ADMUX = adcSignal;
		ADCSRA |= (1<<ADSC); // Start conversion
		while (ADCSRA & (1<<ADSC)); // wait for conversion to complete
		temp = temp +ADC;
	}
	return temp/20;
     14a:	ca 01       	movw	r24, r20
     14c:	64 e1       	ldi	r22, 0x14	; 20
     14e:	70 e0       	ldi	r23, 0x00	; 0
     150:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__divmodhi4>
     154:	86 2f       	mov	r24, r22
     156:	97 2f       	mov	r25, r23
			//}
		//}
		//
	//}
	//return temp[4];
}
     158:	08 95       	ret

0000015a <ReadADC>:
{
	unsigned int binary_weighted_voltage;
	unsigned binary_weighted_voltage_low;
	unsigned int binary_weighted_voltage_high;                  //weighted binary //voltage
	
	ADMUX = channel;               //Select channel
     15a:	87 b9       	out	0x07, r24	; 7
	ADCSRA= (1<<ADEN)|(1<<ADSC)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADFR);      //Start conversion
     15c:	83 ee       	ldi	r24, 0xE3	; 227
     15e:	86 b9       	out	0x06, r24	; 6
	//Set ADC module prescalar
	//to 8 critical for
	while(1)
	{                             //accurate ADC results
		while ((ADCSRA & ADIF));                 //Check if converstion is //ready
     160:	32 99       	sbic	0x06, 2	; 6
     162:	fe cf       	rjmp	.-4      	; 0x160 <ReadADC+0x6>
		ADCSRA |= ADIF;                            //Clear Conv rdy flag - set
     164:	32 9a       	sbi	0x06, 2	; 6
		//the bit
		binary_weighted_voltage_low = ADCL;      //Read 8 low bits first
     166:	84 b1       	in	r24, 0x04	; 4
		
		//(important)
		//Read 2 high bits,
		//multiply by 256
		binary_weighted_voltage_high = ((unsigned int)(ADCH << 8));
     168:	95 b1       	in	r25, 0x05	; 5
     16a:	39 2f       	mov	r19, r25
     16c:	20 e0       	ldi	r18, 0x00	; 0
	while(1)
	{                             //accurate ADC results
		while ((ADCSRA & ADIF));                 //Check if converstion is //ready
		ADCSRA |= ADIF;                            //Clear Conv rdy flag - set
		//the bit
		binary_weighted_voltage_low = ADCL;      //Read 8 low bits first
     16e:	90 e0       	ldi	r25, 0x00	; 0
		
		//(important)
		//Read 2 high bits,
		//multiply by 256
		binary_weighted_voltage_high = ((unsigned int)(ADCH << 8));
		binary_weighted_voltage = binary_weighted_voltage_low | binary_weighted_voltage_high;
     170:	82 2b       	or	r24, r18
     172:	93 2b       	or	r25, r19
		return binary_weighted_voltage;                 //ADCH:ADCL
	}}
     174:	08 95       	ret

00000176 <InitializeLcdScreen>:
#include <stdbool.h>
extern bool viewChanged = false;
char buffer[2];
void InitializeLcdScreen()
{
	lcd_init(LCD_DISP_ON);
     176:	8c e0       	ldi	r24, 0x0C	; 12
     178:	0e 94 be 02 	call	0x57c	; 0x57c <lcd_init>
	lcd_clrscr();
     17c:	0e 94 75 02 	call	0x4ea	; 0x4ea <lcd_clrscr>
}
     180:	08 95       	ret

00000182 <PutPressure>:
void PutPressure(int a)
{
     182:	0f 93       	push	r16
     184:	1f 93       	push	r17
     186:	cf 93       	push	r28
     188:	df 93       	push	r29
     18a:	8c 01       	movw	r16, r24
	itoa(a/100,buffer,10);
     18c:	64 e6       	ldi	r22, 0x64	; 100
     18e:	70 e0       	ldi	r23, 0x00	; 0
     190:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__divmodhi4>
     194:	cb 01       	movw	r24, r22
     196:	c8 eb       	ldi	r28, 0xB8	; 184
     198:	d1 e0       	ldi	r29, 0x01	; 1
     19a:	be 01       	movw	r22, r28
     19c:	4a e0       	ldi	r20, 0x0A	; 10
     19e:	50 e0       	ldi	r21, 0x00	; 0
     1a0:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <itoa>
	lcd_puts(buffer);
     1a4:	ce 01       	movw	r24, r28
     1a6:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_puts>
	lcd_puts(".");
     1aa:	80 e0       	ldi	r24, 0x00	; 0
     1ac:	91 e0       	ldi	r25, 0x01	; 1
     1ae:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_puts>
	itoa(a/10,buffer,10);
     1b2:	c8 01       	movw	r24, r16
     1b4:	6a e0       	ldi	r22, 0x0A	; 10
     1b6:	70 e0       	ldi	r23, 0x00	; 0
     1b8:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__divmodhi4>
     1bc:	cb 01       	movw	r24, r22
     1be:	be 01       	movw	r22, r28
     1c0:	4a e0       	ldi	r20, 0x0A	; 10
     1c2:	50 e0       	ldi	r21, 0x00	; 0
     1c4:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <itoa>
	lcd_puts(buffer);
     1c8:	ce 01       	movw	r24, r28
     1ca:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_puts>
	
	
	
     1ce:	df 91       	pop	r29
     1d0:	cf 91       	pop	r28
     1d2:	1f 91       	pop	r17
     1d4:	0f 91       	pop	r16
     1d6:	08 95       	ret

000001d8 <setupTimer>:
extern volatile int peakPressure = 0;
#define F_CPU 8000000

void setupTimer()
{
	cli();
     1d8:	f8 94       	cli
	TCCR1A = 0;
     1da:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0;
     1dc:	1e bc       	out	0x2e, r1	; 46
	
	TCCR3A = 0;
     1de:	10 92 8b 00 	sts	0x008B, r1
	TCCR3B = 0;
     1e2:	ea e8       	ldi	r30, 0x8A	; 138
     1e4:	f0 e0       	ldi	r31, 0x00	; 0
     1e6:	10 82       	st	Z, r1
	
	OCR1A = 100;//7800 viena sekunde
     1e8:	84 e6       	ldi	r24, 0x64	; 100
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	9b bd       	out	0x2b, r25	; 43
     1ee:	8a bd       	out	0x2a, r24	; 42

	OCR3A = 7800;
     1f0:	88 e7       	ldi	r24, 0x78	; 120
     1f2:	9e e1       	ldi	r25, 0x1E	; 30
     1f4:	90 93 87 00 	sts	0x0087, r25
     1f8:	80 93 86 00 	sts	0x0086, r24

	TCCR1B |=(1<<WGM12);
     1fc:	8e b5       	in	r24, 0x2e	; 46
     1fe:	88 60       	ori	r24, 0x08	; 8
     200:	8e bd       	out	0x2e, r24	; 46
	TCCR3B |=(1<<WGM32);
     202:	80 81       	ld	r24, Z
     204:	88 60       	ori	r24, 0x08	; 8
     206:	80 83       	st	Z, r24

	TCCR1B |= (1 << CS10);
     208:	8e b5       	in	r24, 0x2e	; 46
     20a:	81 60       	ori	r24, 0x01	; 1
     20c:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1 << CS12);
     20e:	8e b5       	in	r24, 0x2e	; 46
     210:	84 60       	ori	r24, 0x04	; 4
     212:	8e bd       	out	0x2e, r24	; 46

	TCCR3B |= (1 << CS30);
     214:	80 81       	ld	r24, Z
     216:	81 60       	ori	r24, 0x01	; 1
     218:	80 83       	st	Z, r24
	TCCR3B |= (1 << CS32);
     21a:	80 81       	ld	r24, Z
     21c:	84 60       	ori	r24, 0x04	; 4
     21e:	80 83       	st	Z, r24
	
	TIMSK |= (1 << OCIE1A);
     220:	87 b7       	in	r24, 0x37	; 55
     222:	80 61       	ori	r24, 0x10	; 16
     224:	87 bf       	out	0x37, r24	; 55
	ETIMSK |= (1 << OCIE3A);
     226:	ed e7       	ldi	r30, 0x7D	; 125
     228:	f0 e0       	ldi	r31, 0x00	; 0
     22a:	80 81       	ld	r24, Z
     22c:	80 61       	ori	r24, 0x10	; 16
     22e:	80 83       	st	Z, r24
	
	sei();
     230:	78 94       	sei
	
	
}
     232:	08 95       	ret

00000234 <__vector_26>:

ISR(TIMER3_COMPA_vect)
{
     234:	1f 92       	push	r1
     236:	0f 92       	push	r0
     238:	0f b6       	in	r0, 0x3f	; 63
     23a:	0f 92       	push	r0
     23c:	11 24       	eor	r1, r1
	//Periferija atvaizdavimas ir t.t.
}
     23e:	0f 90       	pop	r0
     240:	0f be       	out	0x3f, r0	; 63
     242:	0f 90       	pop	r0
     244:	1f 90       	pop	r1
     246:	18 95       	reti

00000248 <__vector_12>:


ISR(TIMER1_COMPA_vect)
{
     248:	1f 92       	push	r1
     24a:	0f 92       	push	r0
     24c:	0f b6       	in	r0, 0x3f	; 63
     24e:	0f 92       	push	r0
     250:	0b b6       	in	r0, 0x3b	; 59
     252:	0f 92       	push	r0
     254:	11 24       	eor	r1, r1
     256:	2f 93       	push	r18
     258:	3f 93       	push	r19
     25a:	4f 93       	push	r20
     25c:	5f 93       	push	r21
     25e:	6f 93       	push	r22
     260:	7f 93       	push	r23
     262:	8f 93       	push	r24
     264:	9f 93       	push	r25
     266:	af 93       	push	r26
     268:	bf 93       	push	r27
     26a:	ef 93       	push	r30
     26c:	ff 93       	push	r31
	pressure = GetPressure();
     26e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <GetPressure>
     272:	90 93 b5 01 	sts	0x01B5, r25
     276:	80 93 b4 01 	sts	0x01B4, r24
	if(pressure>MAX_SLEGIS || pressure>MaxSlegis)
     27a:	80 91 b4 01 	lds	r24, 0x01B4
     27e:	90 91 b5 01 	lds	r25, 0x01B5
     282:	81 35       	cpi	r24, 0x51	; 81
     284:	91 05       	cpc	r25, r1
     286:	5c f4       	brge	.+22     	; 0x29e <__vector_12+0x56>
     288:	20 91 b4 01 	lds	r18, 0x01B4
     28c:	30 91 b5 01 	lds	r19, 0x01B5
     290:	80 91 02 01 	lds	r24, 0x0102
     294:	90 91 03 01 	lds	r25, 0x0103
     298:	82 17       	cp	r24, r18
     29a:	93 07       	cpc	r25, r19
     29c:	1c f4       	brge	.+6      	; 0x2a4 <__vector_12+0x5c>
	{
	DecreaseVanePos();
     29e:	0e 94 4d 03 	call	0x69a	; 0x69a <DecreaseVanePos>
		return;
     2a2:	7f c0       	rjmp	.+254    	; 0x3a2 <__vector_12+0x15a>
	}
	
	if(getPedalPosition()<290)
     2a4:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <getPedalPosition>
     2a8:	21 e0       	ldi	r18, 0x01	; 1
     2aa:	82 32       	cpi	r24, 0x22	; 34
     2ac:	92 07       	cpc	r25, r18
     2ae:	1c f4       	brge	.+6      	; 0x2b6 <__vector_12+0x6e>
	{
		DecreaseVanePos();
     2b0:	0e 94 4d 03 	call	0x69a	; 0x69a <DecreaseVanePos>
		return;
     2b4:	76 c0       	rjmp	.+236    	; 0x3a2 <__vector_12+0x15a>
	}
	
	if(getPedalPosition()>500)
     2b6:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <getPedalPosition>
     2ba:	21 e0       	ldi	r18, 0x01	; 1
     2bc:	85 3f       	cpi	r24, 0xF5	; 245
     2be:	92 07       	cpc	r25, r18
     2c0:	54 f0       	brlt	.+20     	; 0x2d6 <__vector_12+0x8e>
	{
		if(pressure<MAX_SLEGIS)
     2c2:	80 91 b4 01 	lds	r24, 0x01B4
     2c6:	90 91 b5 01 	lds	r25, 0x01B5
     2ca:	80 35       	cpi	r24, 0x50	; 80
     2cc:	91 05       	cpc	r25, r1
     2ce:	1c f4       	brge	.+6      	; 0x2d6 <__vector_12+0x8e>
		{
			IncreaseVanePos();
     2d0:	0e 94 43 03 	call	0x686	; 0x686 <IncreaseVanePos>
			return;
     2d4:	66 c0       	rjmp	.+204    	; 0x3a2 <__vector_12+0x15a>
		}
	}
	if (getPedalPosition()>220)
     2d6:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <getPedalPosition>
     2da:	8d 3d       	cpi	r24, 0xDD	; 221
     2dc:	91 05       	cpc	r25, r1
     2de:	b4 f1       	brlt	.+108    	; 0x34c <__vector_12+0x104>
	{
		if(pressure<MAX_SLEGIS/2 || pressure>MaxSlegis/2)
     2e0:	80 91 b4 01 	lds	r24, 0x01B4
     2e4:	90 91 b5 01 	lds	r25, 0x01B5
     2e8:	88 32       	cpi	r24, 0x28	; 40
     2ea:	91 05       	cpc	r25, r1
     2ec:	8c f0       	brlt	.+34     	; 0x310 <__vector_12+0xc8>
     2ee:	40 91 02 01 	lds	r20, 0x0102
     2f2:	50 91 03 01 	lds	r21, 0x0103
     2f6:	20 91 b4 01 	lds	r18, 0x01B4
     2fa:	30 91 b5 01 	lds	r19, 0x01B5
     2fe:	ca 01       	movw	r24, r20
     300:	99 23       	and	r25, r25
     302:	0c f4       	brge	.+2      	; 0x306 <__vector_12+0xbe>
     304:	01 96       	adiw	r24, 0x01	; 1
     306:	95 95       	asr	r25
     308:	87 95       	ror	r24
     30a:	82 17       	cp	r24, r18
     30c:	93 07       	cpc	r25, r19
     30e:	1c f4       	brge	.+6      	; 0x316 <__vector_12+0xce>
		{
			IncreaseVanePos();
     310:	0e 94 43 03 	call	0x686	; 0x686 <IncreaseVanePos>
			return;
     314:	46 c0       	rjmp	.+140    	; 0x3a2 <__vector_12+0x15a>
		}
		else if (pressure>MAX_SLEGIS || pressure>MaxSlegis/2)
     316:	80 91 b4 01 	lds	r24, 0x01B4
     31a:	90 91 b5 01 	lds	r25, 0x01B5
     31e:	81 35       	cpi	r24, 0x51	; 81
     320:	91 05       	cpc	r25, r1
     322:	8c f4       	brge	.+34     	; 0x346 <__vector_12+0xfe>
     324:	40 91 02 01 	lds	r20, 0x0102
     328:	50 91 03 01 	lds	r21, 0x0103
     32c:	20 91 b4 01 	lds	r18, 0x01B4
     330:	30 91 b5 01 	lds	r19, 0x01B5
     334:	ca 01       	movw	r24, r20
     336:	99 23       	and	r25, r25
     338:	0c f4       	brge	.+2      	; 0x33c <__vector_12+0xf4>
     33a:	01 96       	adiw	r24, 0x01	; 1
     33c:	95 95       	asr	r25
     33e:	87 95       	ror	r24
     340:	82 17       	cp	r24, r18
     342:	93 07       	cpc	r25, r19
     344:	1c f4       	brge	.+6      	; 0x34c <__vector_12+0x104>
		{
			DecreaseVanePos();
     346:	0e 94 4d 03 	call	0x69a	; 0x69a <DecreaseVanePos>
			return;
     34a:	2b c0       	rjmp	.+86     	; 0x3a2 <__vector_12+0x15a>
		}
	}
	
	if (peakPressure<pressure)
     34c:	20 91 ad 01 	lds	r18, 0x01AD
     350:	30 91 ae 01 	lds	r19, 0x01AE
     354:	80 91 b4 01 	lds	r24, 0x01B4
     358:	90 91 b5 01 	lds	r25, 0x01B5
     35c:	28 17       	cp	r18, r24
     35e:	39 07       	cpc	r19, r25
     360:	44 f4       	brge	.+16     	; 0x372 <__vector_12+0x12a>
	{
		peakPressure = pressure;
     362:	80 91 b4 01 	lds	r24, 0x01B4
     366:	90 91 b5 01 	lds	r25, 0x01B5
     36a:	90 93 ae 01 	sts	0x01AE, r25
     36e:	80 93 ad 01 	sts	0x01AD, r24
	}
	if(count>40)
     372:	80 91 af 01 	lds	r24, 0x01AF
     376:	90 91 b0 01 	lds	r25, 0x01B0
     37a:	89 32       	cpi	r24, 0x29	; 41
     37c:	91 05       	cpc	r25, r1
     37e:	44 f0       	brlt	.+16     	; 0x390 <__vector_12+0x148>
	{
		peakPressure =0;
     380:	10 92 ae 01 	sts	0x01AE, r1
     384:	10 92 ad 01 	sts	0x01AD, r1
		count = 0;
     388:	10 92 b0 01 	sts	0x01B0, r1
     38c:	10 92 af 01 	sts	0x01AF, r1
	}
	count++;
     390:	80 91 af 01 	lds	r24, 0x01AF
     394:	90 91 b0 01 	lds	r25, 0x01B0
     398:	01 96       	adiw	r24, 0x01	; 1
     39a:	90 93 b0 01 	sts	0x01B0, r25
     39e:	80 93 af 01 	sts	0x01AF, r24

}
     3a2:	ff 91       	pop	r31
     3a4:	ef 91       	pop	r30
     3a6:	bf 91       	pop	r27
     3a8:	af 91       	pop	r26
     3aa:	9f 91       	pop	r25
     3ac:	8f 91       	pop	r24
     3ae:	7f 91       	pop	r23
     3b0:	6f 91       	pop	r22
     3b2:	5f 91       	pop	r21
     3b4:	4f 91       	pop	r20
     3b6:	3f 91       	pop	r19
     3b8:	2f 91       	pop	r18
     3ba:	0f 90       	pop	r0
     3bc:	0b be       	out	0x3b, r0	; 59
     3be:	0f 90       	pop	r0
     3c0:	0f be       	out	0x3f, r0	; 63
     3c2:	0f 90       	pop	r0
     3c4:	1f 90       	pop	r1
     3c6:	18 95       	reti

000003c8 <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
     3c8:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ca:	00 00       	nop
    lcd_e_delay();
    lcd_e_low();
     3cc:	aa 98       	cbi	0x15, 2	; 21
}
     3ce:	08 95       	ret

000003d0 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
     3d0:	cf 93       	push	r28
    unsigned char dataBits ;


    if (rs) {        /* write data        (RS=1, RW=0) */
     3d2:	66 23       	and	r22, r22
     3d4:	11 f0       	breq	.+4      	; 0x3da <lcd_write+0xa>
       lcd_rs_high();
     3d6:	a8 9a       	sbi	0x15, 0	; 21
     3d8:	01 c0       	rjmp	.+2      	; 0x3dc <lcd_write+0xc>
    } else {         /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
     3da:	a8 98       	cbi	0x15, 0	; 21
    }
    lcd_rw_low();    /* RW=0  write mode      */
     3dc:	a9 98       	cbi	0x15, 1	; 21
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     3de:	a3 9a       	sbi	0x14, 3	; 20
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     3e0:	a4 9a       	sbi	0x14, 4	; 20
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     3e2:	a5 9a       	sbi	0x14, 5	; 20
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     3e4:	a6 9a       	sbi	0x14, 6	; 20
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     3e6:	ae 98       	cbi	0x15, 6	; 21
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     3e8:	ad 98       	cbi	0x15, 5	; 21
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     3ea:	ac 98       	cbi	0x15, 4	; 21
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     3ec:	ab 98       	cbi	0x15, 3	; 21
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     3ee:	88 23       	and	r24, r24
     3f0:	0c f4       	brge	.+2      	; 0x3f4 <lcd_write+0x24>
     3f2:	ae 9a       	sbi	0x15, 6	; 21
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     3f4:	c8 2f       	mov	r28, r24
     3f6:	86 fd       	sbrc	r24, 6
     3f8:	ad 9a       	sbi	0x15, 5	; 21
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     3fa:	c5 fd       	sbrc	r28, 5
     3fc:	ac 9a       	sbi	0x15, 4	; 21
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
     3fe:	c4 fd       	sbrc	r28, 4
     400:	ab 9a       	sbi	0x15, 3	; 21
        lcd_e_toggle();
     402:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <toggle_e>
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
     406:	ae 98       	cbi	0x15, 6	; 21
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
     408:	ad 98       	cbi	0x15, 5	; 21
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
     40a:	ac 98       	cbi	0x15, 4	; 21
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
     40c:	ab 98       	cbi	0x15, 3	; 21
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     40e:	c3 fd       	sbrc	r28, 3
     410:	ae 9a       	sbi	0x15, 6	; 21
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     412:	c2 fd       	sbrc	r28, 2
     414:	ad 9a       	sbi	0x15, 5	; 21
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     416:	c1 fd       	sbrc	r28, 1
     418:	ac 9a       	sbi	0x15, 4	; 21
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     41a:	c0 fd       	sbrc	r28, 0
     41c:	ab 9a       	sbi	0x15, 3	; 21
        lcd_e_toggle();        
     41e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <toggle_e>
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
     422:	ab 9a       	sbi	0x15, 3	; 21
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
     424:	ac 9a       	sbi	0x15, 4	; 21
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
     426:	ad 9a       	sbi	0x15, 5	; 21
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
     428:	ae 9a       	sbi	0x15, 6	; 21
    }
}
     42a:	cf 91       	pop	r28
     42c:	08 95       	ret

0000042e <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
     42e:	88 23       	and	r24, r24
     430:	11 f0       	breq	.+4      	; 0x436 <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
     432:	a8 9a       	sbi	0x15, 0	; 21
     434:	01 c0       	rjmp	.+2      	; 0x438 <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
     436:	a8 98       	cbi	0x15, 0	; 21
    lcd_rw_high();                           /* RW=1  read mode      */
     438:	a9 9a       	sbi	0x15, 1	; 21
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
     43a:	a3 98       	cbi	0x14, 3	; 20
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
     43c:	a4 98       	cbi	0x14, 4	; 20
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
     43e:	a5 98       	cbi	0x14, 5	; 20
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
     440:	a6 98       	cbi	0x14, 6	; 20
                
        /* read high nibble first */
        lcd_e_high();
     442:	aa 9a       	sbi	0x15, 2	; 21
     444:	00 00       	nop
        lcd_e_delay();        
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     446:	9b 99       	sbic	0x13, 3	; 19
     448:	02 c0       	rjmp	.+4      	; 0x44e <lcd_read+0x20>
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
                
        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();        
        data = 0;
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	01 c0       	rjmp	.+2      	; 0x450 <lcd_read+0x22>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
     44e:	80 e1       	ldi	r24, 0x10	; 16
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
     450:	9c 99       	sbic	0x13, 4	; 19
     452:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
     454:	9d 99       	sbic	0x13, 5	; 19
     456:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
     458:	9e 99       	sbic	0x13, 6	; 19
     45a:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
     45c:	aa 98       	cbi	0x15, 2	; 21
     45e:	00 00       	nop

        lcd_e_delay();                       /* Enable 500ns low       */
    
        /* read low nibble */    
        lcd_e_high();
     460:	aa 9a       	sbi	0x15, 2	; 21
     462:	00 00       	nop
        lcd_e_delay();
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
     464:	9b 99       	sbic	0x13, 3	; 19
     466:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
     468:	9c 99       	sbic	0x13, 4	; 19
     46a:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
     46c:	9d 99       	sbic	0x13, 5	; 19
     46e:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
     470:	9e 99       	sbic	0x13, 6	; 19
     472:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
     474:	aa 98       	cbi	0x15, 2	; 21
    }
    return data;
}
     476:	08 95       	ret

00000478 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
     478:	80 e0       	ldi	r24, 0x00	; 0
     47a:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_read>
     47e:	88 23       	and	r24, r24
     480:	dc f3       	brlt	.-10     	; 0x478 <lcd_waitbusy>
     482:	00 c0       	rjmp	.+0      	; 0x484 <lcd_waitbusy+0xc>
     484:	00 c0       	rjmp	.+0      	; 0x486 <lcd_waitbusy+0xe>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(LCD_DELAY_BUSY_FLAG);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_read>
    
}/* lcd_waitbusy */
     48c:	08 95       	ret

0000048e <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
     48e:	cf 93       	push	r28
     490:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
     492:	0e 94 3c 02 	call	0x478	; 0x478 <lcd_waitbusy>
    lcd_write(cmd,0);
     496:	8c 2f       	mov	r24, r28
     498:	60 e0       	ldi	r22, 0x00	; 0
     49a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <lcd_write>
}
     49e:	cf 91       	pop	r28
     4a0:	08 95       	ret

000004a2 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
     4a2:	cf 93       	push	r28
     4a4:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
     4a6:	0e 94 3c 02 	call	0x478	; 0x478 <lcd_waitbusy>
    lcd_write(data,1);
     4aa:	8c 2f       	mov	r24, r28
     4ac:	61 e0       	ldi	r22, 0x01	; 1
     4ae:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <lcd_write>
}
     4b2:	cf 91       	pop	r28
     4b4:	08 95       	ret

000004b6 <lcd_gotoxy>:
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
#endif
#if LCD_LINES==4
    if ( y==0 )
     4b6:	66 23       	and	r22, r22
     4b8:	21 f4       	brne	.+8      	; 0x4c2 <lcd_gotoxy+0xc>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
     4ba:	80 58       	subi	r24, 0x80	; 128
     4bc:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_command>
     4c0:	08 95       	ret
    else if ( y==1)
     4c2:	61 30       	cpi	r22, 0x01	; 1
     4c4:	21 f4       	brne	.+8      	; 0x4ce <lcd_gotoxy+0x18>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
     4c6:	80 54       	subi	r24, 0x40	; 64
     4c8:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_command>
     4cc:	08 95       	ret
    else if ( y==2)
     4ce:	62 30       	cpi	r22, 0x02	; 2
     4d0:	21 f4       	brne	.+8      	; 0x4da <lcd_gotoxy+0x24>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE3+x);
     4d2:	8c 56       	subi	r24, 0x6C	; 108
     4d4:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_command>
     4d8:	08 95       	ret
    else /* y==3 */
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE4+x);
     4da:	8c 52       	subi	r24, 0x2C	; 44
     4dc:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_command>
     4e0:	08 95       	ret

000004e2 <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
     4e2:	0e 94 3c 02 	call	0x478	; 0x478 <lcd_waitbusy>
}
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	08 95       	ret

000004ea <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_command>
}
     4f0:	08 95       	ret

000004f2 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
     4f2:	82 e0       	ldi	r24, 0x02	; 2
     4f4:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_command>
}
     4f8:	08 95       	ret

000004fa <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
     4fa:	cf 93       	push	r28
     4fc:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
     4fe:	0e 94 3c 02 	call	0x478	; 0x478 <lcd_waitbusy>
    if (c=='\n')
     502:	ca 30       	cpi	r28, 0x0A	; 10
     504:	a1 f4       	brne	.+40     	; 0x52e <lcd_putc+0x34>
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE4) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#else
    if ( pos < LCD_START_LINE3 )
     506:	84 31       	cpi	r24, 0x14	; 20
     508:	48 f0       	brcs	.+18     	; 0x51c <lcd_putc+0x22>
        addressCounter = LCD_START_LINE2;
    else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
     50a:	98 2f       	mov	r25, r24
     50c:	90 54       	subi	r25, 0x40	; 64
     50e:	94 31       	cpi	r25, 0x14	; 20
     510:	38 f0       	brcs	.+14     	; 0x520 <lcd_putc+0x26>
        addressCounter = LCD_START_LINE3;
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
     512:	84 51       	subi	r24, 0x14	; 20
     514:	8c 32       	cpi	r24, 0x2C	; 44
     516:	30 f4       	brcc	.+12     	; 0x524 <lcd_putc+0x2a>
        addressCounter = LCD_START_LINE4;
     518:	84 e5       	ldi	r24, 0x54	; 84
     51a:	05 c0       	rjmp	.+10     	; 0x526 <lcd_putc+0x2c>
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#else
    if ( pos < LCD_START_LINE3 )
        addressCounter = LCD_START_LINE2;
     51c:	80 e4       	ldi	r24, 0x40	; 64
     51e:	03 c0       	rjmp	.+6      	; 0x526 <lcd_putc+0x2c>
    else if ( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4) )
        addressCounter = LCD_START_LINE3;
     520:	84 e1       	ldi	r24, 0x14	; 20
     522:	01 c0       	rjmp	.+2      	; 0x526 <lcd_putc+0x2c>
    else if ( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2) )
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
     524:	80 e0       	ldi	r24, 0x00	; 0
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
     526:	80 58       	subi	r24, 0x80	; 128
     528:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_command>
     52c:	04 c0       	rjmp	.+8      	; 0x536 <lcd_putc+0x3c>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
     52e:	8c 2f       	mov	r24, r28
     530:	61 e0       	ldi	r22, 0x01	; 1
     532:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <lcd_write>
    }

}/* lcd_putc */
     536:	cf 91       	pop	r28
     538:	08 95       	ret

0000053a <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
     53a:	cf 93       	push	r28
     53c:	df 93       	push	r29
     53e:	ec 01       	movw	r28, r24
    register char c;

    while ( (c = *s++) ) {
     540:	88 81       	ld	r24, Y
     542:	88 23       	and	r24, r24
     544:	31 f0       	breq	.+12     	; 0x552 <lcd_puts+0x18>
     546:	21 96       	adiw	r28, 0x01	; 1
        lcd_putc(c);
     548:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
     54c:	89 91       	ld	r24, Y+
     54e:	88 23       	and	r24, r24
     550:	d9 f7       	brne	.-10     	; 0x548 <lcd_puts+0xe>
        lcd_putc(c);
    }

}/* lcd_puts */
     552:	df 91       	pop	r29
     554:	cf 91       	pop	r28
     556:	08 95       	ret

00000558 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	ec 01       	movw	r28, r24
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     55e:	fc 01       	movw	r30, r24
     560:	84 91       	lpm	r24, Z
     562:	88 23       	and	r24, r24
     564:	41 f0       	breq	.+16     	; 0x576 <lcd_puts_p+0x1e>
     566:	21 96       	adiw	r28, 0x01	; 1
        lcd_putc(c);
     568:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_putc>
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
     56c:	fe 01       	movw	r30, r28
     56e:	21 96       	adiw	r28, 0x01	; 1
     570:	84 91       	lpm	r24, Z
     572:	88 23       	and	r24, r24
     574:	c9 f7       	brne	.-14     	; 0x568 <lcd_puts_p+0x10>
        lcd_putc(c);
    }

}/* lcd_puts_p */
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	08 95       	ret

0000057c <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     57c:	cf 93       	push	r28
     57e:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     580:	a0 9a       	sbi	0x14, 0	; 20
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     582:	a1 9a       	sbi	0x14, 1	; 20
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     584:	a2 9a       	sbi	0x14, 2	; 20
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     586:	a3 9a       	sbi	0x14, 3	; 20
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     588:	a4 9a       	sbi	0x14, 4	; 20
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     58a:	a5 9a       	sbi	0x14, 5	; 20
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     58c:	a6 9a       	sbi	0x14, 6	; 20
     58e:	8f e9       	ldi	r24, 0x9F	; 159
     590:	9f e0       	ldi	r25, 0x0F	; 15
     592:	01 97       	sbiw	r24, 0x01	; 1
     594:	f1 f7       	brne	.-4      	; 0x592 <lcd_init+0x16>
     596:	00 c0       	rjmp	.+0      	; 0x598 <lcd_init+0x1c>
     598:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
     59a:	ac 9a       	sbi	0x15, 4	; 21
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
     59c:	ab 9a       	sbi	0x15, 3	; 21
    lcd_e_toggle();
     59e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <toggle_e>
     5a2:	81 ee       	ldi	r24, 0xE1	; 225
     5a4:	94 e0       	ldi	r25, 0x04	; 4
     5a6:	01 97       	sbiw	r24, 0x01	; 1
     5a8:	f1 f7       	brne	.-4      	; 0x5a6 <lcd_init+0x2a>
     5aa:	00 c0       	rjmp	.+0      	; 0x5ac <lcd_init+0x30>
     5ac:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
     5ae:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <toggle_e>
     5b2:	95 e1       	ldi	r25, 0x15	; 21
     5b4:	9a 95       	dec	r25
     5b6:	f1 f7       	brne	.-4      	; 0x5b4 <lcd_init+0x38>
     5b8:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
     5ba:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <toggle_e>
     5be:	85 e1       	ldi	r24, 0x15	; 21
     5c0:	8a 95       	dec	r24
     5c2:	f1 f7       	brne	.-4      	; 0x5c0 <lcd_init+0x44>
     5c4:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
     5c6:	ab 98       	cbi	0x15, 3	; 21
    lcd_e_toggle();
     5c8:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <toggle_e>
     5cc:	95 e1       	ldi	r25, 0x15	; 21
     5ce:	9a 95       	dec	r25
     5d0:	f1 f7       	brne	.-4      	; 0x5ce <lcd_init+0x52>
     5d2:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
     5d4:	88 e2       	ldi	r24, 0x28	; 40
     5d6:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
     5da:	88 e0       	ldi	r24, 0x08	; 8
     5dc:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
     5e0:	0e 94 75 02 	call	0x4ea	; 0x4ea <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
     5e4:	86 e0       	ldi	r24, 0x06	; 6
     5e6:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
     5ea:	8c 2f       	mov	r24, r28
     5ec:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_command>

}/* lcd_init */
     5f0:	cf 91       	pop	r28
     5f2:	08 95       	ret

000005f4 <getPedalPosition>:
#include "Headers\GlobalValues.h"

int getPedalPosition()
{
	return getADC(ADC_PEDAL);
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	0e 94 96 00 	call	0x12c	; 0x12c <getADC>
	
     5fc:	08 95       	ret

000005fe <GetPressure>:

#include "Headers/Adc.h"
#include "Headers/GlobalValues.h"
int GetPressure()
{
     5fe:	0f 93       	push	r16
     600:	1f 93       	push	r17
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
	// Slegio daviklis butinai turi but uzmaitintas 5v lygiai
	float a=(((getADC(ADC_PRESSURE_SENSOR)*ADC_DALIKLIO_DAUGIKLIS)/0.0085) -21.2)/1;
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	0e 94 96 00 	call	0x12c	; 0x12c <getADC>
     60c:	9c 01       	movw	r18, r24
     60e:	b9 01       	movw	r22, r18
     610:	88 27       	eor	r24, r24
     612:	77 fd       	sbrc	r23, 7
     614:	80 95       	com	r24
     616:	98 2f       	mov	r25, r24
     618:	0e 94 9a 06 	call	0xd34	; 0xd34 <__floatsisf>
     61c:	2c eb       	ldi	r18, 0xBC	; 188
     61e:	34 e7       	ldi	r19, 0x74	; 116
     620:	43 e9       	ldi	r20, 0x93	; 147
     622:	5b e3       	ldi	r21, 0x3B	; 59
     624:	0e 94 4a 07 	call	0xe94	; 0xe94 <__mulsf3>
     628:	26 e9       	ldi	r18, 0x96	; 150
     62a:	33 e4       	ldi	r19, 0x43	; 67
     62c:	4b e0       	ldi	r20, 0x0B	; 11
     62e:	5c e3       	ldi	r21, 0x3C	; 60
     630:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__divsf3>
     634:	2a e9       	ldi	r18, 0x9A	; 154
     636:	39 e9       	ldi	r19, 0x99	; 153
     638:	49 ea       	ldi	r20, 0xA9	; 169
     63a:	51 e4       	ldi	r21, 0x41	; 65
     63c:	0e 94 96 05 	call	0xb2c	; 0xb2c <__subsf3>
     640:	06 2f       	mov	r16, r22
     642:	17 2f       	mov	r17, r23
     644:	d8 2f       	mov	r29, r24
     646:	c9 2f       	mov	r28, r25
	
	if (a<0)
     648:	86 2f       	mov	r24, r22
     64a:	91 2f       	mov	r25, r17
     64c:	ad 2f       	mov	r26, r29
     64e:	bc 2f       	mov	r27, r28
     650:	bc 01       	movw	r22, r24
     652:	cd 01       	movw	r24, r26
     654:	20 e0       	ldi	r18, 0x00	; 0
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	a9 01       	movw	r20, r18
     65a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <__cmpsf2>
     65e:	88 23       	and	r24, r24
     660:	5c f0       	brlt	.+22     	; 0x678 <GetPressure+0x7a>
	return 0;
	else
	return (int)a;
     662:	80 2f       	mov	r24, r16
     664:	91 2f       	mov	r25, r17
     666:	ad 2f       	mov	r26, r29
     668:	bc 2f       	mov	r27, r28
     66a:	bc 01       	movw	r22, r24
     66c:	cd 01       	movw	r24, r26
     66e:	0e 94 67 06 	call	0xcce	; 0xcce <__fixsfsi>
     672:	dc 01       	movw	r26, r24
     674:	cb 01       	movw	r24, r22
     676:	02 c0       	rjmp	.+4      	; 0x67c <GetPressure+0x7e>
{
	// Slegio daviklis butinai turi but uzmaitintas 5v lygiai
	float a=(((getADC(ADC_PRESSURE_SENSOR)*ADC_DALIKLIO_DAUGIKLIS)/0.0085) -21.2)/1;
	
	if (a<0)
	return 0;
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	90 e0       	ldi	r25, 0x00	; 0
	else
	return (int)a;
}
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	08 95       	ret

00000686 <IncreaseVanePos>:
#include "Headers/GlobalValues.h"
#include <avr/io.h>
#include <util/delay.h>
void IncreaseVanePos()
{
	VNT_VAC_ON;
     686:	92 9a       	sbi	0x12, 2	; 18
	VNT_CHANGE;
     688:	93 9a       	sbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     68a:	8b e4       	ldi	r24, 0x4B	; 75
     68c:	9d e1       	ldi	r25, 0x1D	; 29
     68e:	01 97       	sbiw	r24, 0x01	; 1
     690:	f1 f7       	brne	.-4      	; 0x68e <IncreaseVanePos+0x8>
     692:	00 c0       	rjmp	.+0      	; 0x694 <IncreaseVanePos+0xe>
     694:	00 00       	nop
	_delay_ms(30);
	VNT_HOLD;
     696:	93 98       	cbi	0x12, 3	; 18
	
	
}
     698:	08 95       	ret

0000069a <DecreaseVanePos>:

void DecreaseVanePos()
{
	VNT_VAC_OFF;
     69a:	92 98       	cbi	0x12, 2	; 18
	VNT_CHANGE;
     69c:	93 9a       	sbi	0x12, 3	; 18
     69e:	8b e4       	ldi	r24, 0x4B	; 75
     6a0:	9d e1       	ldi	r25, 0x1D	; 29
     6a2:	01 97       	sbiw	r24, 0x01	; 1
     6a4:	f1 f7       	brne	.-4      	; 0x6a2 <DecreaseVanePos+0x8>
     6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <DecreaseVanePos+0xe>
     6a8:	00 00       	nop
	_delay_ms(30);
	VNT_HOLD;
     6aa:	93 98       	cbi	0x12, 3	; 18
     6ac:	08 95       	ret

000006ae <startup>:

// http://www.electroschematics.com/10053/avr-adc
void startup ()
{
	
	adcPrepare();
     6ae:	0e 94 68 00 	call	0xd0	; 0xd0 <adcPrepare>
	
	InitializeLcdScreen(); 
     6b2:	0e 94 bb 00 	call	0x176	; 0x176 <InitializeLcdScreen>
	lcd_home();
     6b6:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_home>
	lcd_puts("#DEDE ready");
     6ba:	86 e0       	ldi	r24, 0x06	; 6
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_puts>
	lcd_gotoxy(0,1);
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	61 e0       	ldi	r22, 0x01	; 1
     6c6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
	lcd_puts("Version: ");
     6ca:	82 e1       	ldi	r24, 0x12	; 18
     6cc:	91 e0       	ldi	r25, 0x01	; 1
     6ce:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_puts>
	lcd_gotoxy(0,2);
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	62 e0       	ldi	r22, 0x02	; 2
     6d6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
	lcd_puts(VERSION);
     6da:	8c e1       	ldi	r24, 0x1C	; 28
     6dc:	91 e0       	ldi	r25, 0x01	; 1
     6de:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_puts>
	
	//-----------outputs-------------------
		DDRD = 0xFF; //buzzeris kabo
     6e2:	8f ef       	ldi	r24, 0xFF	; 255
     6e4:	81 bb       	out	0x11, r24	; 17
		DDRA = 0x00;// buttons
     6e6:	1a ba       	out	0x1a, r1	; 26
		PORTA = 0xFF;
     6e8:	8b bb       	out	0x1b, r24	; 27
		DDRE = 0xFF;//solenoidai...
     6ea:	82 b9       	out	0x02, r24	; 2
     6ec:	8f ef       	ldi	r24, 0xFF	; 255
     6ee:	9b e7       	ldi	r25, 0x7B	; 123
     6f0:	a2 e9       	ldi	r26, 0x92	; 146
     6f2:	81 50       	subi	r24, 0x01	; 1
     6f4:	90 40       	sbci	r25, 0x00	; 0
     6f6:	a0 40       	sbci	r26, 0x00	; 0
     6f8:	e1 f7       	brne	.-8      	; 0x6f2 <startup+0x44>
     6fa:	00 c0       	rjmp	.+0      	; 0x6fc <startup+0x4e>
     6fc:	00 00       	nop
	_delay_ms(3000);

	if(BTN_OK_LEFT)
     6fe:	89 b3       	in	r24, 0x19	; 25
     700:	87 3d       	cpi	r24, 0xD7	; 215
     702:	39 f4       	brne	.+14     	; 0x712 <startup+0x64>
	ScreenType = SCREEN_TEST;
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	90 93 b7 01 	sts	0x01B7, r25
     70c:	80 93 b6 01 	sts	0x01B6, r24
     710:	06 c0       	rjmp	.+12     	; 0x71e <startup+0x70>
	else
	ScreenType = SCREEN_MAIN;
     712:	82 e0       	ldi	r24, 0x02	; 2
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	90 93 b7 01 	sts	0x01B7, r25
     71a:	80 93 b6 01 	sts	0x01B6, r24
	ScreenChanged = true;
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	80 93 c2 01 	sts	0x01C2, r24
	setupTimer();
     724:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <setupTimer>
}
     728:	08 95       	ret

0000072a <ScreenTest>:
void ScreenTest()
{
     72a:	cf 93       	push	r28
     72c:	df 93       	push	r29
	if (ScreenChanged)
     72e:	80 91 c2 01 	lds	r24, 0x01C2
     732:	88 23       	and	r24, r24
     734:	11 f1       	breq	.+68     	; 0x77a <ScreenTest+0x50>
	{
		lcd_clrscr();
     736:	0e 94 75 02 	call	0x4ea	; 0x4ea <lcd_clrscr>
		lcd_home();
     73a:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_home>
		lcd_puts("  FOR TESTING ONLY!");
     73e:	8c e2       	ldi	r24, 0x2C	; 44
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_puts>
		lcd_gotoxy(0,1);
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	61 e0       	ldi	r22, 0x01	; 1
     74a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
		lcd_puts("  Change VNT (   %)");
     74e:	80 e4       	ldi	r24, 0x40	; 64
     750:	91 e0       	ldi	r25, 0x01	; 1
     752:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_puts>
		lcd_gotoxy(0,2);
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	62 e0       	ldi	r22, 0x02	; 2
     75a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
		lcd_puts("  Pressure     Bar");
     75e:	84 e5       	ldi	r24, 0x54	; 84
     760:	91 e0       	ldi	r25, 0x01	; 1
     762:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_puts>
		lcd_gotoxy(0,3);
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	63 e0       	ldi	r22, 0x03	; 3
     76a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
		lcd_puts("  Throttle POS ");
     76e:	87 e6       	ldi	r24, 0x67	; 103
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_puts>
		ScreenChanged = false;
     776:	10 92 c2 01 	sts	0x01C2, r1
	}
	
	lcd_gotoxy(0,0);
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
	lcd_puts("  ");
     782:	c7 e7       	ldi	r28, 0x77	; 119
     784:	d1 e0       	ldi	r29, 0x01	; 1
     786:	ce 01       	movw	r24, r28
     788:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_puts>
	lcd_gotoxy(0,1);
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	61 e0       	ldi	r22, 0x01	; 1
     790:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
	lcd_puts("  ");
     794:	ce 01       	movw	r24, r28
     796:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_puts>
	lcd_gotoxy(0,2);
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	62 e0       	ldi	r22, 0x02	; 2
     79e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
	lcd_puts("  ");
     7a2:	ce 01       	movw	r24, r28
     7a4:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_puts>
	lcd_gotoxy(0,3);
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	63 e0       	ldi	r22, 0x03	; 3
     7ac:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
	lcd_puts("  ");
     7b0:	ce 01       	movw	r24, r28
     7b2:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_puts>
	
	itoa(VntPercentage,buffer,10);
     7b6:	80 91 04 01 	lds	r24, 0x0104
     7ba:	90 91 05 01 	lds	r25, 0x0105
     7be:	c8 eb       	ldi	r28, 0xB8	; 184
     7c0:	d1 e0       	ldi	r29, 0x01	; 1
     7c2:	be 01       	movw	r22, r28
     7c4:	4a e0       	ldi	r20, 0x0A	; 10
     7c6:	50 e0       	ldi	r21, 0x00	; 0
     7c8:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <itoa>
	lcd_gotoxy(14,1);
     7cc:	8e e0       	ldi	r24, 0x0E	; 14
     7ce:	61 e0       	ldi	r22, 0x01	; 1
     7d0:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
	lcd_puts("   ");
     7d4:	8a e7       	ldi	r24, 0x7A	; 122
     7d6:	91 e0       	ldi	r25, 0x01	; 1
     7d8:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_puts>
	lcd_gotoxy(14,1);
     7dc:	8e e0       	ldi	r24, 0x0E	; 14
     7de:	61 e0       	ldi	r22, 0x01	; 1
     7e0:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
	lcd_puts(buffer);
     7e4:	ce 01       	movw	r24, r28
     7e6:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_puts>
	
	itoa(getPedalPosition(),buffer,10);
     7ea:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <getPedalPosition>
     7ee:	be 01       	movw	r22, r28
     7f0:	4a e0       	ldi	r20, 0x0A	; 10
     7f2:	50 e0       	ldi	r21, 0x00	; 0
     7f4:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <itoa>
	lcd_gotoxy(16,3);
     7f8:	80 e1       	ldi	r24, 0x10	; 16
     7fa:	63 e0       	ldi	r22, 0x03	; 3
     7fc:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
	lcd_puts("     ");
     800:	8e e7       	ldi	r24, 0x7E	; 126
     802:	91 e0       	ldi	r25, 0x01	; 1
     804:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_puts>
	lcd_gotoxy(16,3);
     808:	80 e1       	ldi	r24, 0x10	; 16
     80a:	63 e0       	ldi	r22, 0x03	; 3
     80c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
	lcd_puts(buffer);
     810:	ce 01       	movw	r24, r28
     812:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_puts>
	
	
	lcd_gotoxy(11,2);
     816:	8b e0       	ldi	r24, 0x0B	; 11
     818:	62 e0       	ldi	r22, 0x02	; 2
     81a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
	lcd_puts("    ");
     81e:	84 e8       	ldi	r24, 0x84	; 132
     820:	91 e0       	ldi	r25, 0x01	; 1
     822:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_puts>
	lcd_gotoxy(11,2);
     826:	8b e0       	ldi	r24, 0x0B	; 11
     828:	62 e0       	ldi	r22, 0x02	; 2
     82a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
	PutPressure(GetPressure());
     82e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <GetPressure>
     832:	0e 94 c1 00 	call	0x182	; 0x182 <PutPressure>
	lcd_gotoxy(0,ScreenPointer);
     836:	60 91 b1 01 	lds	r22, 0x01B1
     83a:	70 91 b2 01 	lds	r23, 0x01B2
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
		if(Selected)
     844:	80 91 b3 01 	lds	r24, 0x01B3
     848:	88 23       	and	r24, r24
     84a:	09 f4       	brne	.+2      	; 0x84e <ScreenTest+0x124>
     84c:	41 c0       	rjmp	.+130    	; 0x8d0 <ScreenTest+0x1a6>
		{
			lcd_puts("<>");
     84e:	89 e8       	ldi	r24, 0x89	; 137
     850:	91 e0       	ldi	r25, 0x01	; 1
     852:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_puts>
			if(ScreenPointer==1)
     856:	80 91 b1 01 	lds	r24, 0x01B1
     85a:	90 91 b2 01 	lds	r25, 0x01B2
     85e:	81 30       	cpi	r24, 0x01	; 1
     860:	91 05       	cpc	r25, r1
     862:	79 f5       	brne	.+94     	; 0x8c2 <ScreenTest+0x198>
			{
				if(BTN_MINUS)
     864:	89 b3       	in	r24, 0x19	; 25
     866:	8f 3b       	cpi	r24, 0xBF	; 191
     868:	49 f4       	brne	.+18     	; 0x87c <ScreenTest+0x152>
				VntPercentage--;
     86a:	80 91 04 01 	lds	r24, 0x0104
     86e:	90 91 05 01 	lds	r25, 0x0105
     872:	01 97       	sbiw	r24, 0x01	; 1
     874:	90 93 05 01 	sts	0x0105, r25
     878:	80 93 04 01 	sts	0x0104, r24
				if(BTN_PLUS)
     87c:	89 b3       	in	r24, 0x19	; 25
     87e:	8f 37       	cpi	r24, 0x7F	; 127
     880:	49 f4       	brne	.+18     	; 0x894 <ScreenTest+0x16a>
				VntPercentage++;
     882:	80 91 04 01 	lds	r24, 0x0104
     886:	90 91 05 01 	lds	r25, 0x0105
     88a:	01 96       	adiw	r24, 0x01	; 1
     88c:	90 93 05 01 	sts	0x0105, r25
     890:	80 93 04 01 	sts	0x0104, r24
				if(VntPercentage>100)
     894:	80 91 04 01 	lds	r24, 0x0104
     898:	90 91 05 01 	lds	r25, 0x0105
     89c:	85 36       	cpi	r24, 0x65	; 101
     89e:	91 05       	cpc	r25, r1
     8a0:	34 f0       	brlt	.+12     	; 0x8ae <ScreenTest+0x184>
				VntPercentage=100;
     8a2:	84 e6       	ldi	r24, 0x64	; 100
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	90 93 05 01 	sts	0x0105, r25
     8aa:	80 93 04 01 	sts	0x0104, r24
				if(VntPercentage<0)
     8ae:	80 91 04 01 	lds	r24, 0x0104
     8b2:	90 91 05 01 	lds	r25, 0x0105
     8b6:	99 23       	and	r25, r25
     8b8:	24 f4       	brge	.+8      	; 0x8c2 <ScreenTest+0x198>
				VntPercentage=0;
     8ba:	10 92 05 01 	sts	0x0105, r1
     8be:	10 92 04 01 	sts	0x0104, r1
			}
			if(BTN_OK)
     8c2:	89 b3       	in	r24, 0x19	; 25
     8c4:	8f 3d       	cpi	r24, 0xDF	; 223
     8c6:	09 f0       	breq	.+2      	; 0x8ca <ScreenTest+0x1a0>
     8c8:	49 c0       	rjmp	.+146    	; 0x95c <ScreenTest+0x232>
			Selected = false;
     8ca:	10 92 b3 01 	sts	0x01B3, r1
     8ce:	46 c0       	rjmp	.+140    	; 0x95c <ScreenTest+0x232>
			return;
		}
	
		
	
	lcd_puts("->");
     8d0:	8c e8       	ldi	r24, 0x8C	; 140
     8d2:	91 e0       	ldi	r25, 0x01	; 1
     8d4:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_puts>

	
	if (BTN_LEFT)
     8d8:	89 b3       	in	r24, 0x19	; 25
     8da:	87 3f       	cpi	r24, 0xF7	; 247
     8dc:	49 f4       	brne	.+18     	; 0x8f0 <ScreenTest+0x1c6>
	ScreenPointer--;
     8de:	80 91 b1 01 	lds	r24, 0x01B1
     8e2:	90 91 b2 01 	lds	r25, 0x01B2
     8e6:	01 97       	sbiw	r24, 0x01	; 1
     8e8:	90 93 b2 01 	sts	0x01B2, r25
     8ec:	80 93 b1 01 	sts	0x01B1, r24
	if (BTN_RIGHT)
     8f0:	89 b3       	in	r24, 0x19	; 25
     8f2:	8f 3e       	cpi	r24, 0xEF	; 239
     8f4:	49 f4       	brne	.+18     	; 0x908 <ScreenTest+0x1de>
	ScreenPointer++;
     8f6:	80 91 b1 01 	lds	r24, 0x01B1
     8fa:	90 91 b2 01 	lds	r25, 0x01B2
     8fe:	01 96       	adiw	r24, 0x01	; 1
     900:	90 93 b2 01 	sts	0x01B2, r25
     904:	80 93 b1 01 	sts	0x01B1, r24
	if (BTN_OK)
     908:	89 b3       	in	r24, 0x19	; 25
     90a:	8f 3d       	cpi	r24, 0xDF	; 223
     90c:	19 f4       	brne	.+6      	; 0x914 <ScreenTest+0x1ea>
	Selected = true;
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	80 93 b3 01 	sts	0x01B3, r24
	if (ScreenPointer>3)
     914:	80 91 b1 01 	lds	r24, 0x01B1
     918:	90 91 b2 01 	lds	r25, 0x01B2
     91c:	84 30       	cpi	r24, 0x04	; 4
     91e:	91 05       	cpc	r25, r1
     920:	34 f0       	brlt	.+12     	; 0x92e <ScreenTest+0x204>
	ScreenPointer = 3;
     922:	83 e0       	ldi	r24, 0x03	; 3
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	90 93 b2 01 	sts	0x01B2, r25
     92a:	80 93 b1 01 	sts	0x01B1, r24
	if (ScreenPointer<0)
     92e:	80 91 b1 01 	lds	r24, 0x01B1
     932:	90 91 b2 01 	lds	r25, 0x01B2
     936:	99 23       	and	r25, r25
     938:	24 f4       	brge	.+8      	; 0x942 <ScreenTest+0x218>
	ScreenPointer = 0;
     93a:	10 92 b2 01 	sts	0x01B2, r1
     93e:	10 92 b1 01 	sts	0x01B1, r1
		if(BTN_PLUS)
     942:	89 b3       	in	r24, 0x19	; 25
     944:	8f 37       	cpi	r24, 0x7F	; 127
     946:	19 f4       	brne	.+6      	; 0x94e <ScreenTest+0x224>
		{
			VNT_VAC_ON;
     948:	92 9a       	sbi	0x12, 2	; 18
			VNT_CHANGE;
     94a:	93 9a       	sbi	0x12, 3	; 18
     94c:	07 c0       	rjmp	.+14     	; 0x95c <ScreenTest+0x232>
		}
	
		else if(BTN_MINUS)
     94e:	89 b3       	in	r24, 0x19	; 25
     950:	8f 3b       	cpi	r24, 0xBF	; 191
     952:	19 f4       	brne	.+6      	; 0x95a <ScreenTest+0x230>
		{
			VNT_VAC_OFF;
     954:	92 98       	cbi	0x12, 2	; 18
			VNT_CHANGE;
     956:	93 9a       	sbi	0x12, 3	; 18
     958:	01 c0       	rjmp	.+2      	; 0x95c <ScreenTest+0x232>
		}
		else
		VNT_HOLD;
     95a:	93 98       	cbi	0x12, 3	; 18
}
     95c:	df 91       	pop	r29
     95e:	cf 91       	pop	r28
     960:	08 95       	ret

00000962 <ScreenMain>:
void ScreenMain()
{
     962:	0f 93       	push	r16
     964:	1f 93       	push	r17
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
	if (ScreenChanged)
     96a:	80 91 c2 01 	lds	r24, 0x01C2
     96e:	88 23       	and	r24, r24
     970:	11 f1       	breq	.+68     	; 0x9b6 <ScreenMain+0x54>
	{
		lcd_clrscr();
     972:	0e 94 75 02 	call	0x4ea	; 0x4ea <lcd_clrscr>
		lcd_home();
     976:	0e 94 79 02 	call	0x4f2	; 0x4f2 <lcd_home>
		lcd_puts("  PEAK");
     97a:	8f e8       	ldi	r24, 0x8F	; 143
     97c:	91 e0       	ldi	r25, 0x01	; 1
     97e:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_puts>
		lcd_gotoxy(0,1);
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	61 e0       	ldi	r22, 0x01	; 1
     986:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
		lcd_puts("  Max pressure      ");
     98a:	86 e9       	ldi	r24, 0x96	; 150
     98c:	91 e0       	ldi	r25, 0x01	; 1
     98e:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_puts>
		lcd_gotoxy(0,2);
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	62 e0       	ldi	r22, 0x02	; 2
     996:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
		lcd_puts("  Pressure     Bar");
     99a:	84 e5       	ldi	r24, 0x54	; 84
     99c:	91 e0       	ldi	r25, 0x01	; 1
     99e:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_puts>
		lcd_gotoxy(0,3);
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	63 e0       	ldi	r22, 0x03	; 3
     9a6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
		lcd_puts("  Throttle POS ");
     9aa:	87 e6       	ldi	r24, 0x67	; 103
     9ac:	91 e0       	ldi	r25, 0x01	; 1
     9ae:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_puts>
		ScreenChanged = false;
     9b2:	10 92 c2 01 	sts	0x01C2, r1
	}
	
	lcd_gotoxy(0,0);
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
	lcd_puts("  ");
     9be:	c7 e7       	ldi	r28, 0x77	; 119
     9c0:	d1 e0       	ldi	r29, 0x01	; 1
     9c2:	ce 01       	movw	r24, r28
     9c4:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_puts>
	lcd_gotoxy(0,1);
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	61 e0       	ldi	r22, 0x01	; 1
     9cc:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
	lcd_puts("  ");
     9d0:	ce 01       	movw	r24, r28
     9d2:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_puts>
	lcd_gotoxy(0,2);
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	62 e0       	ldi	r22, 0x02	; 2
     9da:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
	lcd_puts("  ");
     9de:	ce 01       	movw	r24, r28
     9e0:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_puts>
	lcd_gotoxy(0,3);
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	63 e0       	ldi	r22, 0x03	; 3
     9e8:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
	lcd_puts("  ");
     9ec:	ce 01       	movw	r24, r28
     9ee:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_puts>
	

	lcd_gotoxy(15,1);
     9f2:	8f e0       	ldi	r24, 0x0F	; 15
     9f4:	61 e0       	ldi	r22, 0x01	; 1
     9f6:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
	lcd_puts("     ");
     9fa:	0e e7       	ldi	r16, 0x7E	; 126
     9fc:	11 e0       	ldi	r17, 0x01	; 1
     9fe:	c8 01       	movw	r24, r16
     a00:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_puts>
	lcd_gotoxy(15,1);
     a04:	8f e0       	ldi	r24, 0x0F	; 15
     a06:	61 e0       	ldi	r22, 0x01	; 1
     a08:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
	PutPressure(MaxSlegis);
     a0c:	80 91 02 01 	lds	r24, 0x0102
     a10:	90 91 03 01 	lds	r25, 0x0103
     a14:	0e 94 c1 00 	call	0x182	; 0x182 <PutPressure>
	
	itoa(getPedalPosition(),buffer,10);
     a18:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <getPedalPosition>
     a1c:	c8 eb       	ldi	r28, 0xB8	; 184
     a1e:	d1 e0       	ldi	r29, 0x01	; 1
     a20:	be 01       	movw	r22, r28
     a22:	4a e0       	ldi	r20, 0x0A	; 10
     a24:	50 e0       	ldi	r21, 0x00	; 0
     a26:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <itoa>
	lcd_gotoxy(16,3);
     a2a:	80 e1       	ldi	r24, 0x10	; 16
     a2c:	63 e0       	ldi	r22, 0x03	; 3
     a2e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
	lcd_puts("     ");
     a32:	c8 01       	movw	r24, r16
     a34:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_puts>
	lcd_gotoxy(16,3);
     a38:	80 e1       	ldi	r24, 0x10	; 16
     a3a:	63 e0       	ldi	r22, 0x03	; 3
     a3c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
	lcd_puts(buffer);
     a40:	ce 01       	movw	r24, r28
     a42:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_puts>
	
	
	lcd_gotoxy(11,2);
     a46:	8b e0       	ldi	r24, 0x0B	; 11
     a48:	62 e0       	ldi	r22, 0x02	; 2
     a4a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
	lcd_puts("    ");
     a4e:	c4 e8       	ldi	r28, 0x84	; 132
     a50:	d1 e0       	ldi	r29, 0x01	; 1
     a52:	ce 01       	movw	r24, r28
     a54:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_puts>
	lcd_gotoxy(11,2);
     a58:	8b e0       	ldi	r24, 0x0B	; 11
     a5a:	62 e0       	ldi	r22, 0x02	; 2
     a5c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
	PutPressure(pressure);
     a60:	80 91 b4 01 	lds	r24, 0x01B4
     a64:	90 91 b5 01 	lds	r25, 0x01B5
     a68:	0e 94 c1 00 	call	0x182	; 0x182 <PutPressure>
	
	
	lcd_gotoxy(7,0);
     a6c:	87 e0       	ldi	r24, 0x07	; 7
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
	lcd_puts("    ");
     a74:	ce 01       	movw	r24, r28
     a76:	0e 94 9d 02 	call	0x53a	; 0x53a <lcd_puts>
	lcd_gotoxy(7,0);
     a7a:	87 e0       	ldi	r24, 0x07	; 7
     a7c:	60 e0       	ldi	r22, 0x00	; 0
     a7e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <lcd_gotoxy>
	PutPressure(peakPressure);
     a82:	80 91 ad 01 	lds	r24, 0x01AD
     a86:	90 91 ae 01 	lds	r25, 0x01AE
     a8a:	0e 94 c1 00 	call	0x182	; 0x182 <PutPressure>
	
	
	if(BTN_MINUS)
     a8e:	89 b3       	in	r24, 0x19	; 25
     a90:	8f 3b       	cpi	r24, 0xBF	; 191
     a92:	49 f4       	brne	.+18     	; 0xaa6 <ScreenMain+0x144>
	MaxSlegis=MaxSlegis-10;
     a94:	80 91 02 01 	lds	r24, 0x0102
     a98:	90 91 03 01 	lds	r25, 0x0103
     a9c:	0a 97       	sbiw	r24, 0x0a	; 10
     a9e:	90 93 03 01 	sts	0x0103, r25
     aa2:	80 93 02 01 	sts	0x0102, r24
	if(BTN_PLUS)
     aa6:	89 b3       	in	r24, 0x19	; 25
     aa8:	8f 37       	cpi	r24, 0x7F	; 127
     aaa:	49 f4       	brne	.+18     	; 0xabe <ScreenMain+0x15c>
	MaxSlegis=MaxSlegis+10;
     aac:	80 91 02 01 	lds	r24, 0x0102
     ab0:	90 91 03 01 	lds	r25, 0x0103
     ab4:	0a 96       	adiw	r24, 0x0a	; 10
     ab6:	90 93 03 01 	sts	0x0103, r25
     aba:	80 93 02 01 	sts	0x0102, r24
	if(MaxSlegis>90)
     abe:	80 91 02 01 	lds	r24, 0x0102
     ac2:	90 91 03 01 	lds	r25, 0x0103
     ac6:	8b 35       	cpi	r24, 0x5B	; 91
     ac8:	91 05       	cpc	r25, r1
     aca:	34 f0       	brlt	.+12     	; 0xad8 <ScreenMain+0x176>
	MaxSlegis=90;
     acc:	8a e5       	ldi	r24, 0x5A	; 90
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	90 93 03 01 	sts	0x0103, r25
     ad4:	80 93 02 01 	sts	0x0102, r24
	if(MaxSlegis<0)
     ad8:	80 91 02 01 	lds	r24, 0x0102
     adc:	90 91 03 01 	lds	r25, 0x0103
     ae0:	99 23       	and	r25, r25
     ae2:	24 f4       	brge	.+8      	; 0xaec <ScreenMain+0x18a>
	MaxSlegis=0;
     ae4:	10 92 03 01 	sts	0x0103, r1
     ae8:	10 92 02 01 	sts	0x0102, r1


}
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	08 95       	ret

00000af6 <main>:
int main(void)
{
	startup();
     af6:	0e 94 57 03 	call	0x6ae	; 0x6ae <startup>
	while(1)
	{
			

			switch (ScreenType)
     afa:	80 91 b6 01 	lds	r24, 0x01B6
     afe:	90 91 b7 01 	lds	r25, 0x01B7
     b02:	81 30       	cpi	r24, 0x01	; 1
     b04:	91 05       	cpc	r25, r1
     b06:	31 f0       	breq	.+12     	; 0xb14 <main+0x1e>
     b08:	82 30       	cpi	r24, 0x02	; 2
     b0a:	91 05       	cpc	r25, r1
     b0c:	29 f4       	brne	.+10     	; 0xb18 <main+0x22>
			{
				case SCREEN_MAIN :
				ScreenMain();
     b0e:	0e 94 b1 04 	call	0x962	; 0x962 <ScreenMain>
				break;
     b12:	02 c0       	rjmp	.+4      	; 0xb18 <main+0x22>
				
				case SCREEN_TEST :
				ScreenTest();
     b14:	0e 94 95 03 	call	0x72a	; 0x72a <ScreenTest>
     b18:	8f ef       	ldi	r24, 0xFF	; 255
     b1a:	91 ee       	ldi	r25, 0xE1	; 225
     b1c:	a4 e0       	ldi	r26, 0x04	; 4
     b1e:	81 50       	subi	r24, 0x01	; 1
     b20:	90 40       	sbci	r25, 0x00	; 0
     b22:	a0 40       	sbci	r26, 0x00	; 0
     b24:	e1 f7       	brne	.-8      	; 0xb1e <main+0x28>
     b26:	00 c0       	rjmp	.+0      	; 0xb28 <main+0x32>
     b28:	00 00       	nop
     b2a:	e7 cf       	rjmp	.-50     	; 0xafa <main+0x4>

00000b2c <__subsf3>:
     b2c:	50 58       	subi	r21, 0x80	; 128

00000b2e <__addsf3>:
     b2e:	bb 27       	eor	r27, r27
     b30:	aa 27       	eor	r26, r26
     b32:	0e d0       	rcall	.+28     	; 0xb50 <__addsf3x>
     b34:	75 c1       	rjmp	.+746    	; 0xe20 <__fp_round>
     b36:	66 d1       	rcall	.+716    	; 0xe04 <__fp_pscA>
     b38:	30 f0       	brcs	.+12     	; 0xb46 <__addsf3+0x18>
     b3a:	6b d1       	rcall	.+726    	; 0xe12 <__fp_pscB>
     b3c:	20 f0       	brcs	.+8      	; 0xb46 <__addsf3+0x18>
     b3e:	31 f4       	brne	.+12     	; 0xb4c <__addsf3+0x1e>
     b40:	9f 3f       	cpi	r25, 0xFF	; 255
     b42:	11 f4       	brne	.+4      	; 0xb48 <__addsf3+0x1a>
     b44:	1e f4       	brtc	.+6      	; 0xb4c <__addsf3+0x1e>
     b46:	5b c1       	rjmp	.+694    	; 0xdfe <__fp_nan>
     b48:	0e f4       	brtc	.+2      	; 0xb4c <__addsf3+0x1e>
     b4a:	e0 95       	com	r30
     b4c:	e7 fb       	bst	r30, 7
     b4e:	51 c1       	rjmp	.+674    	; 0xdf2 <__fp_inf>

00000b50 <__addsf3x>:
     b50:	e9 2f       	mov	r30, r25
     b52:	77 d1       	rcall	.+750    	; 0xe42 <__fp_split3>
     b54:	80 f3       	brcs	.-32     	; 0xb36 <__addsf3+0x8>
     b56:	ba 17       	cp	r27, r26
     b58:	62 07       	cpc	r22, r18
     b5a:	73 07       	cpc	r23, r19
     b5c:	84 07       	cpc	r24, r20
     b5e:	95 07       	cpc	r25, r21
     b60:	18 f0       	brcs	.+6      	; 0xb68 <__addsf3x+0x18>
     b62:	71 f4       	brne	.+28     	; 0xb80 <__addsf3x+0x30>
     b64:	9e f5       	brtc	.+102    	; 0xbcc <__addsf3x+0x7c>
     b66:	8f c1       	rjmp	.+798    	; 0xe86 <__fp_zero>
     b68:	0e f4       	brtc	.+2      	; 0xb6c <__addsf3x+0x1c>
     b6a:	e0 95       	com	r30
     b6c:	0b 2e       	mov	r0, r27
     b6e:	ba 2f       	mov	r27, r26
     b70:	a0 2d       	mov	r26, r0
     b72:	0b 01       	movw	r0, r22
     b74:	b9 01       	movw	r22, r18
     b76:	90 01       	movw	r18, r0
     b78:	0c 01       	movw	r0, r24
     b7a:	ca 01       	movw	r24, r20
     b7c:	a0 01       	movw	r20, r0
     b7e:	11 24       	eor	r1, r1
     b80:	ff 27       	eor	r31, r31
     b82:	59 1b       	sub	r21, r25
     b84:	99 f0       	breq	.+38     	; 0xbac <__addsf3x+0x5c>
     b86:	59 3f       	cpi	r21, 0xF9	; 249
     b88:	50 f4       	brcc	.+20     	; 0xb9e <__addsf3x+0x4e>
     b8a:	50 3e       	cpi	r21, 0xE0	; 224
     b8c:	68 f1       	brcs	.+90     	; 0xbe8 <__addsf3x+0x98>
     b8e:	1a 16       	cp	r1, r26
     b90:	f0 40       	sbci	r31, 0x00	; 0
     b92:	a2 2f       	mov	r26, r18
     b94:	23 2f       	mov	r18, r19
     b96:	34 2f       	mov	r19, r20
     b98:	44 27       	eor	r20, r20
     b9a:	58 5f       	subi	r21, 0xF8	; 248
     b9c:	f3 cf       	rjmp	.-26     	; 0xb84 <__addsf3x+0x34>
     b9e:	46 95       	lsr	r20
     ba0:	37 95       	ror	r19
     ba2:	27 95       	ror	r18
     ba4:	a7 95       	ror	r26
     ba6:	f0 40       	sbci	r31, 0x00	; 0
     ba8:	53 95       	inc	r21
     baa:	c9 f7       	brne	.-14     	; 0xb9e <__addsf3x+0x4e>
     bac:	7e f4       	brtc	.+30     	; 0xbcc <__addsf3x+0x7c>
     bae:	1f 16       	cp	r1, r31
     bb0:	ba 0b       	sbc	r27, r26
     bb2:	62 0b       	sbc	r22, r18
     bb4:	73 0b       	sbc	r23, r19
     bb6:	84 0b       	sbc	r24, r20
     bb8:	ba f0       	brmi	.+46     	; 0xbe8 <__addsf3x+0x98>
     bba:	91 50       	subi	r25, 0x01	; 1
     bbc:	a1 f0       	breq	.+40     	; 0xbe6 <__addsf3x+0x96>
     bbe:	ff 0f       	add	r31, r31
     bc0:	bb 1f       	adc	r27, r27
     bc2:	66 1f       	adc	r22, r22
     bc4:	77 1f       	adc	r23, r23
     bc6:	88 1f       	adc	r24, r24
     bc8:	c2 f7       	brpl	.-16     	; 0xbba <__addsf3x+0x6a>
     bca:	0e c0       	rjmp	.+28     	; 0xbe8 <__addsf3x+0x98>
     bcc:	ba 0f       	add	r27, r26
     bce:	62 1f       	adc	r22, r18
     bd0:	73 1f       	adc	r23, r19
     bd2:	84 1f       	adc	r24, r20
     bd4:	48 f4       	brcc	.+18     	; 0xbe8 <__addsf3x+0x98>
     bd6:	87 95       	ror	r24
     bd8:	77 95       	ror	r23
     bda:	67 95       	ror	r22
     bdc:	b7 95       	ror	r27
     bde:	f7 95       	ror	r31
     be0:	9e 3f       	cpi	r25, 0xFE	; 254
     be2:	08 f0       	brcs	.+2      	; 0xbe6 <__addsf3x+0x96>
     be4:	b3 cf       	rjmp	.-154    	; 0xb4c <__addsf3+0x1e>
     be6:	93 95       	inc	r25
     be8:	88 0f       	add	r24, r24
     bea:	08 f0       	brcs	.+2      	; 0xbee <__addsf3x+0x9e>
     bec:	99 27       	eor	r25, r25
     bee:	ee 0f       	add	r30, r30
     bf0:	97 95       	ror	r25
     bf2:	87 95       	ror	r24
     bf4:	08 95       	ret

00000bf6 <__cmpsf2>:
     bf6:	d9 d0       	rcall	.+434    	; 0xdaa <__fp_cmp>
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__cmpsf2+0x6>
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	08 95       	ret

00000bfe <__divsf3>:
     bfe:	0c d0       	rcall	.+24     	; 0xc18 <__divsf3x>
     c00:	0f c1       	rjmp	.+542    	; 0xe20 <__fp_round>
     c02:	07 d1       	rcall	.+526    	; 0xe12 <__fp_pscB>
     c04:	40 f0       	brcs	.+16     	; 0xc16 <__divsf3+0x18>
     c06:	fe d0       	rcall	.+508    	; 0xe04 <__fp_pscA>
     c08:	30 f0       	brcs	.+12     	; 0xc16 <__divsf3+0x18>
     c0a:	21 f4       	brne	.+8      	; 0xc14 <__divsf3+0x16>
     c0c:	5f 3f       	cpi	r21, 0xFF	; 255
     c0e:	19 f0       	breq	.+6      	; 0xc16 <__divsf3+0x18>
     c10:	f0 c0       	rjmp	.+480    	; 0xdf2 <__fp_inf>
     c12:	51 11       	cpse	r21, r1
     c14:	39 c1       	rjmp	.+626    	; 0xe88 <__fp_szero>
     c16:	f3 c0       	rjmp	.+486    	; 0xdfe <__fp_nan>

00000c18 <__divsf3x>:
     c18:	14 d1       	rcall	.+552    	; 0xe42 <__fp_split3>
     c1a:	98 f3       	brcs	.-26     	; 0xc02 <__divsf3+0x4>

00000c1c <__divsf3_pse>:
     c1c:	99 23       	and	r25, r25
     c1e:	c9 f3       	breq	.-14     	; 0xc12 <__divsf3+0x14>
     c20:	55 23       	and	r21, r21
     c22:	b1 f3       	breq	.-20     	; 0xc10 <__divsf3+0x12>
     c24:	95 1b       	sub	r25, r21
     c26:	55 0b       	sbc	r21, r21
     c28:	bb 27       	eor	r27, r27
     c2a:	aa 27       	eor	r26, r26
     c2c:	62 17       	cp	r22, r18
     c2e:	73 07       	cpc	r23, r19
     c30:	84 07       	cpc	r24, r20
     c32:	38 f0       	brcs	.+14     	; 0xc42 <__divsf3_pse+0x26>
     c34:	9f 5f       	subi	r25, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	22 0f       	add	r18, r18
     c3a:	33 1f       	adc	r19, r19
     c3c:	44 1f       	adc	r20, r20
     c3e:	aa 1f       	adc	r26, r26
     c40:	a9 f3       	breq	.-22     	; 0xc2c <__divsf3_pse+0x10>
     c42:	33 d0       	rcall	.+102    	; 0xcaa <__divsf3_pse+0x8e>
     c44:	0e 2e       	mov	r0, r30
     c46:	3a f0       	brmi	.+14     	; 0xc56 <__divsf3_pse+0x3a>
     c48:	e0 e8       	ldi	r30, 0x80	; 128
     c4a:	30 d0       	rcall	.+96     	; 0xcac <__divsf3_pse+0x90>
     c4c:	91 50       	subi	r25, 0x01	; 1
     c4e:	50 40       	sbci	r21, 0x00	; 0
     c50:	e6 95       	lsr	r30
     c52:	00 1c       	adc	r0, r0
     c54:	ca f7       	brpl	.-14     	; 0xc48 <__divsf3_pse+0x2c>
     c56:	29 d0       	rcall	.+82     	; 0xcaa <__divsf3_pse+0x8e>
     c58:	fe 2f       	mov	r31, r30
     c5a:	27 d0       	rcall	.+78     	; 0xcaa <__divsf3_pse+0x8e>
     c5c:	66 0f       	add	r22, r22
     c5e:	77 1f       	adc	r23, r23
     c60:	88 1f       	adc	r24, r24
     c62:	bb 1f       	adc	r27, r27
     c64:	26 17       	cp	r18, r22
     c66:	37 07       	cpc	r19, r23
     c68:	48 07       	cpc	r20, r24
     c6a:	ab 07       	cpc	r26, r27
     c6c:	b0 e8       	ldi	r27, 0x80	; 128
     c6e:	09 f0       	breq	.+2      	; 0xc72 <__divsf3_pse+0x56>
     c70:	bb 0b       	sbc	r27, r27
     c72:	80 2d       	mov	r24, r0
     c74:	bf 01       	movw	r22, r30
     c76:	ff 27       	eor	r31, r31
     c78:	93 58       	subi	r25, 0x83	; 131
     c7a:	5f 4f       	sbci	r21, 0xFF	; 255
     c7c:	2a f0       	brmi	.+10     	; 0xc88 <__divsf3_pse+0x6c>
     c7e:	9e 3f       	cpi	r25, 0xFE	; 254
     c80:	51 05       	cpc	r21, r1
     c82:	68 f0       	brcs	.+26     	; 0xc9e <__divsf3_pse+0x82>
     c84:	b6 c0       	rjmp	.+364    	; 0xdf2 <__fp_inf>
     c86:	00 c1       	rjmp	.+512    	; 0xe88 <__fp_szero>
     c88:	5f 3f       	cpi	r21, 0xFF	; 255
     c8a:	ec f3       	brlt	.-6      	; 0xc86 <__divsf3_pse+0x6a>
     c8c:	98 3e       	cpi	r25, 0xE8	; 232
     c8e:	dc f3       	brlt	.-10     	; 0xc86 <__divsf3_pse+0x6a>
     c90:	86 95       	lsr	r24
     c92:	77 95       	ror	r23
     c94:	67 95       	ror	r22
     c96:	b7 95       	ror	r27
     c98:	f7 95       	ror	r31
     c9a:	9f 5f       	subi	r25, 0xFF	; 255
     c9c:	c9 f7       	brne	.-14     	; 0xc90 <__divsf3_pse+0x74>
     c9e:	88 0f       	add	r24, r24
     ca0:	91 1d       	adc	r25, r1
     ca2:	96 95       	lsr	r25
     ca4:	87 95       	ror	r24
     ca6:	97 f9       	bld	r25, 7
     ca8:	08 95       	ret
     caa:	e1 e0       	ldi	r30, 0x01	; 1
     cac:	66 0f       	add	r22, r22
     cae:	77 1f       	adc	r23, r23
     cb0:	88 1f       	adc	r24, r24
     cb2:	bb 1f       	adc	r27, r27
     cb4:	62 17       	cp	r22, r18
     cb6:	73 07       	cpc	r23, r19
     cb8:	84 07       	cpc	r24, r20
     cba:	ba 07       	cpc	r27, r26
     cbc:	20 f0       	brcs	.+8      	; 0xcc6 <__divsf3_pse+0xaa>
     cbe:	62 1b       	sub	r22, r18
     cc0:	73 0b       	sbc	r23, r19
     cc2:	84 0b       	sbc	r24, r20
     cc4:	ba 0b       	sbc	r27, r26
     cc6:	ee 1f       	adc	r30, r30
     cc8:	88 f7       	brcc	.-30     	; 0xcac <__divsf3_pse+0x90>
     cca:	e0 95       	com	r30
     ccc:	08 95       	ret

00000cce <__fixsfsi>:
     cce:	04 d0       	rcall	.+8      	; 0xcd8 <__fixunssfsi>
     cd0:	68 94       	set
     cd2:	b1 11       	cpse	r27, r1
     cd4:	d9 c0       	rjmp	.+434    	; 0xe88 <__fp_szero>
     cd6:	08 95       	ret

00000cd8 <__fixunssfsi>:
     cd8:	bc d0       	rcall	.+376    	; 0xe52 <__fp_splitA>
     cda:	88 f0       	brcs	.+34     	; 0xcfe <__fixunssfsi+0x26>
     cdc:	9f 57       	subi	r25, 0x7F	; 127
     cde:	90 f0       	brcs	.+36     	; 0xd04 <__fixunssfsi+0x2c>
     ce0:	b9 2f       	mov	r27, r25
     ce2:	99 27       	eor	r25, r25
     ce4:	b7 51       	subi	r27, 0x17	; 23
     ce6:	a0 f0       	brcs	.+40     	; 0xd10 <__fixunssfsi+0x38>
     ce8:	d1 f0       	breq	.+52     	; 0xd1e <__fixunssfsi+0x46>
     cea:	66 0f       	add	r22, r22
     cec:	77 1f       	adc	r23, r23
     cee:	88 1f       	adc	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	1a f0       	brmi	.+6      	; 0xcfa <__fixunssfsi+0x22>
     cf4:	ba 95       	dec	r27
     cf6:	c9 f7       	brne	.-14     	; 0xcea <__fixunssfsi+0x12>
     cf8:	12 c0       	rjmp	.+36     	; 0xd1e <__fixunssfsi+0x46>
     cfa:	b1 30       	cpi	r27, 0x01	; 1
     cfc:	81 f0       	breq	.+32     	; 0xd1e <__fixunssfsi+0x46>
     cfe:	c3 d0       	rcall	.+390    	; 0xe86 <__fp_zero>
     d00:	b1 e0       	ldi	r27, 0x01	; 1
     d02:	08 95       	ret
     d04:	c0 c0       	rjmp	.+384    	; 0xe86 <__fp_zero>
     d06:	67 2f       	mov	r22, r23
     d08:	78 2f       	mov	r23, r24
     d0a:	88 27       	eor	r24, r24
     d0c:	b8 5f       	subi	r27, 0xF8	; 248
     d0e:	39 f0       	breq	.+14     	; 0xd1e <__fixunssfsi+0x46>
     d10:	b9 3f       	cpi	r27, 0xF9	; 249
     d12:	cc f3       	brlt	.-14     	; 0xd06 <__fixunssfsi+0x2e>
     d14:	86 95       	lsr	r24
     d16:	77 95       	ror	r23
     d18:	67 95       	ror	r22
     d1a:	b3 95       	inc	r27
     d1c:	d9 f7       	brne	.-10     	; 0xd14 <__fixunssfsi+0x3c>
     d1e:	3e f4       	brtc	.+14     	; 0xd2e <__fixunssfsi+0x56>
     d20:	90 95       	com	r25
     d22:	80 95       	com	r24
     d24:	70 95       	com	r23
     d26:	61 95       	neg	r22
     d28:	7f 4f       	sbci	r23, 0xFF	; 255
     d2a:	8f 4f       	sbci	r24, 0xFF	; 255
     d2c:	9f 4f       	sbci	r25, 0xFF	; 255
     d2e:	08 95       	ret

00000d30 <__floatunsisf>:
     d30:	e8 94       	clt
     d32:	09 c0       	rjmp	.+18     	; 0xd46 <__floatsisf+0x12>

00000d34 <__floatsisf>:
     d34:	97 fb       	bst	r25, 7
     d36:	3e f4       	brtc	.+14     	; 0xd46 <__floatsisf+0x12>
     d38:	90 95       	com	r25
     d3a:	80 95       	com	r24
     d3c:	70 95       	com	r23
     d3e:	61 95       	neg	r22
     d40:	7f 4f       	sbci	r23, 0xFF	; 255
     d42:	8f 4f       	sbci	r24, 0xFF	; 255
     d44:	9f 4f       	sbci	r25, 0xFF	; 255
     d46:	99 23       	and	r25, r25
     d48:	a9 f0       	breq	.+42     	; 0xd74 <__floatsisf+0x40>
     d4a:	f9 2f       	mov	r31, r25
     d4c:	96 e9       	ldi	r25, 0x96	; 150
     d4e:	bb 27       	eor	r27, r27
     d50:	93 95       	inc	r25
     d52:	f6 95       	lsr	r31
     d54:	87 95       	ror	r24
     d56:	77 95       	ror	r23
     d58:	67 95       	ror	r22
     d5a:	b7 95       	ror	r27
     d5c:	f1 11       	cpse	r31, r1
     d5e:	f8 cf       	rjmp	.-16     	; 0xd50 <__floatsisf+0x1c>
     d60:	fa f4       	brpl	.+62     	; 0xda0 <__floatsisf+0x6c>
     d62:	bb 0f       	add	r27, r27
     d64:	11 f4       	brne	.+4      	; 0xd6a <__floatsisf+0x36>
     d66:	60 ff       	sbrs	r22, 0
     d68:	1b c0       	rjmp	.+54     	; 0xda0 <__floatsisf+0x6c>
     d6a:	6f 5f       	subi	r22, 0xFF	; 255
     d6c:	7f 4f       	sbci	r23, 0xFF	; 255
     d6e:	8f 4f       	sbci	r24, 0xFF	; 255
     d70:	9f 4f       	sbci	r25, 0xFF	; 255
     d72:	16 c0       	rjmp	.+44     	; 0xda0 <__floatsisf+0x6c>
     d74:	88 23       	and	r24, r24
     d76:	11 f0       	breq	.+4      	; 0xd7c <__floatsisf+0x48>
     d78:	96 e9       	ldi	r25, 0x96	; 150
     d7a:	11 c0       	rjmp	.+34     	; 0xd9e <__floatsisf+0x6a>
     d7c:	77 23       	and	r23, r23
     d7e:	21 f0       	breq	.+8      	; 0xd88 <__floatsisf+0x54>
     d80:	9e e8       	ldi	r25, 0x8E	; 142
     d82:	87 2f       	mov	r24, r23
     d84:	76 2f       	mov	r23, r22
     d86:	05 c0       	rjmp	.+10     	; 0xd92 <__floatsisf+0x5e>
     d88:	66 23       	and	r22, r22
     d8a:	71 f0       	breq	.+28     	; 0xda8 <__floatsisf+0x74>
     d8c:	96 e8       	ldi	r25, 0x86	; 134
     d8e:	86 2f       	mov	r24, r22
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	60 e0       	ldi	r22, 0x00	; 0
     d94:	2a f0       	brmi	.+10     	; 0xda0 <__floatsisf+0x6c>
     d96:	9a 95       	dec	r25
     d98:	66 0f       	add	r22, r22
     d9a:	77 1f       	adc	r23, r23
     d9c:	88 1f       	adc	r24, r24
     d9e:	da f7       	brpl	.-10     	; 0xd96 <__floatsisf+0x62>
     da0:	88 0f       	add	r24, r24
     da2:	96 95       	lsr	r25
     da4:	87 95       	ror	r24
     da6:	97 f9       	bld	r25, 7
     da8:	08 95       	ret

00000daa <__fp_cmp>:
     daa:	99 0f       	add	r25, r25
     dac:	00 08       	sbc	r0, r0
     dae:	55 0f       	add	r21, r21
     db0:	aa 0b       	sbc	r26, r26
     db2:	e0 e8       	ldi	r30, 0x80	; 128
     db4:	fe ef       	ldi	r31, 0xFE	; 254
     db6:	16 16       	cp	r1, r22
     db8:	17 06       	cpc	r1, r23
     dba:	e8 07       	cpc	r30, r24
     dbc:	f9 07       	cpc	r31, r25
     dbe:	c0 f0       	brcs	.+48     	; 0xdf0 <__fp_cmp+0x46>
     dc0:	12 16       	cp	r1, r18
     dc2:	13 06       	cpc	r1, r19
     dc4:	e4 07       	cpc	r30, r20
     dc6:	f5 07       	cpc	r31, r21
     dc8:	98 f0       	brcs	.+38     	; 0xdf0 <__fp_cmp+0x46>
     dca:	62 1b       	sub	r22, r18
     dcc:	73 0b       	sbc	r23, r19
     dce:	84 0b       	sbc	r24, r20
     dd0:	95 0b       	sbc	r25, r21
     dd2:	39 f4       	brne	.+14     	; 0xde2 <__fp_cmp+0x38>
     dd4:	0a 26       	eor	r0, r26
     dd6:	61 f0       	breq	.+24     	; 0xdf0 <__fp_cmp+0x46>
     dd8:	23 2b       	or	r18, r19
     dda:	24 2b       	or	r18, r20
     ddc:	25 2b       	or	r18, r21
     dde:	21 f4       	brne	.+8      	; 0xde8 <__fp_cmp+0x3e>
     de0:	08 95       	ret
     de2:	0a 26       	eor	r0, r26
     de4:	09 f4       	brne	.+2      	; 0xde8 <__fp_cmp+0x3e>
     de6:	a1 40       	sbci	r26, 0x01	; 1
     de8:	a6 95       	lsr	r26
     dea:	8f ef       	ldi	r24, 0xFF	; 255
     dec:	81 1d       	adc	r24, r1
     dee:	81 1d       	adc	r24, r1
     df0:	08 95       	ret

00000df2 <__fp_inf>:
     df2:	97 f9       	bld	r25, 7
     df4:	9f 67       	ori	r25, 0x7F	; 127
     df6:	80 e8       	ldi	r24, 0x80	; 128
     df8:	70 e0       	ldi	r23, 0x00	; 0
     dfa:	60 e0       	ldi	r22, 0x00	; 0
     dfc:	08 95       	ret

00000dfe <__fp_nan>:
     dfe:	9f ef       	ldi	r25, 0xFF	; 255
     e00:	80 ec       	ldi	r24, 0xC0	; 192
     e02:	08 95       	ret

00000e04 <__fp_pscA>:
     e04:	00 24       	eor	r0, r0
     e06:	0a 94       	dec	r0
     e08:	16 16       	cp	r1, r22
     e0a:	17 06       	cpc	r1, r23
     e0c:	18 06       	cpc	r1, r24
     e0e:	09 06       	cpc	r0, r25
     e10:	08 95       	ret

00000e12 <__fp_pscB>:
     e12:	00 24       	eor	r0, r0
     e14:	0a 94       	dec	r0
     e16:	12 16       	cp	r1, r18
     e18:	13 06       	cpc	r1, r19
     e1a:	14 06       	cpc	r1, r20
     e1c:	05 06       	cpc	r0, r21
     e1e:	08 95       	ret

00000e20 <__fp_round>:
     e20:	09 2e       	mov	r0, r25
     e22:	03 94       	inc	r0
     e24:	00 0c       	add	r0, r0
     e26:	11 f4       	brne	.+4      	; 0xe2c <__fp_round+0xc>
     e28:	88 23       	and	r24, r24
     e2a:	52 f0       	brmi	.+20     	; 0xe40 <__fp_round+0x20>
     e2c:	bb 0f       	add	r27, r27
     e2e:	40 f4       	brcc	.+16     	; 0xe40 <__fp_round+0x20>
     e30:	bf 2b       	or	r27, r31
     e32:	11 f4       	brne	.+4      	; 0xe38 <__fp_round+0x18>
     e34:	60 ff       	sbrs	r22, 0
     e36:	04 c0       	rjmp	.+8      	; 0xe40 <__fp_round+0x20>
     e38:	6f 5f       	subi	r22, 0xFF	; 255
     e3a:	7f 4f       	sbci	r23, 0xFF	; 255
     e3c:	8f 4f       	sbci	r24, 0xFF	; 255
     e3e:	9f 4f       	sbci	r25, 0xFF	; 255
     e40:	08 95       	ret

00000e42 <__fp_split3>:
     e42:	57 fd       	sbrc	r21, 7
     e44:	90 58       	subi	r25, 0x80	; 128
     e46:	44 0f       	add	r20, r20
     e48:	55 1f       	adc	r21, r21
     e4a:	59 f0       	breq	.+22     	; 0xe62 <__fp_splitA+0x10>
     e4c:	5f 3f       	cpi	r21, 0xFF	; 255
     e4e:	71 f0       	breq	.+28     	; 0xe6c <__fp_splitA+0x1a>
     e50:	47 95       	ror	r20

00000e52 <__fp_splitA>:
     e52:	88 0f       	add	r24, r24
     e54:	97 fb       	bst	r25, 7
     e56:	99 1f       	adc	r25, r25
     e58:	61 f0       	breq	.+24     	; 0xe72 <__fp_splitA+0x20>
     e5a:	9f 3f       	cpi	r25, 0xFF	; 255
     e5c:	79 f0       	breq	.+30     	; 0xe7c <__fp_splitA+0x2a>
     e5e:	87 95       	ror	r24
     e60:	08 95       	ret
     e62:	12 16       	cp	r1, r18
     e64:	13 06       	cpc	r1, r19
     e66:	14 06       	cpc	r1, r20
     e68:	55 1f       	adc	r21, r21
     e6a:	f2 cf       	rjmp	.-28     	; 0xe50 <__fp_split3+0xe>
     e6c:	46 95       	lsr	r20
     e6e:	f1 df       	rcall	.-30     	; 0xe52 <__fp_splitA>
     e70:	08 c0       	rjmp	.+16     	; 0xe82 <__fp_splitA+0x30>
     e72:	16 16       	cp	r1, r22
     e74:	17 06       	cpc	r1, r23
     e76:	18 06       	cpc	r1, r24
     e78:	99 1f       	adc	r25, r25
     e7a:	f1 cf       	rjmp	.-30     	; 0xe5e <__fp_splitA+0xc>
     e7c:	86 95       	lsr	r24
     e7e:	71 05       	cpc	r23, r1
     e80:	61 05       	cpc	r22, r1
     e82:	08 94       	sec
     e84:	08 95       	ret

00000e86 <__fp_zero>:
     e86:	e8 94       	clt

00000e88 <__fp_szero>:
     e88:	bb 27       	eor	r27, r27
     e8a:	66 27       	eor	r22, r22
     e8c:	77 27       	eor	r23, r23
     e8e:	cb 01       	movw	r24, r22
     e90:	97 f9       	bld	r25, 7
     e92:	08 95       	ret

00000e94 <__mulsf3>:
     e94:	0b d0       	rcall	.+22     	; 0xeac <__mulsf3x>
     e96:	c4 cf       	rjmp	.-120    	; 0xe20 <__fp_round>
     e98:	b5 df       	rcall	.-150    	; 0xe04 <__fp_pscA>
     e9a:	28 f0       	brcs	.+10     	; 0xea6 <__mulsf3+0x12>
     e9c:	ba df       	rcall	.-140    	; 0xe12 <__fp_pscB>
     e9e:	18 f0       	brcs	.+6      	; 0xea6 <__mulsf3+0x12>
     ea0:	95 23       	and	r25, r21
     ea2:	09 f0       	breq	.+2      	; 0xea6 <__mulsf3+0x12>
     ea4:	a6 cf       	rjmp	.-180    	; 0xdf2 <__fp_inf>
     ea6:	ab cf       	rjmp	.-170    	; 0xdfe <__fp_nan>
     ea8:	11 24       	eor	r1, r1
     eaa:	ee cf       	rjmp	.-36     	; 0xe88 <__fp_szero>

00000eac <__mulsf3x>:
     eac:	ca df       	rcall	.-108    	; 0xe42 <__fp_split3>
     eae:	a0 f3       	brcs	.-24     	; 0xe98 <__mulsf3+0x4>

00000eb0 <__mulsf3_pse>:
     eb0:	95 9f       	mul	r25, r21
     eb2:	d1 f3       	breq	.-12     	; 0xea8 <__mulsf3+0x14>
     eb4:	95 0f       	add	r25, r21
     eb6:	50 e0       	ldi	r21, 0x00	; 0
     eb8:	55 1f       	adc	r21, r21
     eba:	62 9f       	mul	r22, r18
     ebc:	f0 01       	movw	r30, r0
     ebe:	72 9f       	mul	r23, r18
     ec0:	bb 27       	eor	r27, r27
     ec2:	f0 0d       	add	r31, r0
     ec4:	b1 1d       	adc	r27, r1
     ec6:	63 9f       	mul	r22, r19
     ec8:	aa 27       	eor	r26, r26
     eca:	f0 0d       	add	r31, r0
     ecc:	b1 1d       	adc	r27, r1
     ece:	aa 1f       	adc	r26, r26
     ed0:	64 9f       	mul	r22, r20
     ed2:	66 27       	eor	r22, r22
     ed4:	b0 0d       	add	r27, r0
     ed6:	a1 1d       	adc	r26, r1
     ed8:	66 1f       	adc	r22, r22
     eda:	82 9f       	mul	r24, r18
     edc:	22 27       	eor	r18, r18
     ede:	b0 0d       	add	r27, r0
     ee0:	a1 1d       	adc	r26, r1
     ee2:	62 1f       	adc	r22, r18
     ee4:	73 9f       	mul	r23, r19
     ee6:	b0 0d       	add	r27, r0
     ee8:	a1 1d       	adc	r26, r1
     eea:	62 1f       	adc	r22, r18
     eec:	83 9f       	mul	r24, r19
     eee:	a0 0d       	add	r26, r0
     ef0:	61 1d       	adc	r22, r1
     ef2:	22 1f       	adc	r18, r18
     ef4:	74 9f       	mul	r23, r20
     ef6:	33 27       	eor	r19, r19
     ef8:	a0 0d       	add	r26, r0
     efa:	61 1d       	adc	r22, r1
     efc:	23 1f       	adc	r18, r19
     efe:	84 9f       	mul	r24, r20
     f00:	60 0d       	add	r22, r0
     f02:	21 1d       	adc	r18, r1
     f04:	82 2f       	mov	r24, r18
     f06:	76 2f       	mov	r23, r22
     f08:	6a 2f       	mov	r22, r26
     f0a:	11 24       	eor	r1, r1
     f0c:	9f 57       	subi	r25, 0x7F	; 127
     f0e:	50 40       	sbci	r21, 0x00	; 0
     f10:	8a f0       	brmi	.+34     	; 0xf34 <__mulsf3_pse+0x84>
     f12:	e1 f0       	breq	.+56     	; 0xf4c <__mulsf3_pse+0x9c>
     f14:	88 23       	and	r24, r24
     f16:	4a f0       	brmi	.+18     	; 0xf2a <__mulsf3_pse+0x7a>
     f18:	ee 0f       	add	r30, r30
     f1a:	ff 1f       	adc	r31, r31
     f1c:	bb 1f       	adc	r27, r27
     f1e:	66 1f       	adc	r22, r22
     f20:	77 1f       	adc	r23, r23
     f22:	88 1f       	adc	r24, r24
     f24:	91 50       	subi	r25, 0x01	; 1
     f26:	50 40       	sbci	r21, 0x00	; 0
     f28:	a9 f7       	brne	.-22     	; 0xf14 <__mulsf3_pse+0x64>
     f2a:	9e 3f       	cpi	r25, 0xFE	; 254
     f2c:	51 05       	cpc	r21, r1
     f2e:	70 f0       	brcs	.+28     	; 0xf4c <__mulsf3_pse+0x9c>
     f30:	60 cf       	rjmp	.-320    	; 0xdf2 <__fp_inf>
     f32:	aa cf       	rjmp	.-172    	; 0xe88 <__fp_szero>
     f34:	5f 3f       	cpi	r21, 0xFF	; 255
     f36:	ec f3       	brlt	.-6      	; 0xf32 <__mulsf3_pse+0x82>
     f38:	98 3e       	cpi	r25, 0xE8	; 232
     f3a:	dc f3       	brlt	.-10     	; 0xf32 <__mulsf3_pse+0x82>
     f3c:	86 95       	lsr	r24
     f3e:	77 95       	ror	r23
     f40:	67 95       	ror	r22
     f42:	b7 95       	ror	r27
     f44:	f7 95       	ror	r31
     f46:	e7 95       	ror	r30
     f48:	9f 5f       	subi	r25, 0xFF	; 255
     f4a:	c1 f7       	brne	.-16     	; 0xf3c <__mulsf3_pse+0x8c>
     f4c:	fe 2b       	or	r31, r30
     f4e:	88 0f       	add	r24, r24
     f50:	91 1d       	adc	r25, r1
     f52:	96 95       	lsr	r25
     f54:	87 95       	ror	r24
     f56:	97 f9       	bld	r25, 7
     f58:	08 95       	ret

00000f5a <__divmodhi4>:
     f5a:	97 fb       	bst	r25, 7
     f5c:	09 2e       	mov	r0, r25
     f5e:	07 26       	eor	r0, r23
     f60:	0a d0       	rcall	.+20     	; 0xf76 <__divmodhi4_neg1>
     f62:	77 fd       	sbrc	r23, 7
     f64:	04 d0       	rcall	.+8      	; 0xf6e <__divmodhi4_neg2>
     f66:	0c d0       	rcall	.+24     	; 0xf80 <__udivmodhi4>
     f68:	06 d0       	rcall	.+12     	; 0xf76 <__divmodhi4_neg1>
     f6a:	00 20       	and	r0, r0
     f6c:	1a f4       	brpl	.+6      	; 0xf74 <__divmodhi4_exit>

00000f6e <__divmodhi4_neg2>:
     f6e:	70 95       	com	r23
     f70:	61 95       	neg	r22
     f72:	7f 4f       	sbci	r23, 0xFF	; 255

00000f74 <__divmodhi4_exit>:
     f74:	08 95       	ret

00000f76 <__divmodhi4_neg1>:
     f76:	f6 f7       	brtc	.-4      	; 0xf74 <__divmodhi4_exit>
     f78:	90 95       	com	r25
     f7a:	81 95       	neg	r24
     f7c:	9f 4f       	sbci	r25, 0xFF	; 255
     f7e:	08 95       	ret

00000f80 <__udivmodhi4>:
     f80:	aa 1b       	sub	r26, r26
     f82:	bb 1b       	sub	r27, r27
     f84:	51 e1       	ldi	r21, 0x11	; 17
     f86:	07 c0       	rjmp	.+14     	; 0xf96 <__udivmodhi4_ep>

00000f88 <__udivmodhi4_loop>:
     f88:	aa 1f       	adc	r26, r26
     f8a:	bb 1f       	adc	r27, r27
     f8c:	a6 17       	cp	r26, r22
     f8e:	b7 07       	cpc	r27, r23
     f90:	10 f0       	brcs	.+4      	; 0xf96 <__udivmodhi4_ep>
     f92:	a6 1b       	sub	r26, r22
     f94:	b7 0b       	sbc	r27, r23

00000f96 <__udivmodhi4_ep>:
     f96:	88 1f       	adc	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	5a 95       	dec	r21
     f9c:	a9 f7       	brne	.-22     	; 0xf88 <__udivmodhi4_loop>
     f9e:	80 95       	com	r24
     fa0:	90 95       	com	r25
     fa2:	bc 01       	movw	r22, r24
     fa4:	cd 01       	movw	r24, r26
     fa6:	08 95       	ret

00000fa8 <itoa>:
     fa8:	fb 01       	movw	r30, r22
     faa:	9f 01       	movw	r18, r30
     fac:	e8 94       	clt
     fae:	42 30       	cpi	r20, 0x02	; 2
     fb0:	c4 f0       	brlt	.+48     	; 0xfe2 <itoa+0x3a>
     fb2:	45 32       	cpi	r20, 0x25	; 37
     fb4:	b4 f4       	brge	.+44     	; 0xfe2 <itoa+0x3a>
     fb6:	4a 30       	cpi	r20, 0x0A	; 10
     fb8:	29 f4       	brne	.+10     	; 0xfc4 <itoa+0x1c>
     fba:	97 fb       	bst	r25, 7
     fbc:	1e f4       	brtc	.+6      	; 0xfc4 <itoa+0x1c>
     fbe:	90 95       	com	r25
     fc0:	81 95       	neg	r24
     fc2:	9f 4f       	sbci	r25, 0xFF	; 255
     fc4:	64 2f       	mov	r22, r20
     fc6:	77 27       	eor	r23, r23
     fc8:	0e 94 c0 07 	call	0xf80	; 0xf80 <__udivmodhi4>
     fcc:	80 5d       	subi	r24, 0xD0	; 208
     fce:	8a 33       	cpi	r24, 0x3A	; 58
     fd0:	0c f0       	brlt	.+2      	; 0xfd4 <itoa+0x2c>
     fd2:	89 5d       	subi	r24, 0xD9	; 217
     fd4:	81 93       	st	Z+, r24
     fd6:	cb 01       	movw	r24, r22
     fd8:	00 97       	sbiw	r24, 0x00	; 0
     fda:	a1 f7       	brne	.-24     	; 0xfc4 <itoa+0x1c>
     fdc:	16 f4       	brtc	.+4      	; 0xfe2 <itoa+0x3a>
     fde:	5d e2       	ldi	r21, 0x2D	; 45
     fe0:	51 93       	st	Z+, r21
     fe2:	10 82       	st	Z, r1
     fe4:	c9 01       	movw	r24, r18
     fe6:	0c 94 f5 07 	jmp	0xfea	; 0xfea <strrev>

00000fea <strrev>:
     fea:	dc 01       	movw	r26, r24
     fec:	fc 01       	movw	r30, r24
     fee:	67 2f       	mov	r22, r23
     ff0:	71 91       	ld	r23, Z+
     ff2:	77 23       	and	r23, r23
     ff4:	e1 f7       	brne	.-8      	; 0xfee <strrev+0x4>
     ff6:	32 97       	sbiw	r30, 0x02	; 2
     ff8:	04 c0       	rjmp	.+8      	; 0x1002 <strrev+0x18>
     ffa:	7c 91       	ld	r23, X
     ffc:	6d 93       	st	X+, r22
     ffe:	70 83       	st	Z, r23
    1000:	62 91       	ld	r22, -Z
    1002:	ae 17       	cp	r26, r30
    1004:	bf 07       	cpc	r27, r31
    1006:	c8 f3       	brcs	.-14     	; 0xffa <strrev+0x10>
    1008:	08 95       	ret

0000100a <_exit>:
    100a:	f8 94       	cli

0000100c <__stop_program>:
    100c:	ff cf       	rjmp	.-2      	; 0x100c <__stop_program>
